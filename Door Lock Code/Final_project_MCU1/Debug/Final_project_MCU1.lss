
Final_project_MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  00003dce  00003e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001b4  008001b4  00003fb6  2**0
                  ALLOC
  3 .stab         00002f70  00000000  00000000  00003fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d62  00000000  00000000  00006f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aa6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b81c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bc09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c3d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 0b 	call	0x1712	; 0x1712 <main>
      8a:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ea       	ldi	r26, 0xA2	; 162
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 ea       	ldi	r24, 0xA2	; 162
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KeyPad_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	4c c0       	rjmp	.+152    	; 0xbec <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <KeyPad_getPressedKey+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <KeyPad_getPressedKey+0x1e>
     b6c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <KeyPad_getPressedKey+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <KeyPad_getPressedKey+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	28 c0       	rjmp	.+80     	; 0xbe0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     b90:	e9 e3       	ldi	r30, 0x39	; 57
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <KeyPad_getPressedKey+0x62>
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <KeyPad_getPressedKey+0x5e>
     bac:	ca 01       	movw	r24, r20
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	91 f4       	brne	.+36     	; 0xbda <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	98 2f       	mov	r25, r24
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	89 0f       	add	r24, r25
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	8f 5f       	subi	r24, 0xFF	; 255
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	a8 f2       	brcs	.-86     	; 0xb90 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	8a 83       	std	Y+2, r24	; 0x02
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <KeyPad_getPressedKey+0xae>
     bf2:	b0 cf       	rjmp	.-160    	; 0xb54 <KeyPad_getPressedKey+0xe>
     bf4:	ad cf       	rjmp	.-166    	; 0xb50 <KeyPad_getPressedKey+0xa>

00000bf6 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <KeyPad_4x4_adjustKeyNumber+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <KeyPad_4x4_adjustKeyNumber+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3c 83       	std	Y+4, r19	; 0x04
     c0c:	2b 83       	std	Y+3, r18	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <KeyPad_4x4_adjustKeyNumber+0x24>
     c18:	70 c0       	rjmp	.+224    	; 0xcfa <KeyPad_4x4_adjustKeyNumber+0x104>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	29 30       	cpi	r18, 0x09	; 9
     c20:	31 05       	cpc	r19, r1
     c22:	5c f5       	brge	.+86     	; 0xc7a <KeyPad_4x4_adjustKeyNumber+0x84>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <KeyPad_4x4_adjustKeyNumber+0x3a>
     c2e:	59 c0       	rjmp	.+178    	; 0xce2 <KeyPad_4x4_adjustKeyNumber+0xec>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	25 30       	cpi	r18, 0x05	; 5
     c36:	31 05       	cpc	r19, r1
     c38:	9c f4       	brge	.+38     	; 0xc60 <KeyPad_4x4_adjustKeyNumber+0x6a>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	91 05       	cpc	r25, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <KeyPad_4x4_adjustKeyNumber+0x50>
     c44:	48 c0       	rjmp	.+144    	; 0xcd6 <KeyPad_4x4_adjustKeyNumber+0xe0>
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	23 30       	cpi	r18, 0x03	; 3
     c4c:	31 05       	cpc	r19, r1
     c4e:	0c f0       	brlt	.+2      	; 0xc52 <KeyPad_4x4_adjustKeyNumber+0x5c>
     c50:	45 c0       	rjmp	.+138    	; 0xcdc <KeyPad_4x4_adjustKeyNumber+0xe6>
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <KeyPad_4x4_adjustKeyNumber+0x68>
     c5c:	39 c0       	rjmp	.+114    	; 0xcd0 <KeyPad_4x4_adjustKeyNumber+0xda>
     c5e:	67 c0       	rjmp	.+206    	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	3c 81       	ldd	r19, Y+4	; 0x04
     c64:	26 30       	cpi	r18, 0x06	; 6
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <KeyPad_4x4_adjustKeyNumber+0x76>
     c6a:	41 c0       	rjmp	.+130    	; 0xcee <KeyPad_4x4_adjustKeyNumber+0xf8>
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	87 30       	cpi	r24, 0x07	; 7
     c72:	91 05       	cpc	r25, r1
     c74:	0c f0       	brlt	.+2      	; 0xc78 <KeyPad_4x4_adjustKeyNumber+0x82>
     c76:	3e c0       	rjmp	.+124    	; 0xcf4 <KeyPad_4x4_adjustKeyNumber+0xfe>
     c78:	37 c0       	rjmp	.+110    	; 0xce8 <KeyPad_4x4_adjustKeyNumber+0xf2>
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	3c 81       	ldd	r19, Y+4	; 0x04
     c7e:	2c 30       	cpi	r18, 0x0C	; 12
     c80:	31 05       	cpc	r19, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <KeyPad_4x4_adjustKeyNumber+0x90>
     c84:	46 c0       	rjmp	.+140    	; 0xd12 <KeyPad_4x4_adjustKeyNumber+0x11c>
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	8d 30       	cpi	r24, 0x0D	; 13
     c8c:	91 05       	cpc	r25, r1
     c8e:	5c f4       	brge	.+22     	; 0xca6 <KeyPad_4x4_adjustKeyNumber+0xb0>
     c90:	2b 81       	ldd	r18, Y+3	; 0x03
     c92:	3c 81       	ldd	r19, Y+4	; 0x04
     c94:	2a 30       	cpi	r18, 0x0A	; 10
     c96:	31 05       	cpc	r19, r1
     c98:	b1 f1       	breq	.+108    	; 0xd06 <KeyPad_4x4_adjustKeyNumber+0x110>
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	8b 30       	cpi	r24, 0x0B	; 11
     ca0:	91 05       	cpc	r25, r1
     ca2:	a4 f5       	brge	.+104    	; 0xd0c <KeyPad_4x4_adjustKeyNumber+0x116>
     ca4:	2d c0       	rjmp	.+90     	; 0xd00 <KeyPad_4x4_adjustKeyNumber+0x10a>
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	3c 81       	ldd	r19, Y+4	; 0x04
     caa:	2e 30       	cpi	r18, 0x0E	; 14
     cac:	31 05       	cpc	r19, r1
     cae:	b9 f1       	breq	.+110    	; 0xd1e <KeyPad_4x4_adjustKeyNumber+0x128>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	8e 30       	cpi	r24, 0x0E	; 14
     cb6:	91 05       	cpc	r25, r1
     cb8:	7c f1       	brlt	.+94     	; 0xd18 <KeyPad_4x4_adjustKeyNumber+0x122>
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	3c 81       	ldd	r19, Y+4	; 0x04
     cbe:	2f 30       	cpi	r18, 0x0F	; 15
     cc0:	31 05       	cpc	r19, r1
     cc2:	79 f1       	breq	.+94     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x12c>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	80 31       	cpi	r24, 0x10	; 16
     cca:	91 05       	cpc	r25, r1
     ccc:	69 f1       	breq	.+90     	; 0xd28 <KeyPad_4x4_adjustKeyNumber+0x132>
     cce:	2f c0       	rjmp	.+94     	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	2e c0       	rjmp	.+92     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
     cd6:	28 e0       	ldi	r18, 0x08	; 8
     cd8:	2a 83       	std	Y+2, r18	; 0x02
     cda:	2b c0       	rjmp	.+86     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
     cdc:	39 e0       	ldi	r19, 0x09	; 9
     cde:	3a 83       	std	Y+2, r19	; 0x02
     ce0:	28 c0       	rjmp	.+80     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     ce2:	85 e2       	ldi	r24, 0x25	; 37
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	25 c0       	rjmp	.+74     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     cee:	25 e0       	ldi	r18, 0x05	; 5
     cf0:	2a 83       	std	Y+2, r18	; 0x02
     cf2:	1f c0       	rjmp	.+62     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
     cf4:	36 e0       	ldi	r19, 0x06	; 6
     cf6:	3a 83       	std	Y+2, r19	; 0x02
     cf8:	1c c0       	rjmp	.+56     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	19 c0       	rjmp	.+50     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	16 c0       	rjmp	.+44     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
     d06:	22 e0       	ldi	r18, 0x02	; 2
     d08:	2a 83       	std	Y+2, r18	; 0x02
     d0a:	13 c0       	rjmp	.+38     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
     d0c:	33 e0       	ldi	r19, 0x03	; 3
     d0e:	3a 83       	std	Y+2, r19	; 0x02
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     d12:	8d e2       	ldi	r24, 0x2D	; 45
     d14:	8a 83       	std	Y+2, r24	; 0x02
     d16:	0d c0       	rjmp	.+26     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     d18:	9d e0       	ldi	r25, 0x0D	; 13
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
     d1e:	1a 82       	std	Y+2, r1	; 0x02
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     d22:	2d e3       	ldi	r18, 0x3D	; 61
     d24:	2a 83       	std	Y+2, r18	; 0x02
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     d28:	3b e2       	ldi	r19, 0x2B	; 43
     d2a:	3a 83       	std	Y+2, r19	; 0x02
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
     d4a:	e4 e3       	ldi	r30, 0x34	; 52
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	8f ef       	ldi	r24, 0xFF	; 255
     d50:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     d52:	a1 e3       	ldi	r26, 0x31	; 49
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e1 e3       	ldi	r30, 0x31	; 49
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 67       	ori	r24, 0x70	; 112
     d5e:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     d60:	88 e3       	ldi	r24, 0x38	; 56
     d62:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     d66:	8c e0       	ldi	r24, 0x0C	; 12
     d68:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	e9 97       	sbiw	r28, 0x39	; 57
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     d8e:	a2 e3       	ldi	r26, 0x32	; 50
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e2 e3       	ldi	r30, 0x32	; 50
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 7e       	andi	r24, 0xEF	; 239
     d9a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     d9c:	a2 e3       	ldi	r26, 0x32	; 50
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e2 e3       	ldi	r30, 0x32	; 50
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8f 7d       	andi	r24, 0xDF	; 223
     da8:	8c 93       	st	X, r24
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e8       	ldi	r26, 0x80	; 128
     db0:	bf e3       	ldi	r27, 0x3F	; 63
     db2:	8d ab       	std	Y+53, r24	; 0x35
     db4:	9e ab       	std	Y+54, r25	; 0x36
     db6:	af ab       	std	Y+55, r26	; 0x37
     db8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dba:	6d a9       	ldd	r22, Y+53	; 0x35
     dbc:	7e a9       	ldd	r23, Y+54	; 0x36
     dbe:	8f a9       	ldd	r24, Y+55	; 0x37
     dc0:	98 ad       	ldd	r25, Y+56	; 0x38
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a ef       	ldi	r20, 0xFA	; 250
     dc8:	54 e4       	ldi	r21, 0x44	; 68
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	89 ab       	std	Y+49, r24	; 0x31
     dd4:	9a ab       	std	Y+50, r25	; 0x32
     dd6:	ab ab       	std	Y+51, r26	; 0x33
     dd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dda:	69 a9       	ldd	r22, Y+49	; 0x31
     ddc:	7a a9       	ldd	r23, Y+50	; 0x32
     dde:	8b a9       	ldd	r24, Y+51	; 0x33
     de0:	9c a9       	ldd	r25, Y+52	; 0x34
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e8       	ldi	r20, 0x80	; 128
     de8:	5f e3       	ldi	r21, 0x3F	; 63
     dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dee:	88 23       	and	r24, r24
     df0:	2c f4       	brge	.+10     	; 0xdfc <LCD_sendCommand+0x84>
		__ticks = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	98 ab       	std	Y+48, r25	; 0x30
     df8:	8f a7       	std	Y+47, r24	; 0x2f
     dfa:	3f c0       	rjmp	.+126    	; 0xe7a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     dfc:	69 a9       	ldd	r22, Y+49	; 0x31
     dfe:	7a a9       	ldd	r23, Y+50	; 0x32
     e00:	8b a9       	ldd	r24, Y+51	; 0x33
     e02:	9c a9       	ldd	r25, Y+52	; 0x34
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	3f ef       	ldi	r19, 0xFF	; 255
     e08:	4f e7       	ldi	r20, 0x7F	; 127
     e0a:	57 e4       	ldi	r21, 0x47	; 71
     e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e10:	18 16       	cp	r1, r24
     e12:	4c f5       	brge	.+82     	; 0xe66 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e14:	6d a9       	ldd	r22, Y+53	; 0x35
     e16:	7e a9       	ldd	r23, Y+54	; 0x36
     e18:	8f a9       	ldd	r24, Y+55	; 0x37
     e1a:	98 ad       	ldd	r25, Y+56	; 0x38
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	98 ab       	std	Y+48, r25	; 0x30
     e3a:	8f a7       	std	Y+47, r24	; 0x2f
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <LCD_sendCommand+0xe4>
     e3e:	88 ec       	ldi	r24, 0xC8	; 200
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9e a7       	std	Y+46, r25	; 0x2e
     e44:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e46:	8d a5       	ldd	r24, Y+45	; 0x2d
     e48:	9e a5       	ldd	r25, Y+46	; 0x2e
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <LCD_sendCommand+0xd2>
     e4e:	9e a7       	std	Y+46, r25	; 0x2e
     e50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	8f a5       	ldd	r24, Y+47	; 0x2f
     e54:	98 a9       	ldd	r25, Y+48	; 0x30
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	98 ab       	std	Y+48, r25	; 0x30
     e5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e5e:	98 a9       	ldd	r25, Y+48	; 0x30
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	69 f7       	brne	.-38     	; 0xe3e <LCD_sendCommand+0xc6>
     e64:	14 c0       	rjmp	.+40     	; 0xe8e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e66:	69 a9       	ldd	r22, Y+49	; 0x31
     e68:	7a a9       	ldd	r23, Y+50	; 0x32
     e6a:	8b a9       	ldd	r24, Y+51	; 0x33
     e6c:	9c a9       	ldd	r25, Y+52	; 0x34
     e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	98 ab       	std	Y+48, r25	; 0x30
     e78:	8f a7       	std	Y+47, r24	; 0x2f
     e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7c:	98 a9       	ldd	r25, Y+48	; 0x30
     e7e:	9c a7       	std	Y+44, r25	; 0x2c
     e80:	8b a7       	std	Y+43, r24	; 0x2b
     e82:	8b a5       	ldd	r24, Y+43	; 0x2b
     e84:	9c a5       	ldd	r25, Y+44	; 0x2c
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <LCD_sendCommand+0x10e>
     e8a:	9c a7       	std	Y+44, r25	; 0x2c
     e8c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     e8e:	a2 e3       	ldi	r26, 0x32	; 50
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e2 e3       	ldi	r30, 0x32	; 50
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 64       	ori	r24, 0x40	; 64
     e9a:	8c 93       	st	X, r24
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a0 e8       	ldi	r26, 0x80	; 128
     ea2:	bf e3       	ldi	r27, 0x3F	; 63
     ea4:	8f a3       	std	Y+39, r24	; 0x27
     ea6:	98 a7       	std	Y+40, r25	; 0x28
     ea8:	a9 a7       	std	Y+41, r26	; 0x29
     eaa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eac:	6f a1       	ldd	r22, Y+39	; 0x27
     eae:	78 a5       	ldd	r23, Y+40	; 0x28
     eb0:	89 a5       	ldd	r24, Y+41	; 0x29
     eb2:	9a a5       	ldd	r25, Y+42	; 0x2a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4a ef       	ldi	r20, 0xFA	; 250
     eba:	54 e4       	ldi	r21, 0x44	; 68
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	8b a3       	std	Y+35, r24	; 0x23
     ec6:	9c a3       	std	Y+36, r25	; 0x24
     ec8:	ad a3       	std	Y+37, r26	; 0x25
     eca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ecc:	6b a1       	ldd	r22, Y+35	; 0x23
     ece:	7c a1       	ldd	r23, Y+36	; 0x24
     ed0:	8d a1       	ldd	r24, Y+37	; 0x25
     ed2:	9e a1       	ldd	r25, Y+38	; 0x26
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	2c f4       	brge	.+10     	; 0xeee <LCD_sendCommand+0x176>
		__ticks = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9a a3       	std	Y+34, r25	; 0x22
     eea:	89 a3       	std	Y+33, r24	; 0x21
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     eee:	6b a1       	ldd	r22, Y+35	; 0x23
     ef0:	7c a1       	ldd	r23, Y+36	; 0x24
     ef2:	8d a1       	ldd	r24, Y+37	; 0x25
     ef4:	9e a1       	ldd	r25, Y+38	; 0x26
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	3f ef       	ldi	r19, 0xFF	; 255
     efa:	4f e7       	ldi	r20, 0x7F	; 127
     efc:	57 e4       	ldi	r21, 0x47	; 71
     efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f02:	18 16       	cp	r1, r24
     f04:	4c f5       	brge	.+82     	; 0xf58 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f06:	6f a1       	ldd	r22, Y+39	; 0x27
     f08:	78 a5       	ldd	r23, Y+40	; 0x28
     f0a:	89 a5       	ldd	r24, Y+41	; 0x29
     f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e2       	ldi	r20, 0x20	; 32
     f14:	51 e4       	ldi	r21, 0x41	; 65
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9a a3       	std	Y+34, r25	; 0x22
     f2c:	89 a3       	std	Y+33, r24	; 0x21
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <LCD_sendCommand+0x1d6>
     f30:	88 ec       	ldi	r24, 0xC8	; 200
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	98 a3       	std	Y+32, r25	; 0x20
     f36:	8f 8f       	std	Y+31, r24	; 0x1f
     f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f3a:	98 a1       	ldd	r25, Y+32	; 0x20
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <LCD_sendCommand+0x1c4>
     f40:	98 a3       	std	Y+32, r25	; 0x20
     f42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f44:	89 a1       	ldd	r24, Y+33	; 0x21
     f46:	9a a1       	ldd	r25, Y+34	; 0x22
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	9a a3       	std	Y+34, r25	; 0x22
     f4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	89 a1       	ldd	r24, Y+33	; 0x21
     f50:	9a a1       	ldd	r25, Y+34	; 0x22
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	69 f7       	brne	.-38     	; 0xf30 <LCD_sendCommand+0x1b8>
     f56:	14 c0       	rjmp	.+40     	; 0xf80 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f58:	6b a1       	ldd	r22, Y+35	; 0x23
     f5a:	7c a1       	ldd	r23, Y+36	; 0x24
     f5c:	8d a1       	ldd	r24, Y+37	; 0x25
     f5e:	9e a1       	ldd	r25, Y+38	; 0x26
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9a a3       	std	Y+34, r25	; 0x22
     f6a:	89 a3       	std	Y+33, r24	; 0x21
     f6c:	89 a1       	ldd	r24, Y+33	; 0x21
     f6e:	9a a1       	ldd	r25, Y+34	; 0x22
     f70:	9e 8f       	std	Y+30, r25	; 0x1e
     f72:	8d 8f       	std	Y+29, r24	; 0x1d
     f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f76:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <LCD_sendCommand+0x200>
     f7c:	9e 8f       	std	Y+30, r25	; 0x1e
     f7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
     f80:	e5 e3       	ldi	r30, 0x35	; 53
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	89 ad       	ldd	r24, Y+57	; 0x39
     f86:	80 83       	st	Z, r24
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	a0 e8       	ldi	r26, 0x80	; 128
     f8e:	bf e3       	ldi	r27, 0x3F	; 63
     f90:	89 8f       	std	Y+25, r24	; 0x19
     f92:	9a 8f       	std	Y+26, r25	; 0x1a
     f94:	ab 8f       	std	Y+27, r26	; 0x1b
     f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f98:	69 8d       	ldd	r22, Y+25	; 0x19
     f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	4a ef       	ldi	r20, 0xFA	; 250
     fa6:	54 e4       	ldi	r21, 0x44	; 68
     fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8d 8b       	std	Y+21, r24	; 0x15
     fb2:	9e 8b       	std	Y+22, r25	; 0x16
     fb4:	af 8b       	std	Y+23, r26	; 0x17
     fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fb8:	6d 89       	ldd	r22, Y+21	; 0x15
     fba:	7e 89       	ldd	r23, Y+22	; 0x16
     fbc:	8f 89       	ldd	r24, Y+23	; 0x17
     fbe:	98 8d       	ldd	r25, Y+24	; 0x18
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fcc:	88 23       	and	r24, r24
     fce:	2c f4       	brge	.+10     	; 0xfda <LCD_sendCommand+0x262>
		__ticks = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 8b       	std	Y+20, r25	; 0x14
     fd6:	8b 8b       	std	Y+19, r24	; 0x13
     fd8:	3f c0       	rjmp	.+126    	; 0x1058 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     fda:	6d 89       	ldd	r22, Y+21	; 0x15
     fdc:	7e 89       	ldd	r23, Y+22	; 0x16
     fde:	8f 89       	ldd	r24, Y+23	; 0x17
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	3f ef       	ldi	r19, 0xFF	; 255
     fe6:	4f e7       	ldi	r20, 0x7F	; 127
     fe8:	57 e4       	ldi	r21, 0x47	; 71
     fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	4c f5       	brge	.+82     	; 0x1044 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff2:	69 8d       	ldd	r22, Y+25	; 0x19
     ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e2       	ldi	r20, 0x20	; 32
    1000:	51 e4       	ldi	r21, 0x41	; 65
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	8b 8b       	std	Y+19, r24	; 0x13
    101a:	0f c0       	rjmp	.+30     	; 0x103a <LCD_sendCommand+0x2c2>
    101c:	88 ec       	ldi	r24, 0xC8	; 200
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9a 8b       	std	Y+18, r25	; 0x12
    1022:	89 8b       	std	Y+17, r24	; 0x11
    1024:	89 89       	ldd	r24, Y+17	; 0x11
    1026:	9a 89       	ldd	r25, Y+18	; 0x12
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <LCD_sendCommand+0x2b0>
    102c:	9a 8b       	std	Y+18, r25	; 0x12
    102e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1030:	8b 89       	ldd	r24, Y+19	; 0x13
    1032:	9c 89       	ldd	r25, Y+20	; 0x14
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103a:	8b 89       	ldd	r24, Y+19	; 0x13
    103c:	9c 89       	ldd	r25, Y+20	; 0x14
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	69 f7       	brne	.-38     	; 0x101c <LCD_sendCommand+0x2a4>
    1042:	14 c0       	rjmp	.+40     	; 0x106c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1044:	6d 89       	ldd	r22, Y+21	; 0x15
    1046:	7e 89       	ldd	r23, Y+22	; 0x16
    1048:	8f 89       	ldd	r24, Y+23	; 0x17
    104a:	98 8d       	ldd	r25, Y+24	; 0x18
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	98 8b       	std	Y+16, r25	; 0x10
    105e:	8f 87       	std	Y+15, r24	; 0x0f
    1060:	8f 85       	ldd	r24, Y+15	; 0x0f
    1062:	98 89       	ldd	r25, Y+16	; 0x10
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <LCD_sendCommand+0x2ec>
    1068:	98 8b       	std	Y+16, r25	; 0x10
    106a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    106c:	a2 e3       	ldi	r26, 0x32	; 50
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e2 e3       	ldi	r30, 0x32	; 50
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 7b       	andi	r24, 0xBF	; 191
    1078:	8c 93       	st	X, r24
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e8       	ldi	r26, 0x80	; 128
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	8b 87       	std	Y+11, r24	; 0x0b
    1084:	9c 87       	std	Y+12, r25	; 0x0c
    1086:	ad 87       	std	Y+13, r26	; 0x0d
    1088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	6b 85       	ldd	r22, Y+11	; 0x0b
    108c:	7c 85       	ldd	r23, Y+12	; 0x0c
    108e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1090:	9e 85       	ldd	r25, Y+14	; 0x0e
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a ef       	ldi	r20, 0xFA	; 250
    1098:	54 e4       	ldi	r21, 0x44	; 68
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	a9 87       	std	Y+9, r26	; 0x09
    10a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <LCD_sendCommand+0x354>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	0f c0       	rjmp	.+30     	; 0x112c <LCD_sendCommand+0x3b4>
    110e:	88 ec       	ldi	r24, 0xC8	; 200
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <LCD_sendCommand+0x3a2>
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <LCD_sendCommand+0x396>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <LCD_sendCommand+0x3de>
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    115e:	e9 96       	adiw	r28, 0x39	; 57
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	e9 97       	sbiw	r28, 0x39	; 57
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1186:	a2 e3       	ldi	r26, 0x32	; 50
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e2 e3       	ldi	r30, 0x32	; 50
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 61       	ori	r24, 0x10	; 16
    1192:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1194:	a2 e3       	ldi	r26, 0x32	; 50
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 7d       	andi	r24, 0xDF	; 223
    11a0:	8c 93       	st	X, r24
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a0 e8       	ldi	r26, 0x80	; 128
    11a8:	bf e3       	ldi	r27, 0x3F	; 63
    11aa:	8d ab       	std	Y+53, r24	; 0x35
    11ac:	9e ab       	std	Y+54, r25	; 0x36
    11ae:	af ab       	std	Y+55, r26	; 0x37
    11b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b2:	6d a9       	ldd	r22, Y+53	; 0x35
    11b4:	7e a9       	ldd	r23, Y+54	; 0x36
    11b6:	8f a9       	ldd	r24, Y+55	; 0x37
    11b8:	98 ad       	ldd	r25, Y+56	; 0x38
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	4a ef       	ldi	r20, 0xFA	; 250
    11c0:	54 e4       	ldi	r21, 0x44	; 68
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	89 ab       	std	Y+49, r24	; 0x31
    11cc:	9a ab       	std	Y+50, r25	; 0x32
    11ce:	ab ab       	std	Y+51, r26	; 0x33
    11d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11d2:	69 a9       	ldd	r22, Y+49	; 0x31
    11d4:	7a a9       	ldd	r23, Y+50	; 0x32
    11d6:	8b a9       	ldd	r24, Y+51	; 0x33
    11d8:	9c a9       	ldd	r25, Y+52	; 0x34
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e8       	ldi	r20, 0x80	; 128
    11e0:	5f e3       	ldi	r21, 0x3F	; 63
    11e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11e6:	88 23       	and	r24, r24
    11e8:	2c f4       	brge	.+10     	; 0x11f4 <LCD_displayCharacter+0x84>
		__ticks = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	98 ab       	std	Y+48, r25	; 0x30
    11f0:	8f a7       	std	Y+47, r24	; 0x2f
    11f2:	3f c0       	rjmp	.+126    	; 0x1272 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    11f4:	69 a9       	ldd	r22, Y+49	; 0x31
    11f6:	7a a9       	ldd	r23, Y+50	; 0x32
    11f8:	8b a9       	ldd	r24, Y+51	; 0x33
    11fa:	9c a9       	ldd	r25, Y+52	; 0x34
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	3f ef       	ldi	r19, 0xFF	; 255
    1200:	4f e7       	ldi	r20, 0x7F	; 127
    1202:	57 e4       	ldi	r21, 0x47	; 71
    1204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1208:	18 16       	cp	r1, r24
    120a:	4c f5       	brge	.+82     	; 0x125e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120c:	6d a9       	ldd	r22, Y+53	; 0x35
    120e:	7e a9       	ldd	r23, Y+54	; 0x36
    1210:	8f a9       	ldd	r24, Y+55	; 0x37
    1212:	98 ad       	ldd	r25, Y+56	; 0x38
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e2       	ldi	r20, 0x20	; 32
    121a:	51 e4       	ldi	r21, 0x41	; 65
    121c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	98 ab       	std	Y+48, r25	; 0x30
    1232:	8f a7       	std	Y+47, r24	; 0x2f
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <LCD_displayCharacter+0xe4>
    1236:	88 ec       	ldi	r24, 0xC8	; 200
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	9e a7       	std	Y+46, r25	; 0x2e
    123c:	8d a7       	std	Y+45, r24	; 0x2d
    123e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1240:	9e a5       	ldd	r25, Y+46	; 0x2e
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <LCD_displayCharacter+0xd2>
    1246:	9e a7       	std	Y+46, r25	; 0x2e
    1248:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124a:	8f a5       	ldd	r24, Y+47	; 0x2f
    124c:	98 a9       	ldd	r25, Y+48	; 0x30
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	98 ab       	std	Y+48, r25	; 0x30
    1252:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1254:	8f a5       	ldd	r24, Y+47	; 0x2f
    1256:	98 a9       	ldd	r25, Y+48	; 0x30
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	69 f7       	brne	.-38     	; 0x1236 <LCD_displayCharacter+0xc6>
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125e:	69 a9       	ldd	r22, Y+49	; 0x31
    1260:	7a a9       	ldd	r23, Y+50	; 0x32
    1262:	8b a9       	ldd	r24, Y+51	; 0x33
    1264:	9c a9       	ldd	r25, Y+52	; 0x34
    1266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	98 ab       	std	Y+48, r25	; 0x30
    1270:	8f a7       	std	Y+47, r24	; 0x2f
    1272:	8f a5       	ldd	r24, Y+47	; 0x2f
    1274:	98 a9       	ldd	r25, Y+48	; 0x30
    1276:	9c a7       	std	Y+44, r25	; 0x2c
    1278:	8b a7       	std	Y+43, r24	; 0x2b
    127a:	8b a5       	ldd	r24, Y+43	; 0x2b
    127c:	9c a5       	ldd	r25, Y+44	; 0x2c
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <LCD_displayCharacter+0x10e>
    1282:	9c a7       	std	Y+44, r25	; 0x2c
    1284:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1286:	a2 e3       	ldi	r26, 0x32	; 50
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e2 e3       	ldi	r30, 0x32	; 50
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	80 64       	ori	r24, 0x40	; 64
    1292:	8c 93       	st	X, r24
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a0 e8       	ldi	r26, 0x80	; 128
    129a:	bf e3       	ldi	r27, 0x3F	; 63
    129c:	8f a3       	std	Y+39, r24	; 0x27
    129e:	98 a7       	std	Y+40, r25	; 0x28
    12a0:	a9 a7       	std	Y+41, r26	; 0x29
    12a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a4:	6f a1       	ldd	r22, Y+39	; 0x27
    12a6:	78 a5       	ldd	r23, Y+40	; 0x28
    12a8:	89 a5       	ldd	r24, Y+41	; 0x29
    12aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	4a ef       	ldi	r20, 0xFA	; 250
    12b2:	54 e4       	ldi	r21, 0x44	; 68
    12b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8b a3       	std	Y+35, r24	; 0x23
    12be:	9c a3       	std	Y+36, r25	; 0x24
    12c0:	ad a3       	std	Y+37, r26	; 0x25
    12c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c4:	6b a1       	ldd	r22, Y+35	; 0x23
    12c6:	7c a1       	ldd	r23, Y+36	; 0x24
    12c8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ca:	9e a1       	ldd	r25, Y+38	; 0x26
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e8       	ldi	r20, 0x80	; 128
    12d2:	5f e3       	ldi	r21, 0x3F	; 63
    12d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <LCD_displayCharacter+0x176>
		__ticks = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9a a3       	std	Y+34, r25	; 0x22
    12e2:	89 a3       	std	Y+33, r24	; 0x21
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    12e6:	6b a1       	ldd	r22, Y+35	; 0x23
    12e8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ea:	8d a1       	ldd	r24, Y+37	; 0x25
    12ec:	9e a1       	ldd	r25, Y+38	; 0x26
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	4f e7       	ldi	r20, 0x7F	; 127
    12f4:	57 e4       	ldi	r21, 0x47	; 71
    12f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	4c f5       	brge	.+82     	; 0x1350 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1300:	78 a5       	ldd	r23, Y+40	; 0x28
    1302:	89 a5       	ldd	r24, Y+41	; 0x29
    1304:	9a a5       	ldd	r25, Y+42	; 0x2a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	51 e4       	ldi	r21, 0x41	; 65
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9a a3       	std	Y+34, r25	; 0x22
    1324:	89 a3       	std	Y+33, r24	; 0x21
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <LCD_displayCharacter+0x1d6>
    1328:	88 ec       	ldi	r24, 0xC8	; 200
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	98 a3       	std	Y+32, r25	; 0x20
    132e:	8f 8f       	std	Y+31, r24	; 0x1f
    1330:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1332:	98 a1       	ldd	r25, Y+32	; 0x20
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCD_displayCharacter+0x1c4>
    1338:	98 a3       	std	Y+32, r25	; 0x20
    133a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	89 a1       	ldd	r24, Y+33	; 0x21
    133e:	9a a1       	ldd	r25, Y+34	; 0x22
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	89 a1       	ldd	r24, Y+33	; 0x21
    1348:	9a a1       	ldd	r25, Y+34	; 0x22
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	69 f7       	brne	.-38     	; 0x1328 <LCD_displayCharacter+0x1b8>
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1350:	6b a1       	ldd	r22, Y+35	; 0x23
    1352:	7c a1       	ldd	r23, Y+36	; 0x24
    1354:	8d a1       	ldd	r24, Y+37	; 0x25
    1356:	9e a1       	ldd	r25, Y+38	; 0x26
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9a a3       	std	Y+34, r25	; 0x22
    1362:	89 a3       	std	Y+33, r24	; 0x21
    1364:	89 a1       	ldd	r24, Y+33	; 0x21
    1366:	9a a1       	ldd	r25, Y+34	; 0x22
    1368:	9e 8f       	std	Y+30, r25	; 0x1e
    136a:	8d 8f       	std	Y+29, r24	; 0x1d
    136c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <LCD_displayCharacter+0x200>
    1374:	9e 8f       	std	Y+30, r25	; 0x1e
    1376:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1378:	e5 e3       	ldi	r30, 0x35	; 53
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	89 ad       	ldd	r24, Y+57	; 0x39
    137e:	80 83       	st	Z, r24
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a0 e8       	ldi	r26, 0x80	; 128
    1386:	bf e3       	ldi	r27, 0x3F	; 63
    1388:	89 8f       	std	Y+25, r24	; 0x19
    138a:	9a 8f       	std	Y+26, r25	; 0x1a
    138c:	ab 8f       	std	Y+27, r26	; 0x1b
    138e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1390:	69 8d       	ldd	r22, Y+25	; 0x19
    1392:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1394:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1396:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	4a ef       	ldi	r20, 0xFA	; 250
    139e:	54 e4       	ldi	r21, 0x44	; 68
    13a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	8d 8b       	std	Y+21, r24	; 0x15
    13aa:	9e 8b       	std	Y+22, r25	; 0x16
    13ac:	af 8b       	std	Y+23, r26	; 0x17
    13ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13b0:	6d 89       	ldd	r22, Y+21	; 0x15
    13b2:	7e 89       	ldd	r23, Y+22	; 0x16
    13b4:	8f 89       	ldd	r24, Y+23	; 0x17
    13b6:	98 8d       	ldd	r25, Y+24	; 0x18
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e8       	ldi	r20, 0x80	; 128
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <LCD_displayCharacter+0x262>
		__ticks = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9c 8b       	std	Y+20, r25	; 0x14
    13ce:	8b 8b       	std	Y+19, r24	; 0x13
    13d0:	3f c0       	rjmp	.+126    	; 0x1450 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    13d2:	6d 89       	ldd	r22, Y+21	; 0x15
    13d4:	7e 89       	ldd	r23, Y+22	; 0x16
    13d6:	8f 89       	ldd	r24, Y+23	; 0x17
    13d8:	98 8d       	ldd	r25, Y+24	; 0x18
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	4c f5       	brge	.+82     	; 0x143c <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ea:	69 8d       	ldd	r22, Y+25	; 0x19
    13ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e2       	ldi	r20, 0x20	; 32
    13f8:	51 e4       	ldi	r21, 0x41	; 65
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
    1412:	0f c0       	rjmp	.+30     	; 0x1432 <LCD_displayCharacter+0x2c2>
    1414:	88 ec       	ldi	r24, 0xC8	; 200
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9a 8b       	std	Y+18, r25	; 0x12
    141a:	89 8b       	std	Y+17, r24	; 0x11
    141c:	89 89       	ldd	r24, Y+17	; 0x11
    141e:	9a 89       	ldd	r25, Y+18	; 0x12
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <LCD_displayCharacter+0x2b0>
    1424:	9a 8b       	std	Y+18, r25	; 0x12
    1426:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1428:	8b 89       	ldd	r24, Y+19	; 0x13
    142a:	9c 89       	ldd	r25, Y+20	; 0x14
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	69 f7       	brne	.-38     	; 0x1414 <LCD_displayCharacter+0x2a4>
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143c:	6d 89       	ldd	r22, Y+21	; 0x15
    143e:	7e 89       	ldd	r23, Y+22	; 0x16
    1440:	8f 89       	ldd	r24, Y+23	; 0x17
    1442:	98 8d       	ldd	r25, Y+24	; 0x18
    1444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9c 8b       	std	Y+20, r25	; 0x14
    144e:	8b 8b       	std	Y+19, r24	; 0x13
    1450:	8b 89       	ldd	r24, Y+19	; 0x13
    1452:	9c 89       	ldd	r25, Y+20	; 0x14
    1454:	98 8b       	std	Y+16, r25	; 0x10
    1456:	8f 87       	std	Y+15, r24	; 0x0f
    1458:	8f 85       	ldd	r24, Y+15	; 0x0f
    145a:	98 89       	ldd	r25, Y+16	; 0x10
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <LCD_displayCharacter+0x2ec>
    1460:	98 8b       	std	Y+16, r25	; 0x10
    1462:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1464:	a2 e3       	ldi	r26, 0x32	; 50
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e2 e3       	ldi	r30, 0x32	; 50
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8f 7b       	andi	r24, 0xBF	; 191
    1470:	8c 93       	st	X, r24
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a0 e8       	ldi	r26, 0x80	; 128
    1478:	bf e3       	ldi	r27, 0x3F	; 63
    147a:	8b 87       	std	Y+11, r24	; 0x0b
    147c:	9c 87       	std	Y+12, r25	; 0x0c
    147e:	ad 87       	std	Y+13, r26	; 0x0d
    1480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1482:	6b 85       	ldd	r22, Y+11	; 0x0b
    1484:	7c 85       	ldd	r23, Y+12	; 0x0c
    1486:	8d 85       	ldd	r24, Y+13	; 0x0d
    1488:	9e 85       	ldd	r25, Y+14	; 0x0e
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	4a ef       	ldi	r20, 0xFA	; 250
    1490:	54 e4       	ldi	r21, 0x44	; 68
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	8f 83       	std	Y+7, r24	; 0x07
    149c:	98 87       	std	Y+8, r25	; 0x08
    149e:	a9 87       	std	Y+9, r26	; 0x09
    14a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5f e3       	ldi	r21, 0x3F	; 63
    14b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b6:	88 23       	and	r24, r24
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <LCD_displayCharacter+0x354>
		__ticks = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	3f c0       	rjmp	.+126    	; 0x1542 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    14c4:	6f 81       	ldd	r22, Y+7	; 0x07
    14c6:	78 85       	ldd	r23, Y+8	; 0x08
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	3f ef       	ldi	r19, 0xFF	; 255
    14d0:	4f e7       	ldi	r20, 0x7F	; 127
    14d2:	57 e4       	ldi	r21, 0x47	; 71
    14d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d8:	18 16       	cp	r1, r24
    14da:	4c f5       	brge	.+82     	; 0x152e <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14de:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <LCD_displayCharacter+0x3b4>
    1506:	88 ec       	ldi	r24, 0xC8	; 200
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_displayCharacter+0x3a2>
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	69 f7       	brne	.-38     	; 0x1506 <LCD_displayCharacter+0x396>
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <LCD_displayCharacter+0x3de>
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1556:	e9 96       	adiw	r28, 0x39	; 57
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <LCD_displayString+0x6>
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	9b 83       	std	Y+3, r25	; 0x03
    1576:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	0e c0       	rjmp	.+28     	; 0x1598 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	fc 01       	movw	r30, r24
    1588:	e2 0f       	add	r30, r18
    158a:	f3 1f       	adc	r31, r19
    158c:	80 81       	ld	r24, Z
    158e:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
		i++;
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	9b 81       	ldd	r25, Y+3	; 0x03
    15a2:	fc 01       	movw	r30, r24
    15a4:	e2 0f       	add	r30, r18
    15a6:	f3 1f       	adc	r31, r19
    15a8:	80 81       	ld	r24, Z
    15aa:	88 23       	and	r24, r24
    15ac:	39 f7       	brne	.-50     	; 0x157c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <LCD_goToRowColumn+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <LCD_goToRowColumn+0x8>
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3d 83       	std	Y+5, r19	; 0x05
    15d4:	2c 83       	std	Y+4, r18	; 0x04
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	c1 f0       	breq	.+48     	; 0x1610 <LCD_goToRowColumn+0x56>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <LCD_goToRowColumn+0x3a>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <LCD_goToRowColumn+0x50>
    15f2:	19 c0       	rjmp	.+50     	; 0x1626 <LCD_goToRowColumn+0x6c>
    15f4:	2c 81       	ldd	r18, Y+4	; 0x04
    15f6:	3d 81       	ldd	r19, Y+5	; 0x05
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	69 f0       	breq	.+26     	; 0x1618 <LCD_goToRowColumn+0x5e>
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	61 f0       	breq	.+24     	; 0x1620 <LCD_goToRowColumn+0x66>
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	0b c0       	rjmp	.+22     	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 5c       	subi	r24, 0xC0	; 192
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	80 5f       	subi	r24, 0xF0	; 240
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	80 5b       	subi	r24, 0xB0	; 176
    1624:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 68       	ori	r24, 0x80	; 128
    162a:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <LCD_displayStringRowColumn+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <LCD_displayStringRowColumn+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	6a 83       	std	Y+2, r22	; 0x02
    164e:	5c 83       	std	Y+4, r21	; 0x04
    1650:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	6a 81       	ldd	r22, Y+2	; 0x02
    1656:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	62 97       	sbiw	r28, 0x12	; 18
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	9a 8b       	std	Y+18, r25	; 0x12
    1686:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1688:	89 89       	ldd	r24, Y+17	; 0x11
    168a:	9a 89       	ldd	r25, Y+18	; 0x12
    168c:	9e 01       	movw	r18, r28
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	b9 01       	movw	r22, r18
    1694:	4a e0       	ldi	r20, 0x0A	; 10
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <itoa>
   LCD_displayString(buff);
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    16a4:	62 96       	adiw	r28, 0x12	; 18
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <ISR_COUNT>:
uint8 volatile g_seconds_needed=0;
/*global variable determines in which step the code will be */
uint8 volatile g_step=0;

void ISR_COUNT(void)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
	g_tick++;		/*increases the global tick each time the timer interrupt*/
    16d2:	80 91 b4 01 	lds	r24, 0x01B4
    16d6:	8f 5f       	subi	r24, 0xFF	; 255
    16d8:	80 93 b4 01 	sts	0x01B4, r24
	if(g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND){		/*checks if the timer counted one second*/
    16dc:	80 91 b4 01 	lds	r24, 0x01B4
    16e0:	80 32       	cpi	r24, 0x20	; 32
    16e2:	a1 f4       	brne	.+40     	; 0x170c <ISR_COUNT+0x42>
		g_tick = 0; 									/*clear the tick counter again to count a new second*/
    16e4:	10 92 b4 01 	sts	0x01B4, r1
		g_sec_counted++;								/*increases seconds counter*/
    16e8:	80 91 b5 01 	lds	r24, 0x01B5
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	80 93 b5 01 	sts	0x01B5, r24
		/*checks if seconds counter reached the required secounds
		 * clears the seconds counter
		 * stop timer0
		 * go to step 2 (main)
		 */
		if (g_sec_counted==g_seconds_needed)
    16f2:	90 91 b5 01 	lds	r25, 0x01B5
    16f6:	80 91 b6 01 	lds	r24, 0x01B6
    16fa:	98 17       	cp	r25, r24
    16fc:	39 f4       	brne	.+14     	; 0x170c <ISR_COUNT+0x42>
		{
			g_sec_counted=0;
    16fe:	10 92 b5 01 	sts	0x01B5, r1
			timer0_DeInit();
    1702:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <timer0_DeInit>
			g_step=2;
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	80 93 b7 01 	sts	0x01B7, r24
		}
	}


}
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <main>:

int main(){
    1712:	0f 93       	push	r16
    1714:	1f 93       	push	r17
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	c1 53       	subi	r28, 0x31	; 49
    1720:	d1 40       	sbci	r29, 0x01	; 1
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61

	/*initialize LCD and UART */
	LCD_init();
    172c:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_init>
	UART_init();
    1730:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <UART_init>
	uint8 key[5];
	uint8 check=0;
    1734:	fe 01       	movw	r30, r28
    1736:	ee 5e       	subi	r30, 0xEE	; 238
    1738:	fe 4f       	sbci	r31, 0xFE	; 254
    173a:	10 82       	st	Z, r1
	uint8 send_key=0;
    173c:	fe 01       	movw	r30, r28
    173e:	ef 5e       	subi	r30, 0xEF	; 239
    1740:	fe 4f       	sbci	r31, 0xFE	; 254
    1742:	10 82       	st	Z, r1

	UART_sendByte(M1_READY);			/*sends to MCU2 that MCU1 is ready to receive data*/
    1744:	80 e2       	ldi	r24, 0x20	; 32
    1746:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <UART_sendByte>
	g_step=UART_recieveByte();			/*receives the step which the code run*/
    174a:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    174e:	80 93 b7 01 	sts	0x01B7, r24

	while(1)
	{
		switch( g_step ){
    1752:	80 91 b7 01 	lds	r24, 0x01B7
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	cf 5d       	subi	r28, 0xDF	; 223
    175c:	de 4f       	sbci	r29, 0xFE	; 254
    175e:	39 83       	std	Y+1, r19	; 0x01
    1760:	28 83       	st	Y, r18
    1762:	c1 52       	subi	r28, 0x21	; 33
    1764:	d1 40       	sbci	r29, 0x01	; 1
    1766:	cf 5d       	subi	r28, 0xDF	; 223
    1768:	de 4f       	sbci	r29, 0xFE	; 254
    176a:	88 81       	ld	r24, Y
    176c:	99 81       	ldd	r25, Y+1	; 0x01
    176e:	c1 52       	subi	r28, 0x21	; 33
    1770:	d1 40       	sbci	r29, 0x01	; 1
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	91 05       	cpc	r25, r1
    1776:	11 f4       	brne	.+4      	; 0x177c <main+0x6a>
    1778:	0c 94 0d 14 	jmp	0x281a	; 0x281a <main+0x1108>
    177c:	cf 5d       	subi	r28, 0xDF	; 223
    177e:	de 4f       	sbci	r29, 0xFE	; 254
    1780:	e8 81       	ld	r30, Y
    1782:	f9 81       	ldd	r31, Y+1	; 0x01
    1784:	c1 52       	subi	r28, 0x21	; 33
    1786:	d1 40       	sbci	r29, 0x01	; 1
    1788:	e4 30       	cpi	r30, 0x04	; 4
    178a:	f1 05       	cpc	r31, r1
    178c:	ec f4       	brge	.+58     	; 0x17c8 <main+0xb6>
    178e:	cf 5d       	subi	r28, 0xDF	; 223
    1790:	de 4f       	sbci	r29, 0xFE	; 254
    1792:	28 81       	ld	r18, Y
    1794:	39 81       	ldd	r19, Y+1	; 0x01
    1796:	c1 52       	subi	r28, 0x21	; 33
    1798:	d1 40       	sbci	r29, 0x01	; 1
    179a:	21 30       	cpi	r18, 0x01	; 1
    179c:	31 05       	cpc	r19, r1
    179e:	09 f4       	brne	.+2      	; 0x17a2 <main+0x90>
    17a0:	6b c6       	rjmp	.+3286   	; 0x2478 <main+0xd66>
    17a2:	cf 5d       	subi	r28, 0xDF	; 223
    17a4:	de 4f       	sbci	r29, 0xFE	; 254
    17a6:	88 81       	ld	r24, Y
    17a8:	99 81       	ldd	r25, Y+1	; 0x01
    17aa:	c1 52       	subi	r28, 0x21	; 33
    17ac:	d1 40       	sbci	r29, 0x01	; 1
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	91 05       	cpc	r25, r1
    17b2:	0c f0       	brlt	.+2      	; 0x17b6 <main+0xa4>
    17b4:	24 c7       	rjmp	.+3656   	; 0x25fe <main+0xeec>
    17b6:	cf 5d       	subi	r28, 0xDF	; 223
    17b8:	de 4f       	sbci	r29, 0xFE	; 254
    17ba:	e8 81       	ld	r30, Y
    17bc:	f9 81       	ldd	r31, Y+1	; 0x01
    17be:	c1 52       	subi	r28, 0x21	; 33
    17c0:	d1 40       	sbci	r29, 0x01	; 1
    17c2:	30 97       	sbiw	r30, 0x00	; 0
    17c4:	19 f1       	breq	.+70     	; 0x180c <main+0xfa>
    17c6:	c5 cf       	rjmp	.-118    	; 0x1752 <main+0x40>
    17c8:	cf 5d       	subi	r28, 0xDF	; 223
    17ca:	de 4f       	sbci	r29, 0xFE	; 254
    17cc:	28 81       	ld	r18, Y
    17ce:	39 81       	ldd	r19, Y+1	; 0x01
    17d0:	c1 52       	subi	r28, 0x21	; 33
    17d2:	d1 40       	sbci	r29, 0x01	; 1
    17d4:	25 30       	cpi	r18, 0x05	; 5
    17d6:	31 05       	cpc	r19, r1
    17d8:	11 f4       	brne	.+4      	; 0x17de <main+0xcc>
    17da:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <main+0x1c5e>
    17de:	cf 5d       	subi	r28, 0xDF	; 223
    17e0:	de 4f       	sbci	r29, 0xFE	; 254
    17e2:	88 81       	ld	r24, Y
    17e4:	99 81       	ldd	r25, Y+1	; 0x01
    17e6:	c1 52       	subi	r28, 0x21	; 33
    17e8:	d1 40       	sbci	r29, 0x01	; 1
    17ea:	85 30       	cpi	r24, 0x05	; 5
    17ec:	91 05       	cpc	r25, r1
    17ee:	14 f4       	brge	.+4      	; 0x17f4 <main+0xe2>
    17f0:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <main+0x1790>
    17f4:	cf 5d       	subi	r28, 0xDF	; 223
    17f6:	de 4f       	sbci	r29, 0xFE	; 254
    17f8:	e8 81       	ld	r30, Y
    17fa:	f9 81       	ldd	r31, Y+1	; 0x01
    17fc:	c1 52       	subi	r28, 0x21	; 33
    17fe:	d1 40       	sbci	r29, 0x01	; 1
    1800:	e6 30       	cpi	r30, 0x06	; 6
    1802:	f1 05       	cpc	r31, r1
    1804:	11 f4       	brne	.+4      	; 0x180a <main+0xf8>
    1806:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <main+0x1d46>
    180a:	a3 cf       	rjmp	.-186    	; 0x1752 <main+0x40>
		/******************** step 1 ***************************
		 *           Please enter new password                 *
		 *                   *****                             *
		 *******************************************************/
		case 0:
			LCD_displayString("Enter New Pass");	/*display string on LCD for 0.5 second*/
    180c:	80 e6       	ldi	r24, 0x60	; 96
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    1814:	fe 01       	movw	r30, r28
    1816:	e7 50       	subi	r30, 0x07	; 7
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	aa ef       	ldi	r26, 0xFA	; 250
    1820:	b3 e4       	ldi	r27, 0x43	; 67
    1822:	80 83       	st	Z, r24
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	a2 83       	std	Z+2, r26	; 0x02
    1828:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182a:	8e 01       	movw	r16, r28
    182c:	0b 50       	subi	r16, 0x0B	; 11
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	fe 01       	movw	r30, r28
    1832:	e7 50       	subi	r30, 0x07	; 7
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	60 81       	ld	r22, Z
    1838:	71 81       	ldd	r23, Z+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	4a ef       	ldi	r20, 0xFA	; 250
    1844:	54 e4       	ldi	r21, 0x44	; 68
    1846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	80 83       	st	Z, r24
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	a2 83       	std	Z+2, r26	; 0x02
    1856:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1858:	fe 01       	movw	r30, r28
    185a:	eb 50       	subi	r30, 0x0B	; 11
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f e3       	ldi	r21, 0x3F	; 63
    186e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1872:	88 23       	and	r24, r24
    1874:	44 f4       	brge	.+16     	; 0x1886 <main+0x174>
		__ticks = 1;
    1876:	fe 01       	movw	r30, r28
    1878:	ed 50       	subi	r30, 0x0D	; 13
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	80 83       	st	Z, r24
    1884:	64 c0       	rjmp	.+200    	; 0x194e <main+0x23c>
	else if (__tmp > 65535)
    1886:	fe 01       	movw	r30, r28
    1888:	eb 50       	subi	r30, 0x0B	; 11
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	4f e7       	ldi	r20, 0x7F	; 127
    189a:	57 e4       	ldi	r21, 0x47	; 71
    189c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a0:	18 16       	cp	r1, r24
    18a2:	0c f0       	brlt	.+2      	; 0x18a6 <main+0x194>
    18a4:	43 c0       	rjmp	.+134    	; 0x192c <main+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a6:	fe 01       	movw	r30, r28
    18a8:	e7 50       	subi	r30, 0x07	; 7
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	60 81       	ld	r22, Z
    18ae:	71 81       	ldd	r23, Z+1	; 0x01
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e2       	ldi	r20, 0x20	; 32
    18ba:	51 e4       	ldi	r21, 0x41	; 65
    18bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	8e 01       	movw	r16, r28
    18c6:	0d 50       	subi	r16, 0x0D	; 13
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	f8 01       	movw	r30, r16
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24
    18dc:	1f c0       	rjmp	.+62     	; 0x191c <main+0x20a>
    18de:	fe 01       	movw	r30, r28
    18e0:	ef 50       	subi	r30, 0x0F	; 15
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	80 83       	st	Z, r24
    18ec:	fe 01       	movw	r30, r28
    18ee:	ef 50       	subi	r30, 0x0F	; 15
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <main+0x1e4>
    18fa:	fe 01       	movw	r30, r28
    18fc:	ef 50       	subi	r30, 0x0F	; 15
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1904:	de 01       	movw	r26, r28
    1906:	ad 50       	subi	r26, 0x0D	; 13
    1908:	bf 4f       	sbci	r27, 0xFF	; 255
    190a:	fe 01       	movw	r30, r28
    190c:	ed 50       	subi	r30, 0x0D	; 13
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	11 96       	adiw	r26, 0x01	; 1
    1918:	9c 93       	st	X, r25
    191a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191c:	fe 01       	movw	r30, r28
    191e:	ed 50       	subi	r30, 0x0D	; 13
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	d1 f6       	brne	.-76     	; 0x18de <main+0x1cc>
    192a:	27 c0       	rjmp	.+78     	; 0x197a <main+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	8e 01       	movw	r16, r28
    192e:	0d 50       	subi	r16, 0x0D	; 13
    1930:	1f 4f       	sbci	r17, 0xFF	; 255
    1932:	fe 01       	movw	r30, r28
    1934:	eb 50       	subi	r30, 0x0B	; 11
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	60 81       	ld	r22, Z
    193a:	71 81       	ldd	r23, Z+1	; 0x01
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	f8 01       	movw	r30, r16
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	80 83       	st	Z, r24
    194e:	de 01       	movw	r26, r28
    1950:	a1 51       	subi	r26, 0x11	; 17
    1952:	bf 4f       	sbci	r27, 0xFF	; 255
    1954:	fe 01       	movw	r30, r28
    1956:	ed 50       	subi	r30, 0x0D	; 13
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	8d 93       	st	X+, r24
    1960:	9c 93       	st	X, r25
    1962:	fe 01       	movw	r30, r28
    1964:	e1 51       	subi	r30, 0x11	; 17
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	80 81       	ld	r24, Z
    196a:	91 81       	ldd	r25, Z+1	; 0x01
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <main+0x25a>
    1970:	fe 01       	movw	r30, r28
    1972:	e1 51       	subi	r30, 0x11	; 17
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_goToRowColumn(1,0);
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
			for(int i=0 ;i<5;i++ ){
    1982:	fe 01       	movw	r30, r28
    1984:	e1 5f       	subi	r30, 0xF1	; 241
    1986:	fe 4f       	sbci	r31, 0xFE	; 254
    1988:	11 82       	std	Z+1, r1	; 0x01
    198a:	10 82       	st	Z, r1
    198c:	f0 c0       	rjmp	.+480    	; 0x1b6e <main+0x45c>
				/* if any switch pressed for more than 500 ms it counts more than one press */
				key[i] = KeyPad_getPressedKey(); /* get the pressed key number */
    198e:	fe 01       	movw	r30, r28
    1990:	e1 5f       	subi	r30, 0xF1	; 241
    1992:	fe 4f       	sbci	r31, 0xFE	; 254
    1994:	00 81       	ld	r16, Z
    1996:	11 81       	ldd	r17, Z+1	; 0x01
    1998:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    199c:	28 2f       	mov	r18, r24
    199e:	ce 01       	movw	r24, r28
    19a0:	8d 5e       	subi	r24, 0xED	; 237
    19a2:	9e 4f       	sbci	r25, 0xFE	; 254
    19a4:	fc 01       	movw	r30, r24
    19a6:	e0 0f       	add	r30, r16
    19a8:	f1 1f       	adc	r31, r17
    19aa:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    19ac:	8a e2       	ldi	r24, 0x2A	; 42
    19ae:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
				/*extra addition
				 * button ON/C in keyboard clears the password entered without count any wrong trials
				 */
				if(key[i]==13){
    19b2:	fe 01       	movw	r30, r28
    19b4:	e1 5f       	subi	r30, 0xF1	; 241
    19b6:	fe 4f       	sbci	r31, 0xFE	; 254
    19b8:	20 81       	ld	r18, Z
    19ba:	31 81       	ldd	r19, Z+1	; 0x01
    19bc:	ce 01       	movw	r24, r28
    19be:	8d 5e       	subi	r24, 0xED	; 237
    19c0:	9e 4f       	sbci	r25, 0xFE	; 254
    19c2:	fc 01       	movw	r30, r24
    19c4:	e2 0f       	add	r30, r18
    19c6:	f3 1f       	adc	r31, r19
    19c8:	80 81       	ld	r24, Z
    19ca:	8d 30       	cpi	r24, 0x0D	; 13
    19cc:	89 f4       	brne	.+34     	; 0x19f0 <main+0x2de>
					/*resets the LCD screen*/
					LCD_clearScreen();
    19ce:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
					LCD_displayString("Enter New Pass");
    19d2:	80 e6       	ldi	r24, 0x60	; 96
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
					LCD_goToRowColumn(1,0);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
					i=-1;								/*the counter is set to -1 so the next loop will be resets to zero as i increases in each loop by one*/
    19e2:	fe 01       	movw	r30, r28
    19e4:	e1 5f       	subi	r30, 0xF1	; 241
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
    19e8:	8f ef       	ldi	r24, 0xFF	; 255
    19ea:	9f ef       	ldi	r25, 0xFF	; 255
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
    19f0:	fe 01       	movw	r30, r28
    19f2:	e5 51       	subi	r30, 0x15	; 21
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	aa ef       	ldi	r26, 0xFA	; 250
    19fc:	b3 e4       	ldi	r27, 0x43	; 67
    19fe:	80 83       	st	Z, r24
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	a2 83       	std	Z+2, r26	; 0x02
    1a04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a06:	8e 01       	movw	r16, r28
    1a08:	09 51       	subi	r16, 0x19	; 25
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e5 51       	subi	r30, 0x15	; 21
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	60 81       	ld	r22, Z
    1a14:	71 81       	ldd	r23, Z+1	; 0x01
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4a ef       	ldi	r20, 0xFA	; 250
    1a20:	54 e4       	ldi	r21, 0x44	; 68
    1a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	80 83       	st	Z, r24
    1a2e:	91 83       	std	Z+1, r25	; 0x01
    1a30:	a2 83       	std	Z+2, r26	; 0x02
    1a32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a34:	fe 01       	movw	r30, r28
    1a36:	e9 51       	subi	r30, 0x19	; 25
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e8       	ldi	r20, 0x80	; 128
    1a48:	5f e3       	ldi	r21, 0x3F	; 63
    1a4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	44 f4       	brge	.+16     	; 0x1a62 <main+0x350>
		__ticks = 1;
    1a52:	fe 01       	movw	r30, r28
    1a54:	eb 51       	subi	r30, 0x1B	; 27
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    1a60:	64 c0       	rjmp	.+200    	; 0x1b2a <main+0x418>
	else if (__tmp > 65535)
    1a62:	fe 01       	movw	r30, r28
    1a64:	e9 51       	subi	r30, 0x19	; 25
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	0c f0       	brlt	.+2      	; 0x1a82 <main+0x370>
    1a80:	43 c0       	rjmp	.+134    	; 0x1b08 <main+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a82:	fe 01       	movw	r30, r28
    1a84:	e5 51       	subi	r30, 0x15	; 21
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	60 81       	ld	r22, Z
    1a8a:	71 81       	ldd	r23, Z+1	; 0x01
    1a8c:	82 81       	ldd	r24, Z+2	; 0x02
    1a8e:	93 81       	ldd	r25, Z+3	; 0x03
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8e 01       	movw	r16, r28
    1aa2:	0b 51       	subi	r16, 0x1B	; 27
    1aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	1f c0       	rjmp	.+62     	; 0x1af8 <main+0x3e6>
    1aba:	fe 01       	movw	r30, r28
    1abc:	ed 51       	subi	r30, 0x1D	; 29
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	88 ec       	ldi	r24, 0xC8	; 200
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	80 83       	st	Z, r24
    1ac8:	fe 01       	movw	r30, r28
    1aca:	ed 51       	subi	r30, 0x1D	; 29
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	91 81       	ldd	r25, Z+1	; 0x01
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <main+0x3c0>
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	ed 51       	subi	r30, 0x1D	; 29
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae0:	de 01       	movw	r26, r28
    1ae2:	ab 51       	subi	r26, 0x1B	; 27
    1ae4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	eb 51       	subi	r30, 0x1B	; 27
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	11 96       	adiw	r26, 0x01	; 1
    1af4:	9c 93       	st	X, r25
    1af6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	fe 01       	movw	r30, r28
    1afa:	eb 51       	subi	r30, 0x1B	; 27
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	80 81       	ld	r24, Z
    1b00:	91 81       	ldd	r25, Z+1	; 0x01
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	d1 f6       	brne	.-76     	; 0x1aba <main+0x3a8>
    1b06:	27 c0       	rjmp	.+78     	; 0x1b56 <main+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b08:	8e 01       	movw	r16, r28
    1b0a:	0b 51       	subi	r16, 0x1B	; 27
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e9 51       	subi	r30, 0x19	; 25
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	f8 01       	movw	r30, r16
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	80 83       	st	Z, r24
    1b2a:	de 01       	movw	r26, r28
    1b2c:	af 51       	subi	r26, 0x1F	; 31
    1b2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b30:	fe 01       	movw	r30, r28
    1b32:	eb 51       	subi	r30, 0x1B	; 27
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	80 81       	ld	r24, Z
    1b38:	91 81       	ldd	r25, Z+1	; 0x01
    1b3a:	8d 93       	st	X+, r24
    1b3c:	9c 93       	st	X, r25
    1b3e:	fe 01       	movw	r30, r28
    1b40:	ef 51       	subi	r30, 0x1F	; 31
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 81       	ld	r24, Z
    1b46:	91 81       	ldd	r25, Z+1	; 0x01
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <main+0x436>
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	ef 51       	subi	r30, 0x1F	; 31
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	80 83       	st	Z, r24
		 *******************************************************/
		case 0:
			LCD_displayString("Enter New Pass");	/*display string on LCD for 0.5 second*/
			_delay_ms(500);
			LCD_goToRowColumn(1,0);
			for(int i=0 ;i<5;i++ ){
    1b56:	de 01       	movw	r26, r28
    1b58:	a1 5f       	subi	r26, 0xF1	; 241
    1b5a:	be 4f       	sbci	r27, 0xFE	; 254
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e1 5f       	subi	r30, 0xF1	; 241
    1b60:	fe 4f       	sbci	r31, 0xFE	; 254
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	11 96       	adiw	r26, 0x01	; 1
    1b6a:	9c 93       	st	X, r25
    1b6c:	8e 93       	st	-X, r24
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e1 5f       	subi	r30, 0xF1	; 241
    1b72:	fe 4f       	sbci	r31, 0xFE	; 254
    1b74:	80 81       	ld	r24, Z
    1b76:	91 81       	ldd	r25, Z+1	; 0x01
    1b78:	85 30       	cpi	r24, 0x05	; 5
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	0c f4       	brge	.+2      	; 0x1b80 <main+0x46e>
    1b7e:	07 cf       	rjmp	.-498    	; 0x198e <main+0x27c>
					LCD_goToRowColumn(1,0);
					i=-1;								/*the counter is set to -1 so the next loop will be resets to zero as i increases in each loop by one*/
				}
				_delay_ms(500); /* Press time */
			}
			LCD_clearScreen();
    1b80:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>

			/*repeats entering the key until user presses = sign */
			do
			{
				LCD_displayString("Press = to send!");//Statements
    1b84:	8f e6       	ldi	r24, 0x6F	; 111
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
				send_key=KeyPad_getPressedKey();
    1b8c:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1b90:	fe 01       	movw	r30, r28
    1b92:	ef 5e       	subi	r30, 0xEF	; 239
    1b94:	fe 4f       	sbci	r31, 0xFE	; 254
    1b96:	80 83       	st	Z, r24
			}
			while(send_key!= '=');
    1b98:	fe 01       	movw	r30, r28
    1b9a:	ef 5e       	subi	r30, 0xEF	; 239
    1b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9e:	80 81       	ld	r24, Z
    1ba0:	8d 33       	cpi	r24, 0x3D	; 61
    1ba2:	81 f7       	brne	.-32     	; 0x1b84 <main+0x472>

			/*in case the user pressed send button the MCU1 sends the password to MCU2*/
			for (int i=0;i<5;i++)
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e3 5f       	subi	r30, 0xF3	; 243
    1ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    1baa:	11 82       	std	Z+1, r1	; 0x01
    1bac:	10 82       	st	Z, r1
    1bae:	1a c0       	rjmp	.+52     	; 0x1be4 <main+0x4d2>
			{
				UART_sendByte(key[i]);
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e3 5f       	subi	r30, 0xF3	; 243
    1bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb6:	20 81       	ld	r18, Z
    1bb8:	31 81       	ldd	r19, Z+1	; 0x01
    1bba:	ce 01       	movw	r24, r28
    1bbc:	8d 5e       	subi	r24, 0xED	; 237
    1bbe:	9e 4f       	sbci	r25, 0xFE	; 254
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	e2 0f       	add	r30, r18
    1bc4:	f3 1f       	adc	r31, r19
    1bc6:	80 81       	ld	r24, Z
    1bc8:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <UART_sendByte>
				send_key=KeyPad_getPressedKey();
			}
			while(send_key!= '=');

			/*in case the user pressed send button the MCU1 sends the password to MCU2*/
			for (int i=0;i<5;i++)
    1bcc:	de 01       	movw	r26, r28
    1bce:	a3 5f       	subi	r26, 0xF3	; 243
    1bd0:	be 4f       	sbci	r27, 0xFE	; 254
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e3 5f       	subi	r30, 0xF3	; 243
    1bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	11 96       	adiw	r26, 0x01	; 1
    1be0:	9c 93       	st	X, r25
    1be2:	8e 93       	st	-X, r24
    1be4:	fe 01       	movw	r30, r28
    1be6:	e3 5f       	subi	r30, 0xF3	; 243
    1be8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	85 30       	cpi	r24, 0x05	; 5
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	f4 f2       	brlt	.-68     	; 0x1bb0 <main+0x49e>
			{
				UART_sendByte(key[i]);
			}
			LCD_clearScreen();
    1bf4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
			LCD_displayString("Password1 sent");
    1bf8:	80 e8       	ldi	r24, 0x80	; 128
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    1c00:	fe 01       	movw	r30, r28
    1c02:	e3 52       	subi	r30, 0x23	; 35
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	aa ef       	ldi	r26, 0xFA	; 250
    1c0c:	b3 e4       	ldi	r27, 0x43	; 67
    1c0e:	80 83       	st	Z, r24
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	a2 83       	std	Z+2, r26	; 0x02
    1c14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c16:	8e 01       	movw	r16, r28
    1c18:	07 52       	subi	r16, 0x27	; 39
    1c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e3 52       	subi	r30, 0x23	; 35
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a ef       	ldi	r20, 0xFA	; 250
    1c30:	54 e4       	ldi	r21, 0x44	; 68
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	80 83       	st	Z, r24
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	a2 83       	std	Z+2, r26	; 0x02
    1c42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c44:	fe 01       	movw	r30, r28
    1c46:	e7 52       	subi	r30, 0x27	; 39
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	44 f4       	brge	.+16     	; 0x1c72 <main+0x560>
		__ticks = 1;
    1c62:	fe 01       	movw	r30, r28
    1c64:	e9 52       	subi	r30, 0x29	; 41
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
    1c70:	64 c0       	rjmp	.+200    	; 0x1d3a <main+0x628>
	else if (__tmp > 65535)
    1c72:	fe 01       	movw	r30, r28
    1c74:	e7 52       	subi	r30, 0x27	; 39
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	0c f0       	brlt	.+2      	; 0x1c92 <main+0x580>
    1c90:	43 c0       	rjmp	.+134    	; 0x1d18 <main+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	fe 01       	movw	r30, r28
    1c94:	e3 52       	subi	r30, 0x23	; 35
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e2       	ldi	r20, 0x20	; 32
    1ca6:	51 e4       	ldi	r21, 0x41	; 65
    1ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	8e 01       	movw	r16, r28
    1cb2:	09 52       	subi	r16, 0x29	; 41
    1cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	cd 01       	movw	r24, r26
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	80 83       	st	Z, r24
    1cc8:	1f c0       	rjmp	.+62     	; 0x1d08 <main+0x5f6>
    1cca:	fe 01       	movw	r30, r28
    1ccc:	eb 52       	subi	r30, 0x2B	; 43
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	88 ec       	ldi	r24, 0xC8	; 200
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	80 83       	st	Z, r24
    1cd8:	fe 01       	movw	r30, r28
    1cda:	eb 52       	subi	r30, 0x2B	; 43
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 81       	ld	r24, Z
    1ce0:	91 81       	ldd	r25, Z+1	; 0x01
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <main+0x5d0>
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	eb 52       	subi	r30, 0x2B	; 43
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf0:	de 01       	movw	r26, r28
    1cf2:	a9 52       	subi	r26, 0x29	; 41
    1cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e9 52       	subi	r30, 0x29	; 41
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	11 96       	adiw	r26, 0x01	; 1
    1d04:	9c 93       	st	X, r25
    1d06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e9 52       	subi	r30, 0x29	; 41
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	d1 f6       	brne	.-76     	; 0x1cca <main+0x5b8>
    1d16:	27 c0       	rjmp	.+78     	; 0x1d66 <main+0x654>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d18:	8e 01       	movw	r16, r28
    1d1a:	09 52       	subi	r16, 0x29	; 41
    1d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e7 52       	subi	r30, 0x27	; 39
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	60 81       	ld	r22, Z
    1d26:	71 81       	ldd	r23, Z+1	; 0x01
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	f8 01       	movw	r30, r16
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	de 01       	movw	r26, r28
    1d3c:	ad 52       	subi	r26, 0x2D	; 45
    1d3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d40:	fe 01       	movw	r30, r28
    1d42:	e9 52       	subi	r30, 0x29	; 41
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	91 81       	ldd	r25, Z+1	; 0x01
    1d4a:	8d 93       	st	X+, r24
    1d4c:	9c 93       	st	X, r25
    1d4e:	fe 01       	movw	r30, r28
    1d50:	ed 52       	subi	r30, 0x2D	; 45
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <main+0x646>
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ed 52       	subi	r30, 0x2D	; 45
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_clearScreen();
    1d66:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
			/* reentering the new password to make sure that the entered password is the wanted one*/
			             /******************** step 1 ***************************
						 *          Please confirm new password                 *
						 *                     *****                            *
						 *******************************************************/
			LCD_displayString("Reenter the New pass");
    1d6a:	8f e8       	ldi	r24, 0x8F	; 143
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
			for(int i=0 ;i<5;i++ )
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e5 5f       	subi	r30, 0xF5	; 245
    1d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d80:	11 82       	std	Z+1, r1	; 0x01
    1d82:	10 82       	st	Z, r1
    1d84:	f0 c0       	rjmp	.+480    	; 0x1f66 <main+0x854>
			{
				/* if any switch pressed for more than 500 ms it counts more than one press */
				key[i] = KeyPad_getPressedKey(); /* get the pressed key number */
    1d86:	fe 01       	movw	r30, r28
    1d88:	e5 5f       	subi	r30, 0xF5	; 245
    1d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d8c:	00 81       	ld	r16, Z
    1d8e:	11 81       	ldd	r17, Z+1	; 0x01
    1d90:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1d94:	28 2f       	mov	r18, r24
    1d96:	ce 01       	movw	r24, r28
    1d98:	8d 5e       	subi	r24, 0xED	; 237
    1d9a:	9e 4f       	sbci	r25, 0xFE	; 254
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	e0 0f       	add	r30, r16
    1da0:	f1 1f       	adc	r31, r17
    1da2:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    1da4:	8a e2       	ldi	r24, 0x2A	; 42
    1da6:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
				/*extra addition
				 * button ON/C in keyboard clears the password entered without count any wrong trials
				 */
				if(key[i]==13)
    1daa:	fe 01       	movw	r30, r28
    1dac:	e5 5f       	subi	r30, 0xF5	; 245
    1dae:	fe 4f       	sbci	r31, 0xFE	; 254
    1db0:	20 81       	ld	r18, Z
    1db2:	31 81       	ldd	r19, Z+1	; 0x01
    1db4:	ce 01       	movw	r24, r28
    1db6:	8d 5e       	subi	r24, 0xED	; 237
    1db8:	9e 4f       	sbci	r25, 0xFE	; 254
    1dba:	fc 01       	movw	r30, r24
    1dbc:	e2 0f       	add	r30, r18
    1dbe:	f3 1f       	adc	r31, r19
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8d 30       	cpi	r24, 0x0D	; 13
    1dc4:	89 f4       	brne	.+34     	; 0x1de8 <main+0x6d6>
				{
					/*reset the LCD*/
					LCD_clearScreen();
    1dc6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
					LCD_displayString("Reenter New pass");
    1dca:	84 ea       	ldi	r24, 0xA4	; 164
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
					LCD_goToRowColumn(1,0);
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
					/*the counter is set to -1 so the next loop will be resets to zero as i increases in each loop by one*/
					i=-1;
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e5 5f       	subi	r30, 0xF5	; 245
    1dde:	fe 4f       	sbci	r31, 0xFE	; 254
    1de0:	8f ef       	ldi	r24, 0xFF	; 255
    1de2:	9f ef       	ldi	r25, 0xFF	; 255
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
    1de8:	fe 01       	movw	r30, r28
    1dea:	e1 53       	subi	r30, 0x31	; 49
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	aa ef       	ldi	r26, 0xFA	; 250
    1df4:	b3 e4       	ldi	r27, 0x43	; 67
    1df6:	80 83       	st	Z, r24
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	a2 83       	std	Z+2, r26	; 0x02
    1dfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfe:	8e 01       	movw	r16, r28
    1e00:	05 53       	subi	r16, 0x35	; 53
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
    1e04:	fe 01       	movw	r30, r28
    1e06:	e1 53       	subi	r30, 0x31	; 49
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	60 81       	ld	r22, Z
    1e0c:	71 81       	ldd	r23, Z+1	; 0x01
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	93 81       	ldd	r25, Z+3	; 0x03
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	4a ef       	ldi	r20, 0xFA	; 250
    1e18:	54 e4       	ldi	r21, 0x44	; 68
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	f8 01       	movw	r30, r16
    1e24:	80 83       	st	Z, r24
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	a2 83       	std	Z+2, r26	; 0x02
    1e2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e5 53       	subi	r30, 0x35	; 53
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	60 81       	ld	r22, Z
    1e34:	71 81       	ldd	r23, Z+1	; 0x01
    1e36:	82 81       	ldd	r24, Z+2	; 0x02
    1e38:	93 81       	ldd	r25, Z+3	; 0x03
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e8       	ldi	r20, 0x80	; 128
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e46:	88 23       	and	r24, r24
    1e48:	44 f4       	brge	.+16     	; 0x1e5a <main+0x748>
		__ticks = 1;
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e7 53       	subi	r30, 0x37	; 55
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	80 83       	st	Z, r24
    1e58:	64 c0       	rjmp	.+200    	; 0x1f22 <main+0x810>
	else if (__tmp > 65535)
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e5 53       	subi	r30, 0x35	; 53
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	60 81       	ld	r22, Z
    1e62:	71 81       	ldd	r23, Z+1	; 0x01
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	0c f0       	brlt	.+2      	; 0x1e7a <main+0x768>
    1e78:	43 c0       	rjmp	.+134    	; 0x1f00 <main+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e1 53       	subi	r30, 0x31	; 49
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8e 01       	movw	r16, r28
    1e9a:	07 53       	subi	r16, 0x37	; 55
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	f8 01       	movw	r30, r16
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	1f c0       	rjmp	.+62     	; 0x1ef0 <main+0x7de>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e9 53       	subi	r30, 0x39	; 57
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	88 ec       	ldi	r24, 0xC8	; 200
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	80 83       	st	Z, r24
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e9 53       	subi	r30, 0x39	; 57
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <main+0x7b8>
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e9 53       	subi	r30, 0x39	; 57
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	91 83       	std	Z+1, r25	; 0x01
    1ed6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed8:	de 01       	movw	r26, r28
    1eda:	a7 53       	subi	r26, 0x37	; 55
    1edc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e7 53       	subi	r30, 0x37	; 55
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	11 96       	adiw	r26, 0x01	; 1
    1eec:	9c 93       	st	X, r25
    1eee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e7 53       	subi	r30, 0x37	; 55
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	d1 f6       	brne	.-76     	; 0x1eb2 <main+0x7a0>
    1efe:	27 c0       	rjmp	.+78     	; 0x1f4e <main+0x83c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f00:	8e 01       	movw	r16, r28
    1f02:	07 53       	subi	r16, 0x37	; 55
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
    1f06:	fe 01       	movw	r30, r28
    1f08:	e5 53       	subi	r30, 0x35	; 53
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	60 81       	ld	r22, Z
    1f0e:	71 81       	ldd	r23, Z+1	; 0x01
    1f10:	82 81       	ldd	r24, Z+2	; 0x02
    1f12:	93 81       	ldd	r25, Z+3	; 0x03
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
    1f22:	de 01       	movw	r26, r28
    1f24:	ab 53       	subi	r26, 0x3B	; 59
    1f26:	bf 4f       	sbci	r27, 0xFF	; 255
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e7 53       	subi	r30, 0x37	; 55
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	8d 93       	st	X+, r24
    1f34:	9c 93       	st	X, r25
    1f36:	fe 01       	movw	r30, r28
    1f38:	eb 53       	subi	r30, 0x3B	; 59
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <main+0x82e>
    1f44:	fe 01       	movw	r30, r28
    1f46:	eb 53       	subi	r30, 0x3B	; 59
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	80 83       	st	Z, r24
						 *          Please confirm new password                 *
						 *                     *****                            *
						 *******************************************************/
			LCD_displayString("Reenter the New pass");
			LCD_goToRowColumn(1,0);
			for(int i=0 ;i<5;i++ )
    1f4e:	de 01       	movw	r26, r28
    1f50:	a5 5f       	subi	r26, 0xF5	; 245
    1f52:	be 4f       	sbci	r27, 0xFE	; 254
    1f54:	fe 01       	movw	r30, r28
    1f56:	e5 5f       	subi	r30, 0xF5	; 245
    1f58:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5a:	80 81       	ld	r24, Z
    1f5c:	91 81       	ldd	r25, Z+1	; 0x01
    1f5e:	01 96       	adiw	r24, 0x01	; 1
    1f60:	11 96       	adiw	r26, 0x01	; 1
    1f62:	9c 93       	st	X, r25
    1f64:	8e 93       	st	-X, r24
    1f66:	fe 01       	movw	r30, r28
    1f68:	e5 5f       	subi	r30, 0xF5	; 245
    1f6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f6c:	80 81       	ld	r24, Z
    1f6e:	91 81       	ldd	r25, Z+1	; 0x01
    1f70:	85 30       	cpi	r24, 0x05	; 5
    1f72:	91 05       	cpc	r25, r1
    1f74:	0c f4       	brge	.+2      	; 0x1f78 <main+0x866>
    1f76:	07 cf       	rjmp	.-498    	; 0x1d86 <main+0x674>
					/*the counter is set to -1 so the next loop will be resets to zero as i increases in each loop by one*/
					i=-1;
				}
				_delay_ms(500); /* Press time */
			}
			LCD_clearScreen();
    1f78:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>

			/*also repeats entering the key until user presses = sign */
			do
			{
				LCD_displayString("press = to send!");//Statements
    1f7c:	85 eb       	ldi	r24, 0xB5	; 181
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
				send_key=KeyPad_getPressedKey();
    1f84:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1f88:	fe 01       	movw	r30, r28
    1f8a:	ef 5e       	subi	r30, 0xEF	; 239
    1f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8e:	80 83       	st	Z, r24
			}while(send_key!= '=');
    1f90:	fe 01       	movw	r30, r28
    1f92:	ef 5e       	subi	r30, 0xEF	; 239
    1f94:	fe 4f       	sbci	r31, 0xFE	; 254
    1f96:	80 81       	ld	r24, Z
    1f98:	8d 33       	cpi	r24, 0x3D	; 61
    1f9a:	81 f7       	brne	.-32     	; 0x1f7c <main+0x86a>

			/*in case the user pressed send button the MCU1 sends the password to MCU2*/
			for (int i=0;i<5;i++)
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e7 5f       	subi	r30, 0xF7	; 247
    1fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa2:	11 82       	std	Z+1, r1	; 0x01
    1fa4:	10 82       	st	Z, r1
    1fa6:	1a c0       	rjmp	.+52     	; 0x1fdc <main+0x8ca>
			{
				UART_sendByte(key[i]);
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e7 5f       	subi	r30, 0xF7	; 247
    1fac:	fe 4f       	sbci	r31, 0xFE	; 254
    1fae:	20 81       	ld	r18, Z
    1fb0:	31 81       	ldd	r19, Z+1	; 0x01
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	8d 5e       	subi	r24, 0xED	; 237
    1fb6:	9e 4f       	sbci	r25, 0xFE	; 254
    1fb8:	fc 01       	movw	r30, r24
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	80 81       	ld	r24, Z
    1fc0:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <UART_sendByte>
				LCD_displayString("press = to send!");//Statements
				send_key=KeyPad_getPressedKey();
			}while(send_key!= '=');

			/*in case the user pressed send button the MCU1 sends the password to MCU2*/
			for (int i=0;i<5;i++)
    1fc4:	de 01       	movw	r26, r28
    1fc6:	a7 5f       	subi	r26, 0xF7	; 247
    1fc8:	be 4f       	sbci	r27, 0xFE	; 254
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e7 5f       	subi	r30, 0xF7	; 247
    1fce:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	11 96       	adiw	r26, 0x01	; 1
    1fd8:	9c 93       	st	X, r25
    1fda:	8e 93       	st	-X, r24
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e7 5f       	subi	r30, 0xF7	; 247
    1fe0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	85 30       	cpi	r24, 0x05	; 5
    1fe8:	91 05       	cpc	r25, r1
    1fea:	f4 f2       	brlt	.-68     	; 0x1fa8 <main+0x896>
			{
				UART_sendByte(key[i]);
			}
			LCD_clearScreen();
    1fec:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
			LCD_displayString("Password2 sent");
    1ff0:	86 ec       	ldi	r24, 0xC6	; 198
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ef 53       	subi	r30, 0x3F	; 63
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	aa ef       	ldi	r26, 0xFA	; 250
    2004:	b3 e4       	ldi	r27, 0x43	; 67
    2006:	80 83       	st	Z, r24
    2008:	91 83       	std	Z+1, r25	; 0x01
    200a:	a2 83       	std	Z+2, r26	; 0x02
    200c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200e:	8e 01       	movw	r16, r28
    2010:	03 54       	subi	r16, 0x43	; 67
    2012:	1f 4f       	sbci	r17, 0xFF	; 255
    2014:	fe 01       	movw	r30, r28
    2016:	ef 53       	subi	r30, 0x3F	; 63
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	60 81       	ld	r22, Z
    201c:	71 81       	ldd	r23, Z+1	; 0x01
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	4a ef       	ldi	r20, 0xFA	; 250
    2028:	54 e4       	ldi	r21, 0x44	; 68
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	f8 01       	movw	r30, r16
    2034:	80 83       	st	Z, r24
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	a2 83       	std	Z+2, r26	; 0x02
    203a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    203c:	fe 01       	movw	r30, r28
    203e:	e3 54       	subi	r30, 0x43	; 67
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	44 f4       	brge	.+16     	; 0x206a <main+0x958>
		__ticks = 1;
    205a:	fe 01       	movw	r30, r28
    205c:	e5 54       	subi	r30, 0x45	; 69
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
    2068:	64 c0       	rjmp	.+200    	; 0x2132 <main+0xa20>
	else if (__tmp > 65535)
    206a:	fe 01       	movw	r30, r28
    206c:	e3 54       	subi	r30, 0x43	; 67
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	3f ef       	ldi	r19, 0xFF	; 255
    207c:	4f e7       	ldi	r20, 0x7F	; 127
    207e:	57 e4       	ldi	r21, 0x47	; 71
    2080:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2084:	18 16       	cp	r1, r24
    2086:	0c f0       	brlt	.+2      	; 0x208a <main+0x978>
    2088:	43 c0       	rjmp	.+134    	; 0x2110 <main+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208a:	fe 01       	movw	r30, r28
    208c:	ef 53       	subi	r30, 0x3F	; 63
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	60 81       	ld	r22, Z
    2092:	71 81       	ldd	r23, Z+1	; 0x01
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	93 81       	ldd	r25, Z+3	; 0x03
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e2       	ldi	r20, 0x20	; 32
    209e:	51 e4       	ldi	r21, 0x41	; 65
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	8e 01       	movw	r16, r28
    20aa:	05 54       	subi	r16, 0x45	; 69
    20ac:	1f 4f       	sbci	r17, 0xFF	; 255
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	f8 01       	movw	r30, r16
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	80 83       	st	Z, r24
    20c0:	1f c0       	rjmp	.+62     	; 0x2100 <main+0x9ee>
    20c2:	fe 01       	movw	r30, r28
    20c4:	e7 54       	subi	r30, 0x47	; 71
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	88 ec       	ldi	r24, 0xC8	; 200
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	80 83       	st	Z, r24
    20d0:	fe 01       	movw	r30, r28
    20d2:	e7 54       	subi	r30, 0x47	; 71
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <main+0x9c8>
    20de:	fe 01       	movw	r30, r28
    20e0:	e7 54       	subi	r30, 0x47	; 71
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	de 01       	movw	r26, r28
    20ea:	a5 54       	subi	r26, 0x45	; 69
    20ec:	bf 4f       	sbci	r27, 0xFF	; 255
    20ee:	fe 01       	movw	r30, r28
    20f0:	e5 54       	subi	r30, 0x45	; 69
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	11 96       	adiw	r26, 0x01	; 1
    20fc:	9c 93       	st	X, r25
    20fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	fe 01       	movw	r30, r28
    2102:	e5 54       	subi	r30, 0x45	; 69
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 81       	ld	r24, Z
    2108:	91 81       	ldd	r25, Z+1	; 0x01
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	d1 f6       	brne	.-76     	; 0x20c2 <main+0x9b0>
    210e:	27 c0       	rjmp	.+78     	; 0x215e <main+0xa4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2110:	8e 01       	movw	r16, r28
    2112:	05 54       	subi	r16, 0x45	; 69
    2114:	1f 4f       	sbci	r17, 0xFF	; 255
    2116:	fe 01       	movw	r30, r28
    2118:	e3 54       	subi	r30, 0x43	; 67
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	60 81       	ld	r22, Z
    211e:	71 81       	ldd	r23, Z+1	; 0x01
    2120:	82 81       	ldd	r24, Z+2	; 0x02
    2122:	93 81       	ldd	r25, Z+3	; 0x03
    2124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	f8 01       	movw	r30, r16
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
    2132:	de 01       	movw	r26, r28
    2134:	a9 54       	subi	r26, 0x49	; 73
    2136:	bf 4f       	sbci	r27, 0xFF	; 255
    2138:	fe 01       	movw	r30, r28
    213a:	e5 54       	subi	r30, 0x45	; 69
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 81       	ld	r24, Z
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	8d 93       	st	X+, r24
    2144:	9c 93       	st	X, r25
    2146:	fe 01       	movw	r30, r28
    2148:	e9 54       	subi	r30, 0x49	; 73
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <main+0xa3e>
    2154:	fe 01       	movw	r30, r28
    2156:	e9 54       	subi	r30, 0x49	; 73
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
			_delay_ms(500);

			/*receiving byte which determines if the two passwords are matched it will go to next step
			 * either the two passwords are unmatched so it repeats the current step until the two passwords are matched
			 */
			g_step=UART_recieveByte();
    215e:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    2162:	80 93 b7 01 	sts	0x01B7, r24
			LCD_clearScreen();
    2166:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
			if (g_step==0)
    216a:	80 91 b7 01 	lds	r24, 0x01B7
    216e:	88 23       	and	r24, r24
    2170:	09 f0       	breq	.+2      	; 0x2174 <main+0xa62>
    2172:	ba c0       	rjmp	.+372    	; 0x22e8 <main+0xbd6>
			{
				LCD_displayString("Unmatched!");
    2174:	85 ed       	ldi	r24, 0xD5	; 213
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    217c:	fe 01       	movw	r30, r28
    217e:	ed 54       	subi	r30, 0x4D	; 77
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	aa ef       	ldi	r26, 0xFA	; 250
    2188:	b3 e4       	ldi	r27, 0x43	; 67
    218a:	80 83       	st	Z, r24
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	a2 83       	std	Z+2, r26	; 0x02
    2190:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	8e 01       	movw	r16, r28
    2194:	01 55       	subi	r16, 0x51	; 81
    2196:	1f 4f       	sbci	r17, 0xFF	; 255
    2198:	fe 01       	movw	r30, r28
    219a:	ed 54       	subi	r30, 0x4D	; 77
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4a ef       	ldi	r20, 0xFA	; 250
    21ac:	54 e4       	ldi	r21, 0x44	; 68
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	f8 01       	movw	r30, r16
    21b8:	80 83       	st	Z, r24
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	a2 83       	std	Z+2, r26	; 0x02
    21be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21c0:	fe 01       	movw	r30, r28
    21c2:	e1 55       	subi	r30, 0x51	; 81
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e8       	ldi	r20, 0x80	; 128
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21da:	88 23       	and	r24, r24
    21dc:	44 f4       	brge	.+16     	; 0x21ee <main+0xadc>
		__ticks = 1;
    21de:	fe 01       	movw	r30, r28
    21e0:	e3 55       	subi	r30, 0x53	; 83
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
    21ec:	64 c0       	rjmp	.+200    	; 0x22b6 <main+0xba4>
	else if (__tmp > 65535)
    21ee:	fe 01       	movw	r30, r28
    21f0:	e1 55       	subi	r30, 0x51	; 81
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	0c f0       	brlt	.+2      	; 0x220e <main+0xafc>
    220c:	43 c0       	rjmp	.+134    	; 0x2294 <main+0xb82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220e:	fe 01       	movw	r30, r28
    2210:	ed 54       	subi	r30, 0x4D	; 77
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	60 81       	ld	r22, Z
    2216:	71 81       	ldd	r23, Z+1	; 0x01
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	93 81       	ldd	r25, Z+3	; 0x03
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e2       	ldi	r20, 0x20	; 32
    2222:	51 e4       	ldi	r21, 0x41	; 65
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	8e 01       	movw	r16, r28
    222e:	03 55       	subi	r16, 0x53	; 83
    2230:	1f 4f       	sbci	r17, 0xFF	; 255
    2232:	bc 01       	movw	r22, r24
    2234:	cd 01       	movw	r24, r26
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	f8 01       	movw	r30, r16
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	80 83       	st	Z, r24
    2244:	1f c0       	rjmp	.+62     	; 0x2284 <main+0xb72>
    2246:	fe 01       	movw	r30, r28
    2248:	e5 55       	subi	r30, 0x55	; 85
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	88 ec       	ldi	r24, 0xC8	; 200
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
    2254:	fe 01       	movw	r30, r28
    2256:	e5 55       	subi	r30, 0x55	; 85
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <main+0xb4c>
    2262:	fe 01       	movw	r30, r28
    2264:	e5 55       	subi	r30, 0x55	; 85
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226c:	de 01       	movw	r26, r28
    226e:	a3 55       	subi	r26, 0x53	; 83
    2270:	bf 4f       	sbci	r27, 0xFF	; 255
    2272:	fe 01       	movw	r30, r28
    2274:	e3 55       	subi	r30, 0x53	; 83
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	11 96       	adiw	r26, 0x01	; 1
    2280:	9c 93       	st	X, r25
    2282:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2284:	fe 01       	movw	r30, r28
    2286:	e3 55       	subi	r30, 0x53	; 83
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	d1 f6       	brne	.-76     	; 0x2246 <main+0xb34>
    2292:	27 c0       	rjmp	.+78     	; 0x22e2 <main+0xbd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	8e 01       	movw	r16, r28
    2296:	03 55       	subi	r16, 0x53	; 83
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	fe 01       	movw	r30, r28
    229c:	e1 55       	subi	r30, 0x51	; 81
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	60 81       	ld	r22, Z
    22a2:	71 81       	ldd	r23, Z+1	; 0x01
    22a4:	82 81       	ldd	r24, Z+2	; 0x02
    22a6:	93 81       	ldd	r25, Z+3	; 0x03
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	f8 01       	movw	r30, r16
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24
    22b6:	de 01       	movw	r26, r28
    22b8:	a7 55       	subi	r26, 0x57	; 87
    22ba:	bf 4f       	sbci	r27, 0xFF	; 255
    22bc:	fe 01       	movw	r30, r28
    22be:	e3 55       	subi	r30, 0x53	; 83
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	8d 93       	st	X+, r24
    22c8:	9c 93       	st	X, r25
    22ca:	fe 01       	movw	r30, r28
    22cc:	e7 55       	subi	r30, 0x57	; 87
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <main+0xbc2>
    22d8:	fe 01       	movw	r30, r28
    22da:	e7 55       	subi	r30, 0x57	; 87
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
				_delay_ms(500);
				LCD_clearScreen();
    22e2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
    22e6:	35 ca       	rjmp	.-2966   	; 0x1752 <main+0x40>
			}
			else if(g_step==1)
    22e8:	80 91 b7 01 	lds	r24, 0x01B7
    22ec:	81 30       	cpi	r24, 0x01	; 1
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <main+0xbe0>
    22f0:	30 ca       	rjmp	.-2976   	; 0x1752 <main+0x40>
			{
				LCD_displayString("Matched!");
    22f2:	80 ee       	ldi	r24, 0xE0	; 224
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
				LCD_displayStringRowColumn(1,0,"Pass Saved!");
    22fa:	29 ee       	ldi	r18, 0xE9	; 233
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	a9 01       	movw	r20, r18
    2304:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    2308:	fe 01       	movw	r30, r28
    230a:	eb 55       	subi	r30, 0x5B	; 91
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	aa ef       	ldi	r26, 0xFA	; 250
    2314:	b3 e4       	ldi	r27, 0x43	; 67
    2316:	80 83       	st	Z, r24
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	a2 83       	std	Z+2, r26	; 0x02
    231c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231e:	8e 01       	movw	r16, r28
    2320:	0f 55       	subi	r16, 0x5F	; 95
    2322:	1f 4f       	sbci	r17, 0xFF	; 255
    2324:	fe 01       	movw	r30, r28
    2326:	eb 55       	subi	r30, 0x5B	; 91
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	4a ef       	ldi	r20, 0xFA	; 250
    2338:	54 e4       	ldi	r21, 0x44	; 68
    233a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	f8 01       	movw	r30, r16
    2344:	80 83       	st	Z, r24
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	a2 83       	std	Z+2, r26	; 0x02
    234a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    234c:	fe 01       	movw	r30, r28
    234e:	ef 55       	subi	r30, 0x5F	; 95
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	60 81       	ld	r22, Z
    2354:	71 81       	ldd	r23, Z+1	; 0x01
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	93 81       	ldd	r25, Z+3	; 0x03
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e8       	ldi	r20, 0x80	; 128
    2360:	5f e3       	ldi	r21, 0x3F	; 63
    2362:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2366:	88 23       	and	r24, r24
    2368:	44 f4       	brge	.+16     	; 0x237a <main+0xc68>
		__ticks = 1;
    236a:	fe 01       	movw	r30, r28
    236c:	e1 56       	subi	r30, 0x61	; 97
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	80 83       	st	Z, r24
    2378:	64 c0       	rjmp	.+200    	; 0x2442 <main+0xd30>
	else if (__tmp > 65535)
    237a:	fe 01       	movw	r30, r28
    237c:	ef 55       	subi	r30, 0x5F	; 95
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	4f e7       	ldi	r20, 0x7F	; 127
    238e:	57 e4       	ldi	r21, 0x47	; 71
    2390:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2394:	18 16       	cp	r1, r24
    2396:	0c f0       	brlt	.+2      	; 0x239a <main+0xc88>
    2398:	43 c0       	rjmp	.+134    	; 0x2420 <main+0xd0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239a:	fe 01       	movw	r30, r28
    239c:	eb 55       	subi	r30, 0x5B	; 91
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	60 81       	ld	r22, Z
    23a2:	71 81       	ldd	r23, Z+1	; 0x01
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	93 81       	ldd	r25, Z+3	; 0x03
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e2       	ldi	r20, 0x20	; 32
    23ae:	51 e4       	ldi	r21, 0x41	; 65
    23b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	8e 01       	movw	r16, r28
    23ba:	01 56       	subi	r16, 0x61	; 97
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	f8 01       	movw	r30, r16
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	80 83       	st	Z, r24
    23d0:	1f c0       	rjmp	.+62     	; 0x2410 <main+0xcfe>
    23d2:	fe 01       	movw	r30, r28
    23d4:	e3 56       	subi	r30, 0x63	; 99
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	88 ec       	ldi	r24, 0xC8	; 200
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	80 83       	st	Z, r24
    23e0:	fe 01       	movw	r30, r28
    23e2:	e3 56       	subi	r30, 0x63	; 99
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <main+0xcd8>
    23ee:	fe 01       	movw	r30, r28
    23f0:	e3 56       	subi	r30, 0x63	; 99
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f8:	de 01       	movw	r26, r28
    23fa:	a1 56       	subi	r26, 0x61	; 97
    23fc:	bf 4f       	sbci	r27, 0xFF	; 255
    23fe:	fe 01       	movw	r30, r28
    2400:	e1 56       	subi	r30, 0x61	; 97
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	11 96       	adiw	r26, 0x01	; 1
    240c:	9c 93       	st	X, r25
    240e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2410:	fe 01       	movw	r30, r28
    2412:	e1 56       	subi	r30, 0x61	; 97
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 81       	ld	r24, Z
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	d1 f6       	brne	.-76     	; 0x23d2 <main+0xcc0>
    241e:	28 c0       	rjmp	.+80     	; 0x2470 <main+0xd5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	8e 01       	movw	r16, r28
    2422:	01 56       	subi	r16, 0x61	; 97
    2424:	1f 4f       	sbci	r17, 0xFF	; 255
    2426:	fe 01       	movw	r30, r28
    2428:	ef 55       	subi	r30, 0x5F	; 95
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	60 81       	ld	r22, Z
    242e:	71 81       	ldd	r23, Z+1	; 0x01
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	f8 01       	movw	r30, r16
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	80 83       	st	Z, r24
    2442:	de 01       	movw	r26, r28
    2444:	a5 56       	subi	r26, 0x65	; 101
    2446:	bf 4f       	sbci	r27, 0xFF	; 255
    2448:	fe 01       	movw	r30, r28
    244a:	e1 56       	subi	r30, 0x61	; 97
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	80 81       	ld	r24, Z
    2450:	91 81       	ldd	r25, Z+1	; 0x01
    2452:	11 96       	adiw	r26, 0x01	; 1
    2454:	9c 93       	st	X, r25
    2456:	8e 93       	st	-X, r24
    2458:	fe 01       	movw	r30, r28
    245a:	e5 56       	subi	r30, 0x65	; 101
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	91 81       	ldd	r25, Z+1	; 0x01
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <main+0xd50>
    2466:	fe 01       	movw	r30, r28
    2468:	e5 56       	subi	r30, 0x65	; 101
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	80 83       	st	Z, r24
				_delay_ms(500);
				g_step=2;
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	80 93 b7 01 	sts	0x01B7, r24
    2476:	6d c9       	rjmp	.-3366   	; 0x1752 <main+0x40>
			            /***********************************************************
						 *                      ----> Save password to EEPROM      *
						 *          IF Matched -                                   *
						 *                      ----> then go to step 2            *
						 ***********************************************************/
			LCD_displayString("Matched!");
    2478:	80 ee       	ldi	r24, 0xE0	; 224
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"Pass saved!");
    2480:	25 ef       	ldi	r18, 0xF5	; 245
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	60 e0       	ldi	r22, 0x00	; 0
    2488:	a9 01       	movw	r20, r18
    248a:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    248e:	fe 01       	movw	r30, r28
    2490:	e9 56       	subi	r30, 0x69	; 105
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	aa ef       	ldi	r26, 0xFA	; 250
    249a:	b3 e4       	ldi	r27, 0x43	; 67
    249c:	80 83       	st	Z, r24
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	a2 83       	std	Z+2, r26	; 0x02
    24a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a4:	8e 01       	movw	r16, r28
    24a6:	0d 56       	subi	r16, 0x6D	; 109
    24a8:	1f 4f       	sbci	r17, 0xFF	; 255
    24aa:	fe 01       	movw	r30, r28
    24ac:	e9 56       	subi	r30, 0x69	; 105
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	4a ef       	ldi	r20, 0xFA	; 250
    24be:	54 e4       	ldi	r21, 0x44	; 68
    24c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	f8 01       	movw	r30, r16
    24ca:	80 83       	st	Z, r24
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	a2 83       	std	Z+2, r26	; 0x02
    24d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24d2:	fe 01       	movw	r30, r28
    24d4:	ed 56       	subi	r30, 0x6D	; 109
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	60 81       	ld	r22, Z
    24da:	71 81       	ldd	r23, Z+1	; 0x01
    24dc:	82 81       	ldd	r24, Z+2	; 0x02
    24de:	93 81       	ldd	r25, Z+3	; 0x03
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	44 f4       	brge	.+16     	; 0x2500 <main+0xdee>
		__ticks = 1;
    24f0:	fe 01       	movw	r30, r28
    24f2:	ef 56       	subi	r30, 0x6F	; 111
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	91 83       	std	Z+1, r25	; 0x01
    24fc:	80 83       	st	Z, r24
    24fe:	64 c0       	rjmp	.+200    	; 0x25c8 <main+0xeb6>
	else if (__tmp > 65535)
    2500:	fe 01       	movw	r30, r28
    2502:	ed 56       	subi	r30, 0x6D	; 109
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	60 81       	ld	r22, Z
    2508:	71 81       	ldd	r23, Z+1	; 0x01
    250a:	82 81       	ldd	r24, Z+2	; 0x02
    250c:	93 81       	ldd	r25, Z+3	; 0x03
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	3f ef       	ldi	r19, 0xFF	; 255
    2512:	4f e7       	ldi	r20, 0x7F	; 127
    2514:	57 e4       	ldi	r21, 0x47	; 71
    2516:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    251a:	18 16       	cp	r1, r24
    251c:	0c f0       	brlt	.+2      	; 0x2520 <main+0xe0e>
    251e:	43 c0       	rjmp	.+134    	; 0x25a6 <main+0xe94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2520:	fe 01       	movw	r30, r28
    2522:	e9 56       	subi	r30, 0x69	; 105
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	60 81       	ld	r22, Z
    2528:	71 81       	ldd	r23, Z+1	; 0x01
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e2       	ldi	r20, 0x20	; 32
    2534:	51 e4       	ldi	r21, 0x41	; 65
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	8e 01       	movw	r16, r28
    2540:	0f 56       	subi	r16, 0x6F	; 111
    2542:	1f 4f       	sbci	r17, 0xFF	; 255
    2544:	bc 01       	movw	r22, r24
    2546:	cd 01       	movw	r24, r26
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	f8 01       	movw	r30, r16
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
    2556:	1f c0       	rjmp	.+62     	; 0x2596 <main+0xe84>
    2558:	fe 01       	movw	r30, r28
    255a:	e1 57       	subi	r30, 0x71	; 113
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	88 ec       	ldi	r24, 0xC8	; 200
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	80 83       	st	Z, r24
    2566:	fe 01       	movw	r30, r28
    2568:	e1 57       	subi	r30, 0x71	; 113
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <main+0xe5e>
    2574:	fe 01       	movw	r30, r28
    2576:	e1 57       	subi	r30, 0x71	; 113
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	91 83       	std	Z+1, r25	; 0x01
    257c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257e:	de 01       	movw	r26, r28
    2580:	af 56       	subi	r26, 0x6F	; 111
    2582:	bf 4f       	sbci	r27, 0xFF	; 255
    2584:	fe 01       	movw	r30, r28
    2586:	ef 56       	subi	r30, 0x6F	; 111
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	11 96       	adiw	r26, 0x01	; 1
    2592:	9c 93       	st	X, r25
    2594:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2596:	fe 01       	movw	r30, r28
    2598:	ef 56       	subi	r30, 0x6F	; 111
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	d1 f6       	brne	.-76     	; 0x2558 <main+0xe46>
    25a4:	28 c0       	rjmp	.+80     	; 0x25f6 <main+0xee4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a6:	8e 01       	movw	r16, r28
    25a8:	0f 56       	subi	r16, 0x6F	; 111
    25aa:	1f 4f       	sbci	r17, 0xFF	; 255
    25ac:	fe 01       	movw	r30, r28
    25ae:	ed 56       	subi	r30, 0x6D	; 109
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	60 81       	ld	r22, Z
    25b4:	71 81       	ldd	r23, Z+1	; 0x01
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	f8 01       	movw	r30, r16
    25c4:	91 83       	std	Z+1, r25	; 0x01
    25c6:	80 83       	st	Z, r24
    25c8:	de 01       	movw	r26, r28
    25ca:	a3 57       	subi	r26, 0x73	; 115
    25cc:	bf 4f       	sbci	r27, 0xFF	; 255
    25ce:	fe 01       	movw	r30, r28
    25d0:	ef 56       	subi	r30, 0x6F	; 111
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	91 81       	ldd	r25, Z+1	; 0x01
    25d8:	11 96       	adiw	r26, 0x01	; 1
    25da:	9c 93       	st	X, r25
    25dc:	8e 93       	st	-X, r24
    25de:	fe 01       	movw	r30, r28
    25e0:	e3 57       	subi	r30, 0x73	; 115
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <main+0xed6>
    25ec:	fe 01       	movw	r30, r28
    25ee:	e3 57       	subi	r30, 0x73	; 115
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	80 83       	st	Z, r24
			_delay_ms(500);
			g_step=2;
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	80 93 b7 01 	sts	0x01B7, r24
    25fc:	aa c8       	rjmp	.-3756   	; 0x1752 <main+0x40>
			            /******************** step 2  ***************************
						 *                   Main option                         *
						 *           + : OPEN DOOR      - : CLOSE DOOR           *
						 *                  * : CHANGE PASSWORD                  *
						 *********************************************************/
			while(UART_recieveByte()!=M2_READY);		/*waits until MCU2 is ready*/
    25fe:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    2602:	80 31       	cpi	r24, 0x10	; 16
    2604:	e1 f7       	brne	.-8      	; 0x25fe <main+0xeec>
			LCD_clearScreen();
    2606:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>

			/*displays multiple options for the user*/
			LCD_displayString("+:open -:close");
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	91 e0       	ldi	r25, 0x01	; 1
    260e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"*:change pass");
    2612:	20 e1       	ldi	r18, 0x10	; 16
    2614:	31 e0       	ldi	r19, 0x01	; 1
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	a9 01       	movw	r20, r18
    261c:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>

			/*repeats until the user choose one of three options */
			do
			{
				send_key=KeyPad_getPressedKey();
    2620:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2624:	fe 01       	movw	r30, r28
    2626:	ef 5e       	subi	r30, 0xEF	; 239
    2628:	fe 4f       	sbci	r31, 0xFE	; 254
    262a:	80 83       	st	Z, r24
			}while((send_key!= '*')&&(send_key!= '+')&&(send_key!= '-'));
    262c:	fe 01       	movw	r30, r28
    262e:	ef 5e       	subi	r30, 0xEF	; 239
    2630:	fe 4f       	sbci	r31, 0xFE	; 254
    2632:	80 81       	ld	r24, Z
    2634:	8a 32       	cpi	r24, 0x2A	; 42
    2636:	61 f0       	breq	.+24     	; 0x2650 <main+0xf3e>
    2638:	fe 01       	movw	r30, r28
    263a:	ef 5e       	subi	r30, 0xEF	; 239
    263c:	fe 4f       	sbci	r31, 0xFE	; 254
    263e:	80 81       	ld	r24, Z
    2640:	8b 32       	cpi	r24, 0x2B	; 43
    2642:	31 f0       	breq	.+12     	; 0x2650 <main+0xf3e>
    2644:	fe 01       	movw	r30, r28
    2646:	ef 5e       	subi	r30, 0xEF	; 239
    2648:	fe 4f       	sbci	r31, 0xFE	; 254
    264a:	80 81       	ld	r24, Z
    264c:	8d 32       	cpi	r24, 0x2D	; 45
    264e:	41 f7       	brne	.-48     	; 0x2620 <main+0xf0e>

			/*sends to MCU2 the option which the user chose*/
			UART_sendByte(send_key);
    2650:	fe 01       	movw	r30, r28
    2652:	ef 5e       	subi	r30, 0xEF	; 239
    2654:	fe 4f       	sbci	r31, 0xFE	; 254
    2656:	80 81       	ld	r24, Z
    2658:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <UART_sendByte>
			LCD_clearScreen();
    265c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
			LCD_displayCharacter(send_key);
    2660:	fe 01       	movw	r30, r28
    2662:	ef 5e       	subi	r30, 0xEF	; 239
    2664:	fe 4f       	sbci	r31, 0xFE	; 254
    2666:	80 81       	ld	r24, Z
    2668:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
    266c:	fe 01       	movw	r30, r28
    266e:	e7 57       	subi	r30, 0x77	; 119
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	aa ef       	ldi	r26, 0xFA	; 250
    2678:	b3 e4       	ldi	r27, 0x43	; 67
    267a:	80 83       	st	Z, r24
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	a2 83       	std	Z+2, r26	; 0x02
    2680:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2682:	8e 01       	movw	r16, r28
    2684:	0b 57       	subi	r16, 0x7B	; 123
    2686:	1f 4f       	sbci	r17, 0xFF	; 255
    2688:	fe 01       	movw	r30, r28
    268a:	e7 57       	subi	r30, 0x77	; 119
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	60 81       	ld	r22, Z
    2690:	71 81       	ldd	r23, Z+1	; 0x01
    2692:	82 81       	ldd	r24, Z+2	; 0x02
    2694:	93 81       	ldd	r25, Z+3	; 0x03
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4a ef       	ldi	r20, 0xFA	; 250
    269c:	54 e4       	ldi	r21, 0x44	; 68
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	f8 01       	movw	r30, r16
    26a8:	80 83       	st	Z, r24
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	a2 83       	std	Z+2, r26	; 0x02
    26ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26b0:	fe 01       	movw	r30, r28
    26b2:	eb 57       	subi	r30, 0x7B	; 123
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	60 81       	ld	r22, Z
    26b8:	71 81       	ldd	r23, Z+1	; 0x01
    26ba:	82 81       	ldd	r24, Z+2	; 0x02
    26bc:	93 81       	ldd	r25, Z+3	; 0x03
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e8       	ldi	r20, 0x80	; 128
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ca:	88 23       	and	r24, r24
    26cc:	44 f4       	brge	.+16     	; 0x26de <main+0xfcc>
		__ticks = 1;
    26ce:	fe 01       	movw	r30, r28
    26d0:	ed 57       	subi	r30, 0x7D	; 125
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	91 83       	std	Z+1, r25	; 0x01
    26da:	80 83       	st	Z, r24
    26dc:	64 c0       	rjmp	.+200    	; 0x27a6 <main+0x1094>
	else if (__tmp > 65535)
    26de:	fe 01       	movw	r30, r28
    26e0:	eb 57       	subi	r30, 0x7B	; 123
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	3f ef       	ldi	r19, 0xFF	; 255
    26f0:	4f e7       	ldi	r20, 0x7F	; 127
    26f2:	57 e4       	ldi	r21, 0x47	; 71
    26f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f8:	18 16       	cp	r1, r24
    26fa:	0c f0       	brlt	.+2      	; 0x26fe <main+0xfec>
    26fc:	43 c0       	rjmp	.+134    	; 0x2784 <main+0x1072>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fe:	fe 01       	movw	r30, r28
    2700:	e7 57       	subi	r30, 0x77	; 119
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	60 81       	ld	r22, Z
    2706:	71 81       	ldd	r23, Z+1	; 0x01
    2708:	82 81       	ldd	r24, Z+2	; 0x02
    270a:	93 81       	ldd	r25, Z+3	; 0x03
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e2       	ldi	r20, 0x20	; 32
    2712:	51 e4       	ldi	r21, 0x41	; 65
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8e 01       	movw	r16, r28
    271e:	0d 57       	subi	r16, 0x7D	; 125
    2720:	1f 4f       	sbci	r17, 0xFF	; 255
    2722:	bc 01       	movw	r22, r24
    2724:	cd 01       	movw	r24, r26
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	f8 01       	movw	r30, r16
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	1f c0       	rjmp	.+62     	; 0x2774 <main+0x1062>
    2736:	fe 01       	movw	r30, r28
    2738:	ef 57       	subi	r30, 0x7F	; 127
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	88 ec       	ldi	r24, 0xC8	; 200
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	80 83       	st	Z, r24
    2744:	fe 01       	movw	r30, r28
    2746:	ef 57       	subi	r30, 0x7F	; 127
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <main+0x103c>
    2752:	fe 01       	movw	r30, r28
    2754:	ef 57       	subi	r30, 0x7F	; 127
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275c:	de 01       	movw	r26, r28
    275e:	ad 57       	subi	r26, 0x7D	; 125
    2760:	bf 4f       	sbci	r27, 0xFF	; 255
    2762:	fe 01       	movw	r30, r28
    2764:	ed 57       	subi	r30, 0x7D	; 125
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 81       	ld	r24, Z
    276a:	91 81       	ldd	r25, Z+1	; 0x01
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	11 96       	adiw	r26, 0x01	; 1
    2770:	9c 93       	st	X, r25
    2772:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2774:	fe 01       	movw	r30, r28
    2776:	ed 57       	subi	r30, 0x7D	; 125
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	80 81       	ld	r24, Z
    277c:	91 81       	ldd	r25, Z+1	; 0x01
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	d1 f6       	brne	.-76     	; 0x2736 <main+0x1024>
    2782:	28 c0       	rjmp	.+80     	; 0x27d4 <main+0x10c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2784:	8e 01       	movw	r16, r28
    2786:	0d 57       	subi	r16, 0x7D	; 125
    2788:	1f 4f       	sbci	r17, 0xFF	; 255
    278a:	fe 01       	movw	r30, r28
    278c:	eb 57       	subi	r30, 0x7B	; 123
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	60 81       	ld	r22, Z
    2792:	71 81       	ldd	r23, Z+1	; 0x01
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	f8 01       	movw	r30, r16
    27a2:	91 83       	std	Z+1, r25	; 0x01
    27a4:	80 83       	st	Z, r24
    27a6:	de 01       	movw	r26, r28
    27a8:	a1 58       	subi	r26, 0x81	; 129
    27aa:	bf 4f       	sbci	r27, 0xFF	; 255
    27ac:	fe 01       	movw	r30, r28
    27ae:	ed 57       	subi	r30, 0x7D	; 125
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	91 81       	ldd	r25, Z+1	; 0x01
    27b6:	11 96       	adiw	r26, 0x01	; 1
    27b8:	9c 93       	st	X, r25
    27ba:	8e 93       	st	-X, r24
    27bc:	fe 01       	movw	r30, r28
    27be:	e1 58       	subi	r30, 0x81	; 129
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	91 81       	ldd	r25, Z+1	; 0x01
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <main+0x10b4>
    27ca:	fe 01       	movw	r30, r28
    27cc:	e1 58       	subi	r30, 0x81	; 129
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
			_delay_ms(500);

			/*the chosen option makes the code go to defined step*/
			if (send_key=='+')
    27d4:	fe 01       	movw	r30, r28
    27d6:	ef 5e       	subi	r30, 0xEF	; 239
    27d8:	fe 4f       	sbci	r31, 0xFE	; 254
    27da:	80 81       	ld	r24, Z
    27dc:	8b 32       	cpi	r24, 0x2B	; 43
    27de:	29 f4       	brne	.+10     	; 0x27ea <main+0x10d8>
			{
				g_step=3;
    27e0:	83 e0       	ldi	r24, 0x03	; 3
    27e2:	80 93 b7 01 	sts	0x01B7, r24
    27e6:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
			}
			else if(send_key=='*')
    27ea:	fe 01       	movw	r30, r28
    27ec:	ef 5e       	subi	r30, 0xEF	; 239
    27ee:	fe 4f       	sbci	r31, 0xFE	; 254
    27f0:	80 81       	ld	r24, Z
    27f2:	8a 32       	cpi	r24, 0x2A	; 42
    27f4:	29 f4       	brne	.+10     	; 0x2800 <main+0x10ee>
			{
				g_step=4;
    27f6:	84 e0       	ldi	r24, 0x04	; 4
    27f8:	80 93 b7 01 	sts	0x01B7, r24
    27fc:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
			}
			else if(send_key=='-')
    2800:	fe 01       	movw	r30, r28
    2802:	ef 5e       	subi	r30, 0xEF	; 239
    2804:	fe 4f       	sbci	r31, 0xFE	; 254
    2806:	80 81       	ld	r24, Z
    2808:	8d 32       	cpi	r24, 0x2D	; 45
    280a:	11 f0       	breq	.+4      	; 0x2810 <main+0x10fe>
    280c:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
			{
				g_step=6;
    2810:	86 e0       	ldi	r24, 0x06	; 6
    2812:	80 93 b7 01 	sts	0x01B7, r24
    2816:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
						 ********************************************************/
						/******************************************************************************
						 *      IF MATECHED ---> DC motor will rotate CW For 15 second                *
						 *      else        ---> DC motor will rotate ACW For 15 second               *
						 ******************************************************************************/
			LCD_displayString("enter password");
    281a:	8e e1       	ldi	r24, 0x1E	; 30
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
			/*enters the password*/
			for(int i=0 ;i<5;i++ )
    282a:	fe 01       	movw	r30, r28
    282c:	e9 5f       	subi	r30, 0xF9	; 249
    282e:	fe 4f       	sbci	r31, 0xFE	; 254
    2830:	11 82       	std	Z+1, r1	; 0x01
    2832:	10 82       	st	Z, r1
    2834:	f0 c0       	rjmp	.+480    	; 0x2a16 <main+0x1304>
			{
				/* if any switch pressed for more than 500 ms it counts more than one press */
				key[i] = KeyPad_getPressedKey(); /* get the pressed key number */
    2836:	fe 01       	movw	r30, r28
    2838:	e9 5f       	subi	r30, 0xF9	; 249
    283a:	fe 4f       	sbci	r31, 0xFE	; 254
    283c:	00 81       	ld	r16, Z
    283e:	11 81       	ldd	r17, Z+1	; 0x01
    2840:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2844:	28 2f       	mov	r18, r24
    2846:	ce 01       	movw	r24, r28
    2848:	8d 5e       	subi	r24, 0xED	; 237
    284a:	9e 4f       	sbci	r25, 0xFE	; 254
    284c:	fc 01       	movw	r30, r24
    284e:	e0 0f       	add	r30, r16
    2850:	f1 1f       	adc	r31, r17
    2852:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    2854:	8a e2       	ldi	r24, 0x2A	; 42
    2856:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
				/*extra addition
				 * button ON/C in keyboard clears the password entered without count any wrong trials
				 */
				if(key[i]==13)
    285a:	fe 01       	movw	r30, r28
    285c:	e9 5f       	subi	r30, 0xF9	; 249
    285e:	fe 4f       	sbci	r31, 0xFE	; 254
    2860:	20 81       	ld	r18, Z
    2862:	31 81       	ldd	r19, Z+1	; 0x01
    2864:	ce 01       	movw	r24, r28
    2866:	8d 5e       	subi	r24, 0xED	; 237
    2868:	9e 4f       	sbci	r25, 0xFE	; 254
    286a:	fc 01       	movw	r30, r24
    286c:	e2 0f       	add	r30, r18
    286e:	f3 1f       	adc	r31, r19
    2870:	80 81       	ld	r24, Z
    2872:	8d 30       	cpi	r24, 0x0D	; 13
    2874:	89 f4       	brne	.+34     	; 0x2898 <main+0x1186>
				{
					/*reset the screen*/
					LCD_clearScreen();
    2876:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
					LCD_displayString("enter password ");
    287a:	8d e2       	ldi	r24, 0x2D	; 45
    287c:	91 e0       	ldi	r25, 0x01	; 1
    287e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
					LCD_goToRowColumn(1,0);
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
					i=-1;				/*the counter is set to -1 so the next loop will be resets to zero as i increases in each loop by one*/
    288a:	fe 01       	movw	r30, r28
    288c:	e9 5f       	subi	r30, 0xF9	; 249
    288e:	fe 4f       	sbci	r31, 0xFE	; 254
    2890:	8f ef       	ldi	r24, 0xFF	; 255
    2892:	9f ef       	ldi	r25, 0xFF	; 255
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
    2898:	fe 01       	movw	r30, r28
    289a:	e5 58       	subi	r30, 0x85	; 133
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	aa ef       	ldi	r26, 0xFA	; 250
    28a4:	b3 e4       	ldi	r27, 0x43	; 67
    28a6:	80 83       	st	Z, r24
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	a2 83       	std	Z+2, r26	; 0x02
    28ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ae:	8e 01       	movw	r16, r28
    28b0:	09 58       	subi	r16, 0x89	; 137
    28b2:	1f 4f       	sbci	r17, 0xFF	; 255
    28b4:	fe 01       	movw	r30, r28
    28b6:	e5 58       	subi	r30, 0x85	; 133
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	60 81       	ld	r22, Z
    28bc:	71 81       	ldd	r23, Z+1	; 0x01
    28be:	82 81       	ldd	r24, Z+2	; 0x02
    28c0:	93 81       	ldd	r25, Z+3	; 0x03
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a ef       	ldi	r20, 0xFA	; 250
    28c8:	54 e4       	ldi	r21, 0x44	; 68
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	f8 01       	movw	r30, r16
    28d4:	80 83       	st	Z, r24
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	a2 83       	std	Z+2, r26	; 0x02
    28da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28dc:	fe 01       	movw	r30, r28
    28de:	e9 58       	subi	r30, 0x89	; 137
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	60 81       	ld	r22, Z
    28e4:	71 81       	ldd	r23, Z+1	; 0x01
    28e6:	82 81       	ldd	r24, Z+2	; 0x02
    28e8:	93 81       	ldd	r25, Z+3	; 0x03
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	44 f4       	brge	.+16     	; 0x290a <main+0x11f8>
		__ticks = 1;
    28fa:	fe 01       	movw	r30, r28
    28fc:	eb 58       	subi	r30, 0x8B	; 139
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	80 83       	st	Z, r24
    2908:	64 c0       	rjmp	.+200    	; 0x29d2 <main+0x12c0>
	else if (__tmp > 65535)
    290a:	fe 01       	movw	r30, r28
    290c:	e9 58       	subi	r30, 0x89	; 137
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	60 81       	ld	r22, Z
    2912:	71 81       	ldd	r23, Z+1	; 0x01
    2914:	82 81       	ldd	r24, Z+2	; 0x02
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	3f ef       	ldi	r19, 0xFF	; 255
    291c:	4f e7       	ldi	r20, 0x7F	; 127
    291e:	57 e4       	ldi	r21, 0x47	; 71
    2920:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2924:	18 16       	cp	r1, r24
    2926:	0c f0       	brlt	.+2      	; 0x292a <main+0x1218>
    2928:	43 c0       	rjmp	.+134    	; 0x29b0 <main+0x129e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292a:	fe 01       	movw	r30, r28
    292c:	e5 58       	subi	r30, 0x85	; 133
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e2       	ldi	r20, 0x20	; 32
    293e:	51 e4       	ldi	r21, 0x41	; 65
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	8e 01       	movw	r16, r28
    294a:	0b 58       	subi	r16, 0x8B	; 139
    294c:	1f 4f       	sbci	r17, 0xFF	; 255
    294e:	bc 01       	movw	r22, r24
    2950:	cd 01       	movw	r24, r26
    2952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	f8 01       	movw	r30, r16
    295c:	91 83       	std	Z+1, r25	; 0x01
    295e:	80 83       	st	Z, r24
    2960:	1f c0       	rjmp	.+62     	; 0x29a0 <main+0x128e>
    2962:	fe 01       	movw	r30, r28
    2964:	ed 58       	subi	r30, 0x8D	; 141
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	88 ec       	ldi	r24, 0xC8	; 200
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	80 83       	st	Z, r24
    2970:	fe 01       	movw	r30, r28
    2972:	ed 58       	subi	r30, 0x8D	; 141
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	80 81       	ld	r24, Z
    2978:	91 81       	ldd	r25, Z+1	; 0x01
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <main+0x1268>
    297e:	fe 01       	movw	r30, r28
    2980:	ed 58       	subi	r30, 0x8D	; 141
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	91 83       	std	Z+1, r25	; 0x01
    2986:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2988:	de 01       	movw	r26, r28
    298a:	ab 58       	subi	r26, 0x8B	; 139
    298c:	bf 4f       	sbci	r27, 0xFF	; 255
    298e:	fe 01       	movw	r30, r28
    2990:	eb 58       	subi	r30, 0x8B	; 139
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 81       	ld	r24, Z
    2996:	91 81       	ldd	r25, Z+1	; 0x01
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	11 96       	adiw	r26, 0x01	; 1
    299c:	9c 93       	st	X, r25
    299e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a0:	fe 01       	movw	r30, r28
    29a2:	eb 58       	subi	r30, 0x8B	; 139
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	91 81       	ldd	r25, Z+1	; 0x01
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	d1 f6       	brne	.-76     	; 0x2962 <main+0x1250>
    29ae:	27 c0       	rjmp	.+78     	; 0x29fe <main+0x12ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b0:	8e 01       	movw	r16, r28
    29b2:	0b 58       	subi	r16, 0x8B	; 139
    29b4:	1f 4f       	sbci	r17, 0xFF	; 255
    29b6:	fe 01       	movw	r30, r28
    29b8:	e9 58       	subi	r30, 0x89	; 137
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	f8 01       	movw	r30, r16
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24
    29d2:	de 01       	movw	r26, r28
    29d4:	af 58       	subi	r26, 0x8F	; 143
    29d6:	bf 4f       	sbci	r27, 0xFF	; 255
    29d8:	fe 01       	movw	r30, r28
    29da:	eb 58       	subi	r30, 0x8B	; 139
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	80 81       	ld	r24, Z
    29e0:	91 81       	ldd	r25, Z+1	; 0x01
    29e2:	8d 93       	st	X+, r24
    29e4:	9c 93       	st	X, r25
    29e6:	fe 01       	movw	r30, r28
    29e8:	ef 58       	subi	r30, 0x8F	; 143
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <main+0x12de>
    29f4:	fe 01       	movw	r30, r28
    29f6:	ef 58       	subi	r30, 0x8F	; 143
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	91 83       	std	Z+1, r25	; 0x01
    29fc:	80 83       	st	Z, r24
						 *      else        ---> DC motor will rotate ACW For 15 second               *
						 ******************************************************************************/
			LCD_displayString("enter password");
			LCD_goToRowColumn(1,0);
			/*enters the password*/
			for(int i=0 ;i<5;i++ )
    29fe:	de 01       	movw	r26, r28
    2a00:	a9 5f       	subi	r26, 0xF9	; 249
    2a02:	be 4f       	sbci	r27, 0xFE	; 254
    2a04:	fe 01       	movw	r30, r28
    2a06:	e9 5f       	subi	r30, 0xF9	; 249
    2a08:	fe 4f       	sbci	r31, 0xFE	; 254
    2a0a:	80 81       	ld	r24, Z
    2a0c:	91 81       	ldd	r25, Z+1	; 0x01
    2a0e:	01 96       	adiw	r24, 0x01	; 1
    2a10:	11 96       	adiw	r26, 0x01	; 1
    2a12:	9c 93       	st	X, r25
    2a14:	8e 93       	st	-X, r24
    2a16:	fe 01       	movw	r30, r28
    2a18:	e9 5f       	subi	r30, 0xF9	; 249
    2a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1c:	80 81       	ld	r24, Z
    2a1e:	91 81       	ldd	r25, Z+1	; 0x01
    2a20:	85 30       	cpi	r24, 0x05	; 5
    2a22:	91 05       	cpc	r25, r1
    2a24:	0c f4       	brge	.+2      	; 0x2a28 <main+0x1316>
    2a26:	07 cf       	rjmp	.-498    	; 0x2836 <main+0x1124>
					i=-1;				/*the counter is set to -1 so the next loop will be resets to zero as i increases in each loop by one*/
				}
				_delay_ms(500); /* Press time */
			}

			LCD_clearScreen();
    2a28:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
			/*repeats entering the key until user presses = sign */
			do
			{
				LCD_displayString("press = to send!");//Statements
    2a2c:	85 eb       	ldi	r24, 0xB5	; 181
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
				send_key=KeyPad_getPressedKey();
    2a34:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2a38:	fe 01       	movw	r30, r28
    2a3a:	ef 5e       	subi	r30, 0xEF	; 239
    2a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a3e:	80 83       	st	Z, r24
			}while(send_key!= '=');
    2a40:	fe 01       	movw	r30, r28
    2a42:	ef 5e       	subi	r30, 0xEF	; 239
    2a44:	fe 4f       	sbci	r31, 0xFE	; 254
    2a46:	80 81       	ld	r24, Z
    2a48:	8d 33       	cpi	r24, 0x3D	; 61
    2a4a:	81 f7       	brne	.-32     	; 0x2a2c <main+0x131a>

			/*sends the password to MCU2*/
			for (int i=0;i<5;i++)
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	eb 5f       	subi	r30, 0xFB	; 251
    2a50:	fe 4f       	sbci	r31, 0xFE	; 254
    2a52:	11 82       	std	Z+1, r1	; 0x01
    2a54:	10 82       	st	Z, r1
    2a56:	1a c0       	rjmp	.+52     	; 0x2a8c <main+0x137a>
			{
				UART_sendByte(key[i]);
    2a58:	fe 01       	movw	r30, r28
    2a5a:	eb 5f       	subi	r30, 0xFB	; 251
    2a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5e:	20 81       	ld	r18, Z
    2a60:	31 81       	ldd	r19, Z+1	; 0x01
    2a62:	ce 01       	movw	r24, r28
    2a64:	8d 5e       	subi	r24, 0xED	; 237
    2a66:	9e 4f       	sbci	r25, 0xFE	; 254
    2a68:	fc 01       	movw	r30, r24
    2a6a:	e2 0f       	add	r30, r18
    2a6c:	f3 1f       	adc	r31, r19
    2a6e:	80 81       	ld	r24, Z
    2a70:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <UART_sendByte>
				LCD_displayString("press = to send!");//Statements
				send_key=KeyPad_getPressedKey();
			}while(send_key!= '=');

			/*sends the password to MCU2*/
			for (int i=0;i<5;i++)
    2a74:	de 01       	movw	r26, r28
    2a76:	ab 5f       	subi	r26, 0xFB	; 251
    2a78:	be 4f       	sbci	r27, 0xFE	; 254
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	eb 5f       	subi	r30, 0xFB	; 251
    2a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a80:	80 81       	ld	r24, Z
    2a82:	91 81       	ldd	r25, Z+1	; 0x01
    2a84:	01 96       	adiw	r24, 0x01	; 1
    2a86:	11 96       	adiw	r26, 0x01	; 1
    2a88:	9c 93       	st	X, r25
    2a8a:	8e 93       	st	-X, r24
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	eb 5f       	subi	r30, 0xFB	; 251
    2a90:	fe 4f       	sbci	r31, 0xFE	; 254
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	85 30       	cpi	r24, 0x05	; 5
    2a98:	91 05       	cpc	r25, r1
    2a9a:	f4 f2       	brlt	.-68     	; 0x2a58 <main+0x1346>
			{
				UART_sendByte(key[i]);
			}
			LCD_clearScreen();
    2a9c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>


			/*receive byte checks the password with the saved in EEPROM*/
			check=UART_recieveByte();
    2aa0:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	ee 5e       	subi	r30, 0xEE	; 238
    2aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    2aaa:	80 83       	st	Z, r24


			if(check==0)
    2aac:	fe 01       	movw	r30, r28
    2aae:	ee 5e       	subi	r30, 0xEE	; 238
    2ab0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab2:	80 81       	ld	r24, Z
    2ab4:	88 23       	and	r24, r24
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <main+0x13a8>
    2ab8:	bf c0       	rjmp	.+382    	; 0x2c38 <main+0x1526>
			{
				/*in case the user didn't enter the correct password the lcd displays unmatched and receive step the code will goto*/
				LCD_displayString("unmatched");
    2aba:	8d e3       	ldi	r24, 0x3D	; 61
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e3 59       	subi	r30, 0x93	; 147
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	aa e7       	ldi	r26, 0x7A	; 122
    2ace:	b4 e4       	ldi	r27, 0x44	; 68
    2ad0:	80 83       	st	Z, r24
    2ad2:	91 83       	std	Z+1, r25	; 0x01
    2ad4:	a2 83       	std	Z+2, r26	; 0x02
    2ad6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad8:	8e 01       	movw	r16, r28
    2ada:	07 59       	subi	r16, 0x97	; 151
    2adc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e3 59       	subi	r30, 0x93	; 147
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	60 81       	ld	r22, Z
    2ae6:	71 81       	ldd	r23, Z+1	; 0x01
    2ae8:	82 81       	ldd	r24, Z+2	; 0x02
    2aea:	93 81       	ldd	r25, Z+3	; 0x03
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	4a ef       	ldi	r20, 0xFA	; 250
    2af2:	54 e4       	ldi	r21, 0x44	; 68
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	f8 01       	movw	r30, r16
    2afe:	80 83       	st	Z, r24
    2b00:	91 83       	std	Z+1, r25	; 0x01
    2b02:	a2 83       	std	Z+2, r26	; 0x02
    2b04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b06:	fe 01       	movw	r30, r28
    2b08:	e7 59       	subi	r30, 0x97	; 151
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	60 81       	ld	r22, Z
    2b0e:	71 81       	ldd	r23, Z+1	; 0x01
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	93 81       	ldd	r25, Z+3	; 0x03
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e8       	ldi	r20, 0x80	; 128
    2b1a:	5f e3       	ldi	r21, 0x3F	; 63
    2b1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b20:	88 23       	and	r24, r24
    2b22:	44 f4       	brge	.+16     	; 0x2b34 <main+0x1422>
		__ticks = 1;
    2b24:	fe 01       	movw	r30, r28
    2b26:	e9 59       	subi	r30, 0x99	; 153
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	91 83       	std	Z+1, r25	; 0x01
    2b30:	80 83       	st	Z, r24
    2b32:	64 c0       	rjmp	.+200    	; 0x2bfc <main+0x14ea>
	else if (__tmp > 65535)
    2b34:	fe 01       	movw	r30, r28
    2b36:	e7 59       	subi	r30, 0x97	; 151
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	60 81       	ld	r22, Z
    2b3c:	71 81       	ldd	r23, Z+1	; 0x01
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	93 81       	ldd	r25, Z+3	; 0x03
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	3f ef       	ldi	r19, 0xFF	; 255
    2b46:	4f e7       	ldi	r20, 0x7F	; 127
    2b48:	57 e4       	ldi	r21, 0x47	; 71
    2b4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b4e:	18 16       	cp	r1, r24
    2b50:	0c f0       	brlt	.+2      	; 0x2b54 <main+0x1442>
    2b52:	43 c0       	rjmp	.+134    	; 0x2bda <main+0x14c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b54:	fe 01       	movw	r30, r28
    2b56:	e3 59       	subi	r30, 0x93	; 147
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	60 81       	ld	r22, Z
    2b5c:	71 81       	ldd	r23, Z+1	; 0x01
    2b5e:	82 81       	ldd	r24, Z+2	; 0x02
    2b60:	93 81       	ldd	r25, Z+3	; 0x03
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e2       	ldi	r20, 0x20	; 32
    2b68:	51 e4       	ldi	r21, 0x41	; 65
    2b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	8e 01       	movw	r16, r28
    2b74:	09 59       	subi	r16, 0x99	; 153
    2b76:	1f 4f       	sbci	r17, 0xFF	; 255
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	f8 01       	movw	r30, r16
    2b86:	91 83       	std	Z+1, r25	; 0x01
    2b88:	80 83       	st	Z, r24
    2b8a:	1f c0       	rjmp	.+62     	; 0x2bca <main+0x14b8>
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	eb 59       	subi	r30, 0x9B	; 155
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	88 ec       	ldi	r24, 0xC8	; 200
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	80 83       	st	Z, r24
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	eb 59       	subi	r30, 0x9B	; 155
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	80 81       	ld	r24, Z
    2ba2:	91 81       	ldd	r25, Z+1	; 0x01
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <main+0x1492>
    2ba8:	fe 01       	movw	r30, r28
    2baa:	eb 59       	subi	r30, 0x9B	; 155
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	91 83       	std	Z+1, r25	; 0x01
    2bb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb2:	de 01       	movw	r26, r28
    2bb4:	a9 59       	subi	r26, 0x99	; 153
    2bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb8:	fe 01       	movw	r30, r28
    2bba:	e9 59       	subi	r30, 0x99	; 153
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	91 81       	ldd	r25, Z+1	; 0x01
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	11 96       	adiw	r26, 0x01	; 1
    2bc6:	9c 93       	st	X, r25
    2bc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e9 59       	subi	r30, 0x99	; 153
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	d1 f6       	brne	.-76     	; 0x2b8c <main+0x147a>
    2bd8:	27 c0       	rjmp	.+78     	; 0x2c28 <main+0x1516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bda:	8e 01       	movw	r16, r28
    2bdc:	09 59       	subi	r16, 0x99	; 153
    2bde:	1f 4f       	sbci	r17, 0xFF	; 255
    2be0:	fe 01       	movw	r30, r28
    2be2:	e7 59       	subi	r30, 0x97	; 151
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	60 81       	ld	r22, Z
    2be8:	71 81       	ldd	r23, Z+1	; 0x01
    2bea:	82 81       	ldd	r24, Z+2	; 0x02
    2bec:	93 81       	ldd	r25, Z+3	; 0x03
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	f8 01       	movw	r30, r16
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	80 83       	st	Z, r24
    2bfc:	de 01       	movw	r26, r28
    2bfe:	ad 59       	subi	r26, 0x9D	; 157
    2c00:	bf 4f       	sbci	r27, 0xFF	; 255
    2c02:	fe 01       	movw	r30, r28
    2c04:	e9 59       	subi	r30, 0x99	; 153
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	80 81       	ld	r24, Z
    2c0a:	91 81       	ldd	r25, Z+1	; 0x01
    2c0c:	8d 93       	st	X+, r24
    2c0e:	9c 93       	st	X, r25
    2c10:	fe 01       	movw	r30, r28
    2c12:	ed 59       	subi	r30, 0x9D	; 157
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	80 81       	ld	r24, Z
    2c18:	91 81       	ldd	r25, Z+1	; 0x01
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <main+0x1508>
    2c1e:	fe 01       	movw	r30, r28
    2c20:	ed 59       	subi	r30, 0x9D	; 157
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_clearScreen();
    2c28:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
				g_step=UART_recieveByte();
    2c2c:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    2c30:	80 93 b7 01 	sts	0x01B7, r24
    2c34:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
			}
			else if(check==1)
    2c38:	fe 01       	movw	r30, r28
    2c3a:	ee 5e       	subi	r30, 0xEE	; 238
    2c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3e:	80 81       	ld	r24, Z
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	11 f0       	breq	.+4      	; 0x2c48 <main+0x1536>
    2c44:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
			{
				/*in case the password matches displays matched in LCD and counts 15 seconds while displaying that the door is opening*/
				LCD_displayString("matched");
    2c48:	87 e4       	ldi	r24, 0x47	; 71
    2c4a:	91 e0       	ldi	r25, 0x01	; 1
    2c4c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    2c50:	fe 01       	movw	r30, r28
    2c52:	e1 5a       	subi	r30, 0xA1	; 161
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	aa e7       	ldi	r26, 0x7A	; 122
    2c5c:	b4 e4       	ldi	r27, 0x44	; 68
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c66:	8e 01       	movw	r16, r28
    2c68:	05 5a       	subi	r16, 0xA5	; 165
    2c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	e1 5a       	subi	r30, 0xA1	; 161
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	60 81       	ld	r22, Z
    2c74:	71 81       	ldd	r23, Z+1	; 0x01
    2c76:	82 81       	ldd	r24, Z+2	; 0x02
    2c78:	93 81       	ldd	r25, Z+3	; 0x03
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	4a ef       	ldi	r20, 0xFA	; 250
    2c80:	54 e4       	ldi	r21, 0x44	; 68
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	80 83       	st	Z, r24
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	a2 83       	std	Z+2, r26	; 0x02
    2c92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c94:	fe 01       	movw	r30, r28
    2c96:	e5 5a       	subi	r30, 0xA5	; 165
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	93 81       	ldd	r25, Z+3	; 0x03
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e8       	ldi	r20, 0x80	; 128
    2ca8:	5f e3       	ldi	r21, 0x3F	; 63
    2caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cae:	88 23       	and	r24, r24
    2cb0:	44 f4       	brge	.+16     	; 0x2cc2 <main+0x15b0>
		__ticks = 1;
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	e7 5a       	subi	r30, 0xA7	; 167
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	80 83       	st	Z, r24
    2cc0:	64 c0       	rjmp	.+200    	; 0x2d8a <main+0x1678>
	else if (__tmp > 65535)
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e5 5a       	subi	r30, 0xA5	; 165
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	3f ef       	ldi	r19, 0xFF	; 255
    2cd4:	4f e7       	ldi	r20, 0x7F	; 127
    2cd6:	57 e4       	ldi	r21, 0x47	; 71
    2cd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cdc:	18 16       	cp	r1, r24
    2cde:	0c f0       	brlt	.+2      	; 0x2ce2 <main+0x15d0>
    2ce0:	43 c0       	rjmp	.+134    	; 0x2d68 <main+0x1656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	e1 5a       	subi	r30, 0xA1	; 161
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	60 81       	ld	r22, Z
    2cea:	71 81       	ldd	r23, Z+1	; 0x01
    2cec:	82 81       	ldd	r24, Z+2	; 0x02
    2cee:	93 81       	ldd	r25, Z+3	; 0x03
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e2       	ldi	r20, 0x20	; 32
    2cf6:	51 e4       	ldi	r21, 0x41	; 65
    2cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	8e 01       	movw	r16, r28
    2d02:	07 5a       	subi	r16, 0xA7	; 167
    2d04:	1f 4f       	sbci	r17, 0xFF	; 255
    2d06:	bc 01       	movw	r22, r24
    2d08:	cd 01       	movw	r24, r26
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	f8 01       	movw	r30, r16
    2d14:	91 83       	std	Z+1, r25	; 0x01
    2d16:	80 83       	st	Z, r24
    2d18:	1f c0       	rjmp	.+62     	; 0x2d58 <main+0x1646>
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	e9 5a       	subi	r30, 0xA9	; 169
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	88 ec       	ldi	r24, 0xC8	; 200
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	80 83       	st	Z, r24
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e9 5a       	subi	r30, 0xA9	; 169
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 81       	ld	r24, Z
    2d30:	91 81       	ldd	r25, Z+1	; 0x01
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <main+0x1620>
    2d36:	fe 01       	movw	r30, r28
    2d38:	e9 5a       	subi	r30, 0xA9	; 169
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d40:	de 01       	movw	r26, r28
    2d42:	a7 5a       	subi	r26, 0xA7	; 167
    2d44:	bf 4f       	sbci	r27, 0xFF	; 255
    2d46:	fe 01       	movw	r30, r28
    2d48:	e7 5a       	subi	r30, 0xA7	; 167
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	91 81       	ldd	r25, Z+1	; 0x01
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	11 96       	adiw	r26, 0x01	; 1
    2d54:	9c 93       	st	X, r25
    2d56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e7 5a       	subi	r30, 0xA7	; 167
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	d1 f6       	brne	.-76     	; 0x2d1a <main+0x1608>
    2d66:	27 c0       	rjmp	.+78     	; 0x2db6 <main+0x16a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d68:	8e 01       	movw	r16, r28
    2d6a:	07 5a       	subi	r16, 0xA7	; 167
    2d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e5 5a       	subi	r30, 0xA5	; 165
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	f8 01       	movw	r30, r16
    2d86:	91 83       	std	Z+1, r25	; 0x01
    2d88:	80 83       	st	Z, r24
    2d8a:	de 01       	movw	r26, r28
    2d8c:	ab 5a       	subi	r26, 0xAB	; 171
    2d8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d90:	fe 01       	movw	r30, r28
    2d92:	e7 5a       	subi	r30, 0xA7	; 167
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	80 81       	ld	r24, Z
    2d98:	91 81       	ldd	r25, Z+1	; 0x01
    2d9a:	8d 93       	st	X+, r24
    2d9c:	9c 93       	st	X, r25
    2d9e:	fe 01       	movw	r30, r28
    2da0:	eb 5a       	subi	r30, 0xAB	; 171
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <main+0x1696>
    2dac:	fe 01       	movw	r30, r28
    2dae:	eb 5a       	subi	r30, 0xAB	; 171
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_clearScreen();
    2db6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
				while(UART_recieveByte()!=M2_READY);		/*waits until MCU2 is ready*/
    2dba:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    2dbe:	80 31       	cpi	r24, 0x10	; 16
    2dc0:	e1 f7       	brne	.-8      	; 0x2dba <main+0x16a8>
				g_seconds_needed=15;						/*set the required time*/
    2dc2:	8f e0       	ldi	r24, 0x0F	; 15
    2dc4:	80 93 b6 01 	sts	0x01B6, r24
				SREG |= (1<<7);								/*enable I-bit*/
    2dc8:	af e5       	ldi	r26, 0x5F	; 95
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	ef e5       	ldi	r30, 0x5F	; 95
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	80 68       	ori	r24, 0x80	; 128
    2dd4:	8c 93       	st	X, r24
				Set_callBack(ISR_COUNT);					/* Set the Call back function pointer in the timer0 driver*/
    2dd6:	85 e6       	ldi	r24, 0x65	; 101
    2dd8:	9b e0       	ldi	r25, 0x0B	; 11
    2dda:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <Set_callBack>
				Timer0_ConfigType timer0_config = {CTC,F_CPU_1024,245};	/*create the configuration parameters of timer0*/
    2dde:	ce 01       	movw	r24, r28
    2de0:	85 5e       	subi	r24, 0xE5	; 229
    2de2:	9e 4f       	sbci	r25, 0xFE	; 254
    2de4:	cd 5d       	subi	r28, 0xDD	; 221
    2de6:	de 4f       	sbci	r29, 0xFE	; 254
    2de8:	99 83       	std	Y+1, r25	; 0x01
    2dea:	88 83       	st	Y, r24
    2dec:	c3 52       	subi	r28, 0x23	; 35
    2dee:	d1 40       	sbci	r29, 0x01	; 1
    2df0:	20 eb       	ldi	r18, 0xB0	; 176
    2df2:	31 e0       	ldi	r19, 0x01	; 1
    2df4:	cb 5d       	subi	r28, 0xDB	; 219
    2df6:	de 4f       	sbci	r29, 0xFE	; 254
    2df8:	39 83       	std	Y+1, r19	; 0x01
    2dfa:	28 83       	st	Y, r18
    2dfc:	c5 52       	subi	r28, 0x25	; 37
    2dfe:	d1 40       	sbci	r29, 0x01	; 1
    2e00:	33 e0       	ldi	r19, 0x03	; 3
    2e02:	c9 5d       	subi	r28, 0xD9	; 217
    2e04:	de 4f       	sbci	r29, 0xFE	; 254
    2e06:	38 83       	st	Y, r19
    2e08:	c7 52       	subi	r28, 0x27	; 39
    2e0a:	d1 40       	sbci	r29, 0x01	; 1
    2e0c:	cb 5d       	subi	r28, 0xDB	; 219
    2e0e:	de 4f       	sbci	r29, 0xFE	; 254
    2e10:	e8 81       	ld	r30, Y
    2e12:	f9 81       	ldd	r31, Y+1	; 0x01
    2e14:	c5 52       	subi	r28, 0x25	; 37
    2e16:	d1 40       	sbci	r29, 0x01	; 1
    2e18:	00 80       	ld	r0, Z
    2e1a:	cb 5d       	subi	r28, 0xDB	; 219
    2e1c:	de 4f       	sbci	r29, 0xFE	; 254
    2e1e:	28 81       	ld	r18, Y
    2e20:	39 81       	ldd	r19, Y+1	; 0x01
    2e22:	c5 52       	subi	r28, 0x25	; 37
    2e24:	d1 40       	sbci	r29, 0x01	; 1
    2e26:	2f 5f       	subi	r18, 0xFF	; 255
    2e28:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2a:	cb 5d       	subi	r28, 0xDB	; 219
    2e2c:	de 4f       	sbci	r29, 0xFE	; 254
    2e2e:	39 83       	std	Y+1, r19	; 0x01
    2e30:	28 83       	st	Y, r18
    2e32:	c5 52       	subi	r28, 0x25	; 37
    2e34:	d1 40       	sbci	r29, 0x01	; 1
    2e36:	cd 5d       	subi	r28, 0xDD	; 221
    2e38:	de 4f       	sbci	r29, 0xFE	; 254
    2e3a:	e8 81       	ld	r30, Y
    2e3c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e3e:	c3 52       	subi	r28, 0x23	; 35
    2e40:	d1 40       	sbci	r29, 0x01	; 1
    2e42:	00 82       	st	Z, r0
    2e44:	cd 5d       	subi	r28, 0xDD	; 221
    2e46:	de 4f       	sbci	r29, 0xFE	; 254
    2e48:	28 81       	ld	r18, Y
    2e4a:	39 81       	ldd	r19, Y+1	; 0x01
    2e4c:	c3 52       	subi	r28, 0x23	; 35
    2e4e:	d1 40       	sbci	r29, 0x01	; 1
    2e50:	2f 5f       	subi	r18, 0xFF	; 255
    2e52:	3f 4f       	sbci	r19, 0xFF	; 255
    2e54:	cd 5d       	subi	r28, 0xDD	; 221
    2e56:	de 4f       	sbci	r29, 0xFE	; 254
    2e58:	39 83       	std	Y+1, r19	; 0x01
    2e5a:	28 83       	st	Y, r18
    2e5c:	c3 52       	subi	r28, 0x23	; 35
    2e5e:	d1 40       	sbci	r29, 0x01	; 1
    2e60:	c9 5d       	subi	r28, 0xD9	; 217
    2e62:	de 4f       	sbci	r29, 0xFE	; 254
    2e64:	38 81       	ld	r19, Y
    2e66:	c7 52       	subi	r28, 0x27	; 39
    2e68:	d1 40       	sbci	r29, 0x01	; 1
    2e6a:	31 50       	subi	r19, 0x01	; 1
    2e6c:	c9 5d       	subi	r28, 0xD9	; 217
    2e6e:	de 4f       	sbci	r29, 0xFE	; 254
    2e70:	38 83       	st	Y, r19
    2e72:	c7 52       	subi	r28, 0x27	; 39
    2e74:	d1 40       	sbci	r29, 0x01	; 1
    2e76:	c9 5d       	subi	r28, 0xD9	; 217
    2e78:	de 4f       	sbci	r29, 0xFE	; 254
    2e7a:	88 81       	ld	r24, Y
    2e7c:	c7 52       	subi	r28, 0x27	; 39
    2e7e:	d1 40       	sbci	r29, 0x01	; 1
    2e80:	88 23       	and	r24, r24
    2e82:	21 f6       	brne	.-120    	; 0x2e0c <main+0x16fa>
				LCD_displayString("door is opening!");			/*displays that the door is opening*/
    2e84:	8f e4       	ldi	r24, 0x4F	; 79
    2e86:	91 e0       	ldi	r25, 0x01	; 1
    2e88:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
				Timer0_init(&timer0_config);		/*initialize the timer with selected configurations*/
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	85 5e       	subi	r24, 0xE5	; 229
    2e90:	9e 4f       	sbci	r25, 0xFE	; 254
    2e92:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <Timer0_init>
				/*this line prevents the code to repeat step3 and get stuck in UART receiving byte
				 * the code will wait in infinite loop until the counter finishes and reset the step to main
				 */
				while(g_step!=2);
    2e96:	80 91 b7 01 	lds	r24, 0x01B7
    2e9a:	82 30       	cpi	r24, 0x02	; 2
    2e9c:	e1 f7       	brne	.-8      	; 0x2e96 <main+0x1784>
    2e9e:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
			            /************************ step 4 **************************
						 *                   CHANGE PASSWORD                      *
						 *                Please enter old password               *
						 *                     *****                              *
						 **********************************************************/
			LCD_displayString("Enter Password");
    2ea2:	80 e6       	ldi	r24, 0x60	; 96
    2ea4:	91 e0       	ldi	r25, 0x01	; 1
    2ea6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	60 e0       	ldi	r22, 0x00	; 0
    2eae:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
			for(int i=0 ;i<5;i++ )
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	ed 5f       	subi	r30, 0xFD	; 253
    2eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb8:	11 82       	std	Z+1, r1	; 0x01
    2eba:	10 82       	st	Z, r1
    2ebc:	f0 c0       	rjmp	.+480    	; 0x309e <main+0x198c>
			{
				/* if any switch pressed for more than 500 ms it counts more than one press */
				key[i] = KeyPad_getPressedKey(); /* get the pressed key number */
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	ed 5f       	subi	r30, 0xFD	; 253
    2ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec4:	00 81       	ld	r16, Z
    2ec6:	11 81       	ldd	r17, Z+1	; 0x01
    2ec8:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2ecc:	28 2f       	mov	r18, r24
    2ece:	ce 01       	movw	r24, r28
    2ed0:	8d 5e       	subi	r24, 0xED	; 237
    2ed2:	9e 4f       	sbci	r25, 0xFE	; 254
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	e0 0f       	add	r30, r16
    2ed8:	f1 1f       	adc	r31, r17
    2eda:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    2edc:	8a e2       	ldi	r24, 0x2A	; 42
    2ede:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
				/*extra addition
				 * button ON/C in keyboard clears the password entered without count any wrong trials
				 */
				if(key[i]==13)
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	ed 5f       	subi	r30, 0xFD	; 253
    2ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee8:	20 81       	ld	r18, Z
    2eea:	31 81       	ldd	r19, Z+1	; 0x01
    2eec:	ce 01       	movw	r24, r28
    2eee:	8d 5e       	subi	r24, 0xED	; 237
    2ef0:	9e 4f       	sbci	r25, 0xFE	; 254
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	e2 0f       	add	r30, r18
    2ef6:	f3 1f       	adc	r31, r19
    2ef8:	80 81       	ld	r24, Z
    2efa:	8d 30       	cpi	r24, 0x0D	; 13
    2efc:	89 f4       	brne	.+34     	; 0x2f20 <main+0x180e>
				{
					/*reset the LCD screen*/
					LCD_clearScreen();
    2efe:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
					LCD_displayString("Enter Password ");
    2f02:	8f e6       	ldi	r24, 0x6F	; 111
    2f04:	91 e0       	ldi	r25, 0x01	; 1
    2f06:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
					LCD_goToRowColumn(1,0);
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
    2f0e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
					i=-1;							/*the counter is set to -1 so the next loop will be resets to zero as i increases in each loop by one*/
    2f12:	fe 01       	movw	r30, r28
    2f14:	ed 5f       	subi	r30, 0xFD	; 253
    2f16:	fe 4f       	sbci	r31, 0xFE	; 254
    2f18:	8f ef       	ldi	r24, 0xFF	; 255
    2f1a:	9f ef       	ldi	r25, 0xFF	; 255
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	80 83       	st	Z, r24
    2f20:	fe 01       	movw	r30, r28
    2f22:	ef 5a       	subi	r30, 0xAF	; 175
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	aa ef       	ldi	r26, 0xFA	; 250
    2f2c:	b3 e4       	ldi	r27, 0x43	; 67
    2f2e:	80 83       	st	Z, r24
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	a2 83       	std	Z+2, r26	; 0x02
    2f34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f36:	8e 01       	movw	r16, r28
    2f38:	03 5b       	subi	r16, 0xB3	; 179
    2f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	ef 5a       	subi	r30, 0xAF	; 175
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	60 81       	ld	r22, Z
    2f44:	71 81       	ldd	r23, Z+1	; 0x01
    2f46:	82 81       	ldd	r24, Z+2	; 0x02
    2f48:	93 81       	ldd	r25, Z+3	; 0x03
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	4a ef       	ldi	r20, 0xFA	; 250
    2f50:	54 e4       	ldi	r21, 0x44	; 68
    2f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	f8 01       	movw	r30, r16
    2f5c:	80 83       	st	Z, r24
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	a2 83       	std	Z+2, r26	; 0x02
    2f62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f64:	fe 01       	movw	r30, r28
    2f66:	e3 5b       	subi	r30, 0xB3	; 179
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	60 81       	ld	r22, Z
    2f6c:	71 81       	ldd	r23, Z+1	; 0x01
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e8       	ldi	r20, 0x80	; 128
    2f78:	5f e3       	ldi	r21, 0x3F	; 63
    2f7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f7e:	88 23       	and	r24, r24
    2f80:	44 f4       	brge	.+16     	; 0x2f92 <main+0x1880>
		__ticks = 1;
    2f82:	fe 01       	movw	r30, r28
    2f84:	e5 5b       	subi	r30, 0xB5	; 181
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	91 83       	std	Z+1, r25	; 0x01
    2f8e:	80 83       	st	Z, r24
    2f90:	64 c0       	rjmp	.+200    	; 0x305a <main+0x1948>
	else if (__tmp > 65535)
    2f92:	fe 01       	movw	r30, r28
    2f94:	e3 5b       	subi	r30, 0xB3	; 179
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	60 81       	ld	r22, Z
    2f9a:	71 81       	ldd	r23, Z+1	; 0x01
    2f9c:	82 81       	ldd	r24, Z+2	; 0x02
    2f9e:	93 81       	ldd	r25, Z+3	; 0x03
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	3f ef       	ldi	r19, 0xFF	; 255
    2fa4:	4f e7       	ldi	r20, 0x7F	; 127
    2fa6:	57 e4       	ldi	r21, 0x47	; 71
    2fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	0c f0       	brlt	.+2      	; 0x2fb2 <main+0x18a0>
    2fb0:	43 c0       	rjmp	.+134    	; 0x3038 <main+0x1926>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	ef 5a       	subi	r30, 0xAF	; 175
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	60 81       	ld	r22, Z
    2fba:	71 81       	ldd	r23, Z+1	; 0x01
    2fbc:	82 81       	ldd	r24, Z+2	; 0x02
    2fbe:	93 81       	ldd	r25, Z+3	; 0x03
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e2       	ldi	r20, 0x20	; 32
    2fc6:	51 e4       	ldi	r21, 0x41	; 65
    2fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	8e 01       	movw	r16, r28
    2fd2:	05 5b       	subi	r16, 0xB5	; 181
    2fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	f8 01       	movw	r30, r16
    2fe4:	91 83       	std	Z+1, r25	; 0x01
    2fe6:	80 83       	st	Z, r24
    2fe8:	1f c0       	rjmp	.+62     	; 0x3028 <main+0x1916>
    2fea:	fe 01       	movw	r30, r28
    2fec:	e7 5b       	subi	r30, 0xB7	; 183
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	88 ec       	ldi	r24, 0xC8	; 200
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	80 83       	st	Z, r24
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	e7 5b       	subi	r30, 0xB7	; 183
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 81       	ld	r24, Z
    3000:	91 81       	ldd	r25, Z+1	; 0x01
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <main+0x18f0>
    3006:	fe 01       	movw	r30, r28
    3008:	e7 5b       	subi	r30, 0xB7	; 183
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3010:	de 01       	movw	r26, r28
    3012:	a5 5b       	subi	r26, 0xB5	; 181
    3014:	bf 4f       	sbci	r27, 0xFF	; 255
    3016:	fe 01       	movw	r30, r28
    3018:	e5 5b       	subi	r30, 0xB5	; 181
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	80 81       	ld	r24, Z
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	11 96       	adiw	r26, 0x01	; 1
    3024:	9c 93       	st	X, r25
    3026:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3028:	fe 01       	movw	r30, r28
    302a:	e5 5b       	subi	r30, 0xB5	; 181
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 81       	ld	r24, Z
    3030:	91 81       	ldd	r25, Z+1	; 0x01
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	d1 f6       	brne	.-76     	; 0x2fea <main+0x18d8>
    3036:	27 c0       	rjmp	.+78     	; 0x3086 <main+0x1974>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3038:	8e 01       	movw	r16, r28
    303a:	05 5b       	subi	r16, 0xB5	; 181
    303c:	1f 4f       	sbci	r17, 0xFF	; 255
    303e:	fe 01       	movw	r30, r28
    3040:	e3 5b       	subi	r30, 0xB3	; 179
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	60 81       	ld	r22, Z
    3046:	71 81       	ldd	r23, Z+1	; 0x01
    3048:	82 81       	ldd	r24, Z+2	; 0x02
    304a:	93 81       	ldd	r25, Z+3	; 0x03
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	f8 01       	movw	r30, r16
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	80 83       	st	Z, r24
    305a:	de 01       	movw	r26, r28
    305c:	a9 5b       	subi	r26, 0xB9	; 185
    305e:	bf 4f       	sbci	r27, 0xFF	; 255
    3060:	fe 01       	movw	r30, r28
    3062:	e5 5b       	subi	r30, 0xB5	; 181
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	8d 93       	st	X+, r24
    306c:	9c 93       	st	X, r25
    306e:	fe 01       	movw	r30, r28
    3070:	e9 5b       	subi	r30, 0xB9	; 185
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 81       	ld	r24, Z
    3076:	91 81       	ldd	r25, Z+1	; 0x01
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <main+0x1966>
    307c:	fe 01       	movw	r30, r28
    307e:	e9 5b       	subi	r30, 0xB9	; 185
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	91 83       	std	Z+1, r25	; 0x01
    3084:	80 83       	st	Z, r24
						 *                Please enter old password               *
						 *                     *****                              *
						 **********************************************************/
			LCD_displayString("Enter Password");
			LCD_goToRowColumn(1,0);
			for(int i=0 ;i<5;i++ )
    3086:	de 01       	movw	r26, r28
    3088:	ad 5f       	subi	r26, 0xFD	; 253
    308a:	be 4f       	sbci	r27, 0xFE	; 254
    308c:	fe 01       	movw	r30, r28
    308e:	ed 5f       	subi	r30, 0xFD	; 253
    3090:	fe 4f       	sbci	r31, 0xFE	; 254
    3092:	80 81       	ld	r24, Z
    3094:	91 81       	ldd	r25, Z+1	; 0x01
    3096:	01 96       	adiw	r24, 0x01	; 1
    3098:	11 96       	adiw	r26, 0x01	; 1
    309a:	9c 93       	st	X, r25
    309c:	8e 93       	st	-X, r24
    309e:	fe 01       	movw	r30, r28
    30a0:	ed 5f       	subi	r30, 0xFD	; 253
    30a2:	fe 4f       	sbci	r31, 0xFE	; 254
    30a4:	80 81       	ld	r24, Z
    30a6:	91 81       	ldd	r25, Z+1	; 0x01
    30a8:	85 30       	cpi	r24, 0x05	; 5
    30aa:	91 05       	cpc	r25, r1
    30ac:	0c f4       	brge	.+2      	; 0x30b0 <main+0x199e>
    30ae:	07 cf       	rjmp	.-498    	; 0x2ebe <main+0x17ac>
					i=-1;							/*the counter is set to -1 so the next loop will be resets to zero as i increases in each loop by one*/
				}
				_delay_ms(500); /* Press time */
			}

			LCD_clearScreen();
    30b0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>

			/*repeats entering the key until user presses = sign */
			do
			{
				LCD_displayString("press = to send!");//Statements
    30b4:	85 eb       	ldi	r24, 0xB5	; 181
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
				send_key=KeyPad_getPressedKey();
    30bc:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    30c0:	fe 01       	movw	r30, r28
    30c2:	ef 5e       	subi	r30, 0xEF	; 239
    30c4:	fe 4f       	sbci	r31, 0xFE	; 254
    30c6:	80 83       	st	Z, r24
			}while(send_key!= '=');
    30c8:	fe 01       	movw	r30, r28
    30ca:	ef 5e       	subi	r30, 0xEF	; 239
    30cc:	fe 4f       	sbci	r31, 0xFE	; 254
    30ce:	80 81       	ld	r24, Z
    30d0:	8d 33       	cpi	r24, 0x3D	; 61
    30d2:	81 f7       	brne	.-32     	; 0x30b4 <main+0x19a2>

			/*send password and receives the check from MCU2*/
			for (int i=0;i<5;i++){
    30d4:	fe 01       	movw	r30, r28
    30d6:	ef 5f       	subi	r30, 0xFF	; 255
    30d8:	fe 4f       	sbci	r31, 0xFE	; 254
    30da:	11 82       	std	Z+1, r1	; 0x01
    30dc:	10 82       	st	Z, r1
    30de:	1a c0       	rjmp	.+52     	; 0x3114 <main+0x1a02>
				UART_sendByte(key[i]);
    30e0:	fe 01       	movw	r30, r28
    30e2:	ef 5f       	subi	r30, 0xFF	; 255
    30e4:	fe 4f       	sbci	r31, 0xFE	; 254
    30e6:	20 81       	ld	r18, Z
    30e8:	31 81       	ldd	r19, Z+1	; 0x01
    30ea:	ce 01       	movw	r24, r28
    30ec:	8d 5e       	subi	r24, 0xED	; 237
    30ee:	9e 4f       	sbci	r25, 0xFE	; 254
    30f0:	fc 01       	movw	r30, r24
    30f2:	e2 0f       	add	r30, r18
    30f4:	f3 1f       	adc	r31, r19
    30f6:	80 81       	ld	r24, Z
    30f8:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <UART_sendByte>
				LCD_displayString("press = to send!");//Statements
				send_key=KeyPad_getPressedKey();
			}while(send_key!= '=');

			/*send password and receives the check from MCU2*/
			for (int i=0;i<5;i++){
    30fc:	de 01       	movw	r26, r28
    30fe:	af 5f       	subi	r26, 0xFF	; 255
    3100:	be 4f       	sbci	r27, 0xFE	; 254
    3102:	fe 01       	movw	r30, r28
    3104:	ef 5f       	subi	r30, 0xFF	; 255
    3106:	fe 4f       	sbci	r31, 0xFE	; 254
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	01 96       	adiw	r24, 0x01	; 1
    310e:	11 96       	adiw	r26, 0x01	; 1
    3110:	9c 93       	st	X, r25
    3112:	8e 93       	st	-X, r24
    3114:	fe 01       	movw	r30, r28
    3116:	ef 5f       	subi	r30, 0xFF	; 255
    3118:	fe 4f       	sbci	r31, 0xFE	; 254
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	85 30       	cpi	r24, 0x05	; 5
    3120:	91 05       	cpc	r25, r1
    3122:	f4 f2       	brlt	.-68     	; 0x30e0 <main+0x19ce>
				UART_sendByte(key[i]);
			}
			LCD_clearScreen();
    3124:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>

			check=UART_recieveByte();
    3128:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    312c:	fe 01       	movw	r30, r28
    312e:	ee 5e       	subi	r30, 0xEE	; 238
    3130:	fe 4f       	sbci	r31, 0xFE	; 254
    3132:	80 83       	st	Z, r24
			 */
			            /******************************************************************************
						 *                    IF MATECHED ---> go to step 0                           *
						 ******************************************************************************/

			if(check==0){
    3134:	fe 01       	movw	r30, r28
    3136:	ee 5e       	subi	r30, 0xEE	; 238
    3138:	fe 4f       	sbci	r31, 0xFE	; 254
    313a:	80 81       	ld	r24, Z
    313c:	88 23       	and	r24, r24
    313e:	09 f0       	breq	.+2      	; 0x3142 <main+0x1a30>
    3140:	91 c0       	rjmp	.+290    	; 0x3264 <main+0x1b52>
				LCD_displayString("unmatched");
    3142:	8d e3       	ldi	r24, 0x3D	; 61
    3144:	91 e0       	ldi	r25, 0x01	; 1
    3146:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    314a:	fe 01       	movw	r30, r28
    314c:	ed 5b       	subi	r30, 0xBD	; 189
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	aa e7       	ldi	r26, 0x7A	; 122
    3156:	b4 e4       	ldi	r27, 0x44	; 68
    3158:	80 83       	st	Z, r24
    315a:	91 83       	std	Z+1, r25	; 0x01
    315c:	a2 83       	std	Z+2, r26	; 0x02
    315e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3160:	8e 01       	movw	r16, r28
    3162:	01 5c       	subi	r16, 0xC1	; 193
    3164:	1f 4f       	sbci	r17, 0xFF	; 255
    3166:	fe 01       	movw	r30, r28
    3168:	ed 5b       	subi	r30, 0xBD	; 189
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	4a ef       	ldi	r20, 0xFA	; 250
    317a:	54 e4       	ldi	r21, 0x44	; 68
    317c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	f8 01       	movw	r30, r16
    3186:	80 83       	st	Z, r24
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	a2 83       	std	Z+2, r26	; 0x02
    318c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    318e:	fe 01       	movw	r30, r28
    3190:	ff 96       	adiw	r30, 0x3f	; 63
    3192:	60 81       	ld	r22, Z
    3194:	71 81       	ldd	r23, Z+1	; 0x01
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e8       	ldi	r20, 0x80	; 128
    31a0:	5f e3       	ldi	r21, 0x3F	; 63
    31a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31a6:	88 23       	and	r24, r24
    31a8:	2c f4       	brge	.+10     	; 0x31b4 <main+0x1aa2>
		__ticks = 1;
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	9e af       	std	Y+62, r25	; 0x3e
    31b0:	8d af       	std	Y+61, r24	; 0x3d
    31b2:	46 c0       	rjmp	.+140    	; 0x3240 <main+0x1b2e>
	else if (__tmp > 65535)
    31b4:	fe 01       	movw	r30, r28
    31b6:	ff 96       	adiw	r30, 0x3f	; 63
    31b8:	60 81       	ld	r22, Z
    31ba:	71 81       	ldd	r23, Z+1	; 0x01
    31bc:	82 81       	ldd	r24, Z+2	; 0x02
    31be:	93 81       	ldd	r25, Z+3	; 0x03
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	3f ef       	ldi	r19, 0xFF	; 255
    31c4:	4f e7       	ldi	r20, 0x7F	; 127
    31c6:	57 e4       	ldi	r21, 0x47	; 71
    31c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31cc:	18 16       	cp	r1, r24
    31ce:	64 f5       	brge	.+88     	; 0x3228 <main+0x1b16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d0:	fe 01       	movw	r30, r28
    31d2:	ed 5b       	subi	r30, 0xBD	; 189
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	60 81       	ld	r22, Z
    31d8:	71 81       	ldd	r23, Z+1	; 0x01
    31da:	82 81       	ldd	r24, Z+2	; 0x02
    31dc:	93 81       	ldd	r25, Z+3	; 0x03
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e2       	ldi	r20, 0x20	; 32
    31e4:	51 e4       	ldi	r21, 0x41	; 65
    31e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	9e af       	std	Y+62, r25	; 0x3e
    31fc:	8d af       	std	Y+61, r24	; 0x3d
    31fe:	0f c0       	rjmp	.+30     	; 0x321e <main+0x1b0c>
    3200:	88 ec       	ldi	r24, 0xC8	; 200
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	9c af       	std	Y+60, r25	; 0x3c
    3206:	8b af       	std	Y+59, r24	; 0x3b
    3208:	8b ad       	ldd	r24, Y+59	; 0x3b
    320a:	9c ad       	ldd	r25, Y+60	; 0x3c
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <main+0x1afa>
    3210:	9c af       	std	Y+60, r25	; 0x3c
    3212:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	8d ad       	ldd	r24, Y+61	; 0x3d
    3216:	9e ad       	ldd	r25, Y+62	; 0x3e
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	9e af       	std	Y+62, r25	; 0x3e
    321c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3220:	9e ad       	ldd	r25, Y+62	; 0x3e
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	69 f7       	brne	.-38     	; 0x3200 <main+0x1aee>
    3226:	16 c0       	rjmp	.+44     	; 0x3254 <main+0x1b42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3228:	fe 01       	movw	r30, r28
    322a:	ff 96       	adiw	r30, 0x3f	; 63
    322c:	60 81       	ld	r22, Z
    322e:	71 81       	ldd	r23, Z+1	; 0x01
    3230:	82 81       	ldd	r24, Z+2	; 0x02
    3232:	93 81       	ldd	r25, Z+3	; 0x03
    3234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	9e af       	std	Y+62, r25	; 0x3e
    323e:	8d af       	std	Y+61, r24	; 0x3d
    3240:	8d ad       	ldd	r24, Y+61	; 0x3d
    3242:	9e ad       	ldd	r25, Y+62	; 0x3e
    3244:	9a af       	std	Y+58, r25	; 0x3a
    3246:	89 af       	std	Y+57, r24	; 0x39
    3248:	89 ad       	ldd	r24, Y+57	; 0x39
    324a:	9a ad       	ldd	r25, Y+58	; 0x3a
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	f1 f7       	brne	.-4      	; 0x324c <main+0x1b3a>
    3250:	9a af       	std	Y+58, r25	; 0x3a
    3252:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1000);
				LCD_clearScreen();
    3254:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
				g_step=UART_recieveByte();
    3258:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    325c:	80 93 b7 01 	sts	0x01B7, r24
    3260:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
			}else if(check==1){
    3264:	fe 01       	movw	r30, r28
    3266:	ee 5e       	subi	r30, 0xEE	; 238
    3268:	fe 4f       	sbci	r31, 0xFE	; 254
    326a:	80 81       	ld	r24, Z
    326c:	81 30       	cpi	r24, 0x01	; 1
    326e:	11 f0       	breq	.+4      	; 0x3274 <main+0x1b62>
    3270:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
				LCD_displayString("matched");
    3274:	87 e4       	ldi	r24, 0x47	; 71
    3276:	91 e0       	ldi	r25, 0x01	; 1
    3278:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	aa e7       	ldi	r26, 0x7A	; 122
    3282:	b4 e4       	ldi	r27, 0x44	; 68
    3284:	8d ab       	std	Y+53, r24	; 0x35
    3286:	9e ab       	std	Y+54, r25	; 0x36
    3288:	af ab       	std	Y+55, r26	; 0x37
    328a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328c:	6d a9       	ldd	r22, Y+53	; 0x35
    328e:	7e a9       	ldd	r23, Y+54	; 0x36
    3290:	8f a9       	ldd	r24, Y+55	; 0x37
    3292:	98 ad       	ldd	r25, Y+56	; 0x38
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	4a ef       	ldi	r20, 0xFA	; 250
    329a:	54 e4       	ldi	r21, 0x44	; 68
    329c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	89 ab       	std	Y+49, r24	; 0x31
    32a6:	9a ab       	std	Y+50, r25	; 0x32
    32a8:	ab ab       	std	Y+51, r26	; 0x33
    32aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32ac:	69 a9       	ldd	r22, Y+49	; 0x31
    32ae:	7a a9       	ldd	r23, Y+50	; 0x32
    32b0:	8b a9       	ldd	r24, Y+51	; 0x33
    32b2:	9c a9       	ldd	r25, Y+52	; 0x34
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e8       	ldi	r20, 0x80	; 128
    32ba:	5f e3       	ldi	r21, 0x3F	; 63
    32bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32c0:	88 23       	and	r24, r24
    32c2:	2c f4       	brge	.+10     	; 0x32ce <main+0x1bbc>
		__ticks = 1;
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	98 ab       	std	Y+48, r25	; 0x30
    32ca:	8f a7       	std	Y+47, r24	; 0x2f
    32cc:	3f c0       	rjmp	.+126    	; 0x334c <main+0x1c3a>
	else if (__tmp > 65535)
    32ce:	69 a9       	ldd	r22, Y+49	; 0x31
    32d0:	7a a9       	ldd	r23, Y+50	; 0x32
    32d2:	8b a9       	ldd	r24, Y+51	; 0x33
    32d4:	9c a9       	ldd	r25, Y+52	; 0x34
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	3f ef       	ldi	r19, 0xFF	; 255
    32da:	4f e7       	ldi	r20, 0x7F	; 127
    32dc:	57 e4       	ldi	r21, 0x47	; 71
    32de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e2:	18 16       	cp	r1, r24
    32e4:	4c f5       	brge	.+82     	; 0x3338 <main+0x1c26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e6:	6d a9       	ldd	r22, Y+53	; 0x35
    32e8:	7e a9       	ldd	r23, Y+54	; 0x36
    32ea:	8f a9       	ldd	r24, Y+55	; 0x37
    32ec:	98 ad       	ldd	r25, Y+56	; 0x38
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e2       	ldi	r20, 0x20	; 32
    32f4:	51 e4       	ldi	r21, 0x41	; 65
    32f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	bc 01       	movw	r22, r24
    3300:	cd 01       	movw	r24, r26
    3302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	98 ab       	std	Y+48, r25	; 0x30
    330c:	8f a7       	std	Y+47, r24	; 0x2f
    330e:	0f c0       	rjmp	.+30     	; 0x332e <main+0x1c1c>
    3310:	88 ec       	ldi	r24, 0xC8	; 200
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	9e a7       	std	Y+46, r25	; 0x2e
    3316:	8d a7       	std	Y+45, r24	; 0x2d
    3318:	8d a5       	ldd	r24, Y+45	; 0x2d
    331a:	9e a5       	ldd	r25, Y+46	; 0x2e
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	f1 f7       	brne	.-4      	; 0x331c <main+0x1c0a>
    3320:	9e a7       	std	Y+46, r25	; 0x2e
    3322:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3324:	8f a5       	ldd	r24, Y+47	; 0x2f
    3326:	98 a9       	ldd	r25, Y+48	; 0x30
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	98 ab       	std	Y+48, r25	; 0x30
    332c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    332e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3330:	98 a9       	ldd	r25, Y+48	; 0x30
    3332:	00 97       	sbiw	r24, 0x00	; 0
    3334:	69 f7       	brne	.-38     	; 0x3310 <main+0x1bfe>
    3336:	14 c0       	rjmp	.+40     	; 0x3360 <main+0x1c4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3338:	69 a9       	ldd	r22, Y+49	; 0x31
    333a:	7a a9       	ldd	r23, Y+50	; 0x32
    333c:	8b a9       	ldd	r24, Y+51	; 0x33
    333e:	9c a9       	ldd	r25, Y+52	; 0x34
    3340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	98 ab       	std	Y+48, r25	; 0x30
    334a:	8f a7       	std	Y+47, r24	; 0x2f
    334c:	8f a5       	ldd	r24, Y+47	; 0x2f
    334e:	98 a9       	ldd	r25, Y+48	; 0x30
    3350:	9c a7       	std	Y+44, r25	; 0x2c
    3352:	8b a7       	std	Y+43, r24	; 0x2b
    3354:	8b a5       	ldd	r24, Y+43	; 0x2b
    3356:	9c a5       	ldd	r25, Y+44	; 0x2c
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	f1 f7       	brne	.-4      	; 0x3358 <main+0x1c46>
    335c:	9c a7       	std	Y+44, r25	; 0x2c
    335e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				LCD_clearScreen();
    3360:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
				g_step=UART_recieveByte();
    3364:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    3368:	80 93 b7 01 	sts	0x01B7, r24
    336c:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
			 *                    BAZZER ON FOR 1 MINUTE                                    *
			 *                    DISPLAR : there is a thief!                               *
			 *                    THEN GO TO STEP 2                                         *
			 ********************************************************************************/
		case 5:
			LCD_displayString("There is a thief!");			/*displays a warning message*/
    3370:	8f e7       	ldi	r24, 0x7F	; 127
    3372:	91 e0       	ldi	r25, 0x01	; 1
    3374:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
			g_seconds_needed=60;							/*select required time*/
    3378:	8c e3       	ldi	r24, 0x3C	; 60
    337a:	80 93 b6 01 	sts	0x01B6, r24
			SREG |= (1<<7);									/*enable I-bit*/
    337e:	af e5       	ldi	r26, 0x5F	; 95
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	ef e5       	ldi	r30, 0x5F	; 95
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	80 81       	ld	r24, Z
    3388:	80 68       	ori	r24, 0x80	; 128
    338a:	8c 93       	st	X, r24
			Set_callBack(ISR_COUNT);						/* Set the Call back function pointer in the timer0 driver*/
    338c:	85 e6       	ldi	r24, 0x65	; 101
    338e:	9b e0       	ldi	r25, 0x0B	; 11
    3390:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <Set_callBack>
			Timer0_ConfigType timer0_config = {CTC,F_CPU_1024,245};	/*create the configuration parameters of timer0*/
    3394:	ce 01       	movw	r24, r28
    3396:	88 5e       	subi	r24, 0xE8	; 232
    3398:	9e 4f       	sbci	r25, 0xFE	; 254
    339a:	c8 5d       	subi	r28, 0xD8	; 216
    339c:	de 4f       	sbci	r29, 0xFE	; 254
    339e:	99 83       	std	Y+1, r25	; 0x01
    33a0:	88 83       	st	Y, r24
    33a2:	c8 52       	subi	r28, 0x28	; 40
    33a4:	d1 40       	sbci	r29, 0x01	; 1
    33a6:	2d ea       	ldi	r18, 0xAD	; 173
    33a8:	31 e0       	ldi	r19, 0x01	; 1
    33aa:	c6 5d       	subi	r28, 0xD6	; 214
    33ac:	de 4f       	sbci	r29, 0xFE	; 254
    33ae:	39 83       	std	Y+1, r19	; 0x01
    33b0:	28 83       	st	Y, r18
    33b2:	ca 52       	subi	r28, 0x2A	; 42
    33b4:	d1 40       	sbci	r29, 0x01	; 1
    33b6:	33 e0       	ldi	r19, 0x03	; 3
    33b8:	c4 5d       	subi	r28, 0xD4	; 212
    33ba:	de 4f       	sbci	r29, 0xFE	; 254
    33bc:	38 83       	st	Y, r19
    33be:	cc 52       	subi	r28, 0x2C	; 44
    33c0:	d1 40       	sbci	r29, 0x01	; 1
    33c2:	c6 5d       	subi	r28, 0xD6	; 214
    33c4:	de 4f       	sbci	r29, 0xFE	; 254
    33c6:	e8 81       	ld	r30, Y
    33c8:	f9 81       	ldd	r31, Y+1	; 0x01
    33ca:	ca 52       	subi	r28, 0x2A	; 42
    33cc:	d1 40       	sbci	r29, 0x01	; 1
    33ce:	00 80       	ld	r0, Z
    33d0:	c6 5d       	subi	r28, 0xD6	; 214
    33d2:	de 4f       	sbci	r29, 0xFE	; 254
    33d4:	28 81       	ld	r18, Y
    33d6:	39 81       	ldd	r19, Y+1	; 0x01
    33d8:	ca 52       	subi	r28, 0x2A	; 42
    33da:	d1 40       	sbci	r29, 0x01	; 1
    33dc:	2f 5f       	subi	r18, 0xFF	; 255
    33de:	3f 4f       	sbci	r19, 0xFF	; 255
    33e0:	c6 5d       	subi	r28, 0xD6	; 214
    33e2:	de 4f       	sbci	r29, 0xFE	; 254
    33e4:	39 83       	std	Y+1, r19	; 0x01
    33e6:	28 83       	st	Y, r18
    33e8:	ca 52       	subi	r28, 0x2A	; 42
    33ea:	d1 40       	sbci	r29, 0x01	; 1
    33ec:	c8 5d       	subi	r28, 0xD8	; 216
    33ee:	de 4f       	sbci	r29, 0xFE	; 254
    33f0:	e8 81       	ld	r30, Y
    33f2:	f9 81       	ldd	r31, Y+1	; 0x01
    33f4:	c8 52       	subi	r28, 0x28	; 40
    33f6:	d1 40       	sbci	r29, 0x01	; 1
    33f8:	00 82       	st	Z, r0
    33fa:	c8 5d       	subi	r28, 0xD8	; 216
    33fc:	de 4f       	sbci	r29, 0xFE	; 254
    33fe:	28 81       	ld	r18, Y
    3400:	39 81       	ldd	r19, Y+1	; 0x01
    3402:	c8 52       	subi	r28, 0x28	; 40
    3404:	d1 40       	sbci	r29, 0x01	; 1
    3406:	2f 5f       	subi	r18, 0xFF	; 255
    3408:	3f 4f       	sbci	r19, 0xFF	; 255
    340a:	c8 5d       	subi	r28, 0xD8	; 216
    340c:	de 4f       	sbci	r29, 0xFE	; 254
    340e:	39 83       	std	Y+1, r19	; 0x01
    3410:	28 83       	st	Y, r18
    3412:	c8 52       	subi	r28, 0x28	; 40
    3414:	d1 40       	sbci	r29, 0x01	; 1
    3416:	c4 5d       	subi	r28, 0xD4	; 212
    3418:	de 4f       	sbci	r29, 0xFE	; 254
    341a:	38 81       	ld	r19, Y
    341c:	cc 52       	subi	r28, 0x2C	; 44
    341e:	d1 40       	sbci	r29, 0x01	; 1
    3420:	31 50       	subi	r19, 0x01	; 1
    3422:	c4 5d       	subi	r28, 0xD4	; 212
    3424:	de 4f       	sbci	r29, 0xFE	; 254
    3426:	38 83       	st	Y, r19
    3428:	cc 52       	subi	r28, 0x2C	; 44
    342a:	d1 40       	sbci	r29, 0x01	; 1
    342c:	c4 5d       	subi	r28, 0xD4	; 212
    342e:	de 4f       	sbci	r29, 0xFE	; 254
    3430:	88 81       	ld	r24, Y
    3432:	cc 52       	subi	r28, 0x2C	; 44
    3434:	d1 40       	sbci	r29, 0x01	; 1
    3436:	88 23       	and	r24, r24
    3438:	21 f6       	brne	.-120    	; 0x33c2 <main+0x1cb0>
			LCD_displayString("door is closing!");				/*displays that the door is closing*/
    343a:	81 e9       	ldi	r24, 0x91	; 145
    343c:	91 e0       	ldi	r25, 0x01	; 1
    343e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
			Timer0_init(&timer0_config);						/*initialize the timer with selected configurations*/
    3442:	ce 01       	movw	r24, r28
    3444:	88 5e       	subi	r24, 0xE8	; 232
    3446:	9e 4f       	sbci	r25, 0xFE	; 254
    3448:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <Timer0_init>
			/*this line prevents the code to repeat step3 and get stuck in UART receiving byte
			 * the code will wait in infinite loop until the counter finishes and reset the step to main
			 */
			while(g_step!=2);
    344c:	80 91 b7 01 	lds	r24, 0x01B7
    3450:	82 30       	cpi	r24, 0x02	; 2
    3452:	e1 f7       	brne	.-8      	; 0x344c <main+0x1d3a>
    3454:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
			break;


			/* step 6 is like step 3 exactly but the motor will run CCW*/
		case 6:
			LCD_displayString("enter password");
    3458:	8e e1       	ldi	r24, 0x1E	; 30
    345a:	91 e0       	ldi	r25, 0x01	; 1
    345c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
			/*enter the password*/
			for(int i=0 ;i<5;i++ ){
    3468:	fe 01       	movw	r30, r28
    346a:	e1 50       	subi	r30, 0x01	; 1
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	11 82       	std	Z+1, r1	; 0x01
    3470:	10 82       	st	Z, r1
    3472:	af c0       	rjmp	.+350    	; 0x35d2 <main+0x1ec0>
				/* if any switch pressed for more than 500 ms it counts more than one press */
				key[i] = KeyPad_getPressedKey(); /* get the pressed key number */
    3474:	fe 01       	movw	r30, r28
    3476:	e1 50       	subi	r30, 0x01	; 1
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	00 81       	ld	r16, Z
    347c:	11 81       	ldd	r17, Z+1	; 0x01
    347e:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    3482:	28 2f       	mov	r18, r24
    3484:	ce 01       	movw	r24, r28
    3486:	8d 5e       	subi	r24, 0xED	; 237
    3488:	9e 4f       	sbci	r25, 0xFE	; 254
    348a:	fc 01       	movw	r30, r24
    348c:	e0 0f       	add	r30, r16
    348e:	f1 1f       	adc	r31, r17
    3490:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    3492:	8a e2       	ldi	r24, 0x2A	; 42
    3494:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
				/*extra addition
				 * button ON/C in keyboard clears the password entered without count any wrong trials
				 */
				if(key[i]==13){
    3498:	fe 01       	movw	r30, r28
    349a:	e1 50       	subi	r30, 0x01	; 1
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	20 81       	ld	r18, Z
    34a0:	31 81       	ldd	r19, Z+1	; 0x01
    34a2:	ce 01       	movw	r24, r28
    34a4:	8d 5e       	subi	r24, 0xED	; 237
    34a6:	9e 4f       	sbci	r25, 0xFE	; 254
    34a8:	fc 01       	movw	r30, r24
    34aa:	e2 0f       	add	r30, r18
    34ac:	f3 1f       	adc	r31, r19
    34ae:	80 81       	ld	r24, Z
    34b0:	8d 30       	cpi	r24, 0x0D	; 13
    34b2:	89 f4       	brne	.+34     	; 0x34d6 <main+0x1dc4>
					/*reset the LCD screen*/
					LCD_clearScreen();
    34b4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
					LCD_displayString("enter password ");
    34b8:	8d e2       	ldi	r24, 0x2D	; 45
    34ba:	91 e0       	ldi	r25, 0x01	; 1
    34bc:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
					LCD_goToRowColumn(1,0);
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	60 e0       	ldi	r22, 0x00	; 0
    34c4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
					i=-1;						/*the counter is set to -1 so the next loop will be resets to zero as i increases in each loop by one*/
    34c8:	fe 01       	movw	r30, r28
    34ca:	e1 50       	subi	r30, 0x01	; 1
    34cc:	ff 4f       	sbci	r31, 0xFF	; 255
    34ce:	8f ef       	ldi	r24, 0xFF	; 255
    34d0:	9f ef       	ldi	r25, 0xFF	; 255
    34d2:	91 83       	std	Z+1, r25	; 0x01
    34d4:	80 83       	st	Z, r24
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	aa ef       	ldi	r26, 0xFA	; 250
    34dc:	b3 e4       	ldi	r27, 0x43	; 67
    34de:	8f a3       	std	Y+39, r24	; 0x27
    34e0:	98 a7       	std	Y+40, r25	; 0x28
    34e2:	a9 a7       	std	Y+41, r26	; 0x29
    34e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e6:	6f a1       	ldd	r22, Y+39	; 0x27
    34e8:	78 a5       	ldd	r23, Y+40	; 0x28
    34ea:	89 a5       	ldd	r24, Y+41	; 0x29
    34ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	4a ef       	ldi	r20, 0xFA	; 250
    34f4:	54 e4       	ldi	r21, 0x44	; 68
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	8b a3       	std	Y+35, r24	; 0x23
    3500:	9c a3       	std	Y+36, r25	; 0x24
    3502:	ad a3       	std	Y+37, r26	; 0x25
    3504:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3506:	6b a1       	ldd	r22, Y+35	; 0x23
    3508:	7c a1       	ldd	r23, Y+36	; 0x24
    350a:	8d a1       	ldd	r24, Y+37	; 0x25
    350c:	9e a1       	ldd	r25, Y+38	; 0x26
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	40 e8       	ldi	r20, 0x80	; 128
    3514:	5f e3       	ldi	r21, 0x3F	; 63
    3516:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    351a:	88 23       	and	r24, r24
    351c:	2c f4       	brge	.+10     	; 0x3528 <main+0x1e16>
		__ticks = 1;
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	9a a3       	std	Y+34, r25	; 0x22
    3524:	89 a3       	std	Y+33, r24	; 0x21
    3526:	3f c0       	rjmp	.+126    	; 0x35a6 <main+0x1e94>
	else if (__tmp > 65535)
    3528:	6b a1       	ldd	r22, Y+35	; 0x23
    352a:	7c a1       	ldd	r23, Y+36	; 0x24
    352c:	8d a1       	ldd	r24, Y+37	; 0x25
    352e:	9e a1       	ldd	r25, Y+38	; 0x26
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	3f ef       	ldi	r19, 0xFF	; 255
    3534:	4f e7       	ldi	r20, 0x7F	; 127
    3536:	57 e4       	ldi	r21, 0x47	; 71
    3538:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    353c:	18 16       	cp	r1, r24
    353e:	4c f5       	brge	.+82     	; 0x3592 <main+0x1e80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3540:	6f a1       	ldd	r22, Y+39	; 0x27
    3542:	78 a5       	ldd	r23, Y+40	; 0x28
    3544:	89 a5       	ldd	r24, Y+41	; 0x29
    3546:	9a a5       	ldd	r25, Y+42	; 0x2a
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e2       	ldi	r20, 0x20	; 32
    354e:	51 e4       	ldi	r21, 0x41	; 65
    3550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	bc 01       	movw	r22, r24
    355a:	cd 01       	movw	r24, r26
    355c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	9a a3       	std	Y+34, r25	; 0x22
    3566:	89 a3       	std	Y+33, r24	; 0x21
    3568:	0f c0       	rjmp	.+30     	; 0x3588 <main+0x1e76>
    356a:	88 ec       	ldi	r24, 0xC8	; 200
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	98 a3       	std	Y+32, r25	; 0x20
    3570:	8f 8f       	std	Y+31, r24	; 0x1f
    3572:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3574:	98 a1       	ldd	r25, Y+32	; 0x20
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <main+0x1e64>
    357a:	98 a3       	std	Y+32, r25	; 0x20
    357c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357e:	89 a1       	ldd	r24, Y+33	; 0x21
    3580:	9a a1       	ldd	r25, Y+34	; 0x22
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	9a a3       	std	Y+34, r25	; 0x22
    3586:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3588:	89 a1       	ldd	r24, Y+33	; 0x21
    358a:	9a a1       	ldd	r25, Y+34	; 0x22
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	69 f7       	brne	.-38     	; 0x356a <main+0x1e58>
    3590:	14 c0       	rjmp	.+40     	; 0x35ba <main+0x1ea8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3592:	6b a1       	ldd	r22, Y+35	; 0x23
    3594:	7c a1       	ldd	r23, Y+36	; 0x24
    3596:	8d a1       	ldd	r24, Y+37	; 0x25
    3598:	9e a1       	ldd	r25, Y+38	; 0x26
    359a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	9a a3       	std	Y+34, r25	; 0x22
    35a4:	89 a3       	std	Y+33, r24	; 0x21
    35a6:	89 a1       	ldd	r24, Y+33	; 0x21
    35a8:	9a a1       	ldd	r25, Y+34	; 0x22
    35aa:	9e 8f       	std	Y+30, r25	; 0x1e
    35ac:	8d 8f       	std	Y+29, r24	; 0x1d
    35ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <main+0x1ea0>
    35b6:	9e 8f       	std	Y+30, r25	; 0x1e
    35b8:	8d 8f       	std	Y+29, r24	; 0x1d
			/* step 6 is like step 3 exactly but the motor will run CCW*/
		case 6:
			LCD_displayString("enter password");
			LCD_goToRowColumn(1,0);
			/*enter the password*/
			for(int i=0 ;i<5;i++ ){
    35ba:	de 01       	movw	r26, r28
    35bc:	a1 50       	subi	r26, 0x01	; 1
    35be:	bf 4f       	sbci	r27, 0xFF	; 255
    35c0:	fe 01       	movw	r30, r28
    35c2:	e1 50       	subi	r30, 0x01	; 1
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 81       	ld	r24, Z
    35c8:	91 81       	ldd	r25, Z+1	; 0x01
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	11 96       	adiw	r26, 0x01	; 1
    35ce:	9c 93       	st	X, r25
    35d0:	8e 93       	st	-X, r24
    35d2:	fe 01       	movw	r30, r28
    35d4:	e1 50       	subi	r30, 0x01	; 1
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	80 81       	ld	r24, Z
    35da:	91 81       	ldd	r25, Z+1	; 0x01
    35dc:	85 30       	cpi	r24, 0x05	; 5
    35de:	91 05       	cpc	r25, r1
    35e0:	0c f4       	brge	.+2      	; 0x35e4 <main+0x1ed2>
    35e2:	48 cf       	rjmp	.-368    	; 0x3474 <main+0x1d62>
				}
				_delay_ms(500); /* Press time */

			}

			LCD_clearScreen();
    35e4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
			/*repeats until the user presses = sign to send*/
			do
			{
				LCD_displayString("press = to send!");//Statements
    35e8:	85 eb       	ldi	r24, 0xB5	; 181
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
				send_key=KeyPad_getPressedKey();
    35f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    35f4:	fe 01       	movw	r30, r28
    35f6:	ef 5e       	subi	r30, 0xEF	; 239
    35f8:	fe 4f       	sbci	r31, 0xFE	; 254
    35fa:	80 83       	st	Z, r24
			}while(send_key!= '=');
    35fc:	fe 01       	movw	r30, r28
    35fe:	ef 5e       	subi	r30, 0xEF	; 239
    3600:	fe 4f       	sbci	r31, 0xFE	; 254
    3602:	80 81       	ld	r24, Z
    3604:	8d 33       	cpi	r24, 0x3D	; 61
    3606:	81 f7       	brne	.-32     	; 0x35e8 <main+0x1ed6>

			/*sending the password to MCU2 and receive indication if the password matches or not*/
			for (int i=0;i<5;i++){
    3608:	fe 01       	movw	r30, r28
    360a:	e3 50       	subi	r30, 0x03	; 3
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	11 82       	std	Z+1, r1	; 0x01
    3610:	10 82       	st	Z, r1
    3612:	1a c0       	rjmp	.+52     	; 0x3648 <main+0x1f36>
				UART_sendByte(key[i]);
    3614:	fe 01       	movw	r30, r28
    3616:	e3 50       	subi	r30, 0x03	; 3
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	20 81       	ld	r18, Z
    361c:	31 81       	ldd	r19, Z+1	; 0x01
    361e:	ce 01       	movw	r24, r28
    3620:	8d 5e       	subi	r24, 0xED	; 237
    3622:	9e 4f       	sbci	r25, 0xFE	; 254
    3624:	fc 01       	movw	r30, r24
    3626:	e2 0f       	add	r30, r18
    3628:	f3 1f       	adc	r31, r19
    362a:	80 81       	ld	r24, Z
    362c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <UART_sendByte>
				LCD_displayString("press = to send!");//Statements
				send_key=KeyPad_getPressedKey();
			}while(send_key!= '=');

			/*sending the password to MCU2 and receive indication if the password matches or not*/
			for (int i=0;i<5;i++){
    3630:	de 01       	movw	r26, r28
    3632:	a3 50       	subi	r26, 0x03	; 3
    3634:	bf 4f       	sbci	r27, 0xFF	; 255
    3636:	fe 01       	movw	r30, r28
    3638:	e3 50       	subi	r30, 0x03	; 3
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	80 81       	ld	r24, Z
    363e:	91 81       	ldd	r25, Z+1	; 0x01
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	11 96       	adiw	r26, 0x01	; 1
    3644:	9c 93       	st	X, r25
    3646:	8e 93       	st	-X, r24
    3648:	fe 01       	movw	r30, r28
    364a:	e3 50       	subi	r30, 0x03	; 3
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	80 81       	ld	r24, Z
    3650:	91 81       	ldd	r25, Z+1	; 0x01
    3652:	85 30       	cpi	r24, 0x05	; 5
    3654:	91 05       	cpc	r25, r1
    3656:	f4 f2       	brlt	.-68     	; 0x3614 <main+0x1f02>
				UART_sendByte(key[i]);
			}
			LCD_clearScreen();
    3658:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>



			check=UART_recieveByte();
    365c:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    3660:	fe 01       	movw	r30, r28
    3662:	ee 5e       	subi	r30, 0xEE	; 238
    3664:	fe 4f       	sbci	r31, 0xFE	; 254
    3666:	80 83       	st	Z, r24

			/*in case the passwords don't match repeat the same step
			 * and in case it match it close the door
			 */

			if(check==0){
    3668:	fe 01       	movw	r30, r28
    366a:	ee 5e       	subi	r30, 0xEE	; 238
    366c:	fe 4f       	sbci	r31, 0xFE	; 254
    366e:	80 81       	ld	r24, Z
    3670:	88 23       	and	r24, r24
    3672:	09 f0       	breq	.+2      	; 0x3676 <main+0x1f64>
    3674:	7e c0       	rjmp	.+252    	; 0x3772 <main+0x2060>
				LCD_displayString("unmatched");
    3676:	8d e3       	ldi	r24, 0x3D	; 61
    3678:	91 e0       	ldi	r25, 0x01	; 1
    367a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	aa e7       	ldi	r26, 0x7A	; 122
    3684:	b4 e4       	ldi	r27, 0x44	; 68
    3686:	89 8f       	std	Y+25, r24	; 0x19
    3688:	9a 8f       	std	Y+26, r25	; 0x1a
    368a:	ab 8f       	std	Y+27, r26	; 0x1b
    368c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    368e:	69 8d       	ldd	r22, Y+25	; 0x19
    3690:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3692:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3694:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	4a ef       	ldi	r20, 0xFA	; 250
    369c:	54 e4       	ldi	r21, 0x44	; 68
    369e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	8d 8b       	std	Y+21, r24	; 0x15
    36a8:	9e 8b       	std	Y+22, r25	; 0x16
    36aa:	af 8b       	std	Y+23, r26	; 0x17
    36ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36ae:	6d 89       	ldd	r22, Y+21	; 0x15
    36b0:	7e 89       	ldd	r23, Y+22	; 0x16
    36b2:	8f 89       	ldd	r24, Y+23	; 0x17
    36b4:	98 8d       	ldd	r25, Y+24	; 0x18
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	40 e8       	ldi	r20, 0x80	; 128
    36bc:	5f e3       	ldi	r21, 0x3F	; 63
    36be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36c2:	88 23       	and	r24, r24
    36c4:	2c f4       	brge	.+10     	; 0x36d0 <main+0x1fbe>
		__ticks = 1;
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	9c 8b       	std	Y+20, r25	; 0x14
    36cc:	8b 8b       	std	Y+19, r24	; 0x13
    36ce:	3f c0       	rjmp	.+126    	; 0x374e <main+0x203c>
	else if (__tmp > 65535)
    36d0:	6d 89       	ldd	r22, Y+21	; 0x15
    36d2:	7e 89       	ldd	r23, Y+22	; 0x16
    36d4:	8f 89       	ldd	r24, Y+23	; 0x17
    36d6:	98 8d       	ldd	r25, Y+24	; 0x18
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	3f ef       	ldi	r19, 0xFF	; 255
    36dc:	4f e7       	ldi	r20, 0x7F	; 127
    36de:	57 e4       	ldi	r21, 0x47	; 71
    36e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36e4:	18 16       	cp	r1, r24
    36e6:	4c f5       	brge	.+82     	; 0x373a <main+0x2028>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e8:	69 8d       	ldd	r22, Y+25	; 0x19
    36ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	40 e2       	ldi	r20, 0x20	; 32
    36f6:	51 e4       	ldi	r21, 0x41	; 65
    36f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	bc 01       	movw	r22, r24
    3702:	cd 01       	movw	r24, r26
    3704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	9c 8b       	std	Y+20, r25	; 0x14
    370e:	8b 8b       	std	Y+19, r24	; 0x13
    3710:	0f c0       	rjmp	.+30     	; 0x3730 <main+0x201e>
    3712:	88 ec       	ldi	r24, 0xC8	; 200
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	9a 8b       	std	Y+18, r25	; 0x12
    3718:	89 8b       	std	Y+17, r24	; 0x11
    371a:	89 89       	ldd	r24, Y+17	; 0x11
    371c:	9a 89       	ldd	r25, Y+18	; 0x12
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	f1 f7       	brne	.-4      	; 0x371e <main+0x200c>
    3722:	9a 8b       	std	Y+18, r25	; 0x12
    3724:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3726:	8b 89       	ldd	r24, Y+19	; 0x13
    3728:	9c 89       	ldd	r25, Y+20	; 0x14
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	9c 8b       	std	Y+20, r25	; 0x14
    372e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3730:	8b 89       	ldd	r24, Y+19	; 0x13
    3732:	9c 89       	ldd	r25, Y+20	; 0x14
    3734:	00 97       	sbiw	r24, 0x00	; 0
    3736:	69 f7       	brne	.-38     	; 0x3712 <main+0x2000>
    3738:	14 c0       	rjmp	.+40     	; 0x3762 <main+0x2050>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    373a:	6d 89       	ldd	r22, Y+21	; 0x15
    373c:	7e 89       	ldd	r23, Y+22	; 0x16
    373e:	8f 89       	ldd	r24, Y+23	; 0x17
    3740:	98 8d       	ldd	r25, Y+24	; 0x18
    3742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	9c 8b       	std	Y+20, r25	; 0x14
    374c:	8b 8b       	std	Y+19, r24	; 0x13
    374e:	8b 89       	ldd	r24, Y+19	; 0x13
    3750:	9c 89       	ldd	r25, Y+20	; 0x14
    3752:	98 8b       	std	Y+16, r25	; 0x10
    3754:	8f 87       	std	Y+15, r24	; 0x0f
    3756:	8f 85       	ldd	r24, Y+15	; 0x0f
    3758:	98 89       	ldd	r25, Y+16	; 0x10
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	f1 f7       	brne	.-4      	; 0x375a <main+0x2048>
    375e:	98 8b       	std	Y+16, r25	; 0x10
    3760:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				LCD_clearScreen();
    3762:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
				g_step=UART_recieveByte();
    3766:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    376a:	80 93 b7 01 	sts	0x01B7, r24
    376e:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
			}else if(check==1){
    3772:	fe 01       	movw	r30, r28
    3774:	ee 5e       	subi	r30, 0xEE	; 238
    3776:	fe 4f       	sbci	r31, 0xFE	; 254
    3778:	80 81       	ld	r24, Z
    377a:	81 30       	cpi	r24, 0x01	; 1
    377c:	11 f0       	breq	.+4      	; 0x3782 <main+0x2070>
    377e:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>
				LCD_displayString("matched");
    3782:	87 e4       	ldi	r24, 0x47	; 71
    3784:	91 e0       	ldi	r25, 0x01	; 1
    3786:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	aa e7       	ldi	r26, 0x7A	; 122
    3790:	b4 e4       	ldi	r27, 0x44	; 68
    3792:	8b 87       	std	Y+11, r24	; 0x0b
    3794:	9c 87       	std	Y+12, r25	; 0x0c
    3796:	ad 87       	std	Y+13, r26	; 0x0d
    3798:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    379a:	6b 85       	ldd	r22, Y+11	; 0x0b
    379c:	7c 85       	ldd	r23, Y+12	; 0x0c
    379e:	8d 85       	ldd	r24, Y+13	; 0x0d
    37a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	4a ef       	ldi	r20, 0xFA	; 250
    37a8:	54 e4       	ldi	r21, 0x44	; 68
    37aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	8f 83       	std	Y+7, r24	; 0x07
    37b4:	98 87       	std	Y+8, r25	; 0x08
    37b6:	a9 87       	std	Y+9, r26	; 0x09
    37b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37ba:	6f 81       	ldd	r22, Y+7	; 0x07
    37bc:	78 85       	ldd	r23, Y+8	; 0x08
    37be:	89 85       	ldd	r24, Y+9	; 0x09
    37c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	40 e8       	ldi	r20, 0x80	; 128
    37c8:	5f e3       	ldi	r21, 0x3F	; 63
    37ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ce:	88 23       	and	r24, r24
    37d0:	2c f4       	brge	.+10     	; 0x37dc <main+0x20ca>
		__ticks = 1;
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	9e 83       	std	Y+6, r25	; 0x06
    37d8:	8d 83       	std	Y+5, r24	; 0x05
    37da:	3f c0       	rjmp	.+126    	; 0x385a <main+0x2148>
	else if (__tmp > 65535)
    37dc:	6f 81       	ldd	r22, Y+7	; 0x07
    37de:	78 85       	ldd	r23, Y+8	; 0x08
    37e0:	89 85       	ldd	r24, Y+9	; 0x09
    37e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	3f ef       	ldi	r19, 0xFF	; 255
    37e8:	4f e7       	ldi	r20, 0x7F	; 127
    37ea:	57 e4       	ldi	r21, 0x47	; 71
    37ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37f0:	18 16       	cp	r1, r24
    37f2:	4c f5       	brge	.+82     	; 0x3846 <main+0x2134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	40 e2       	ldi	r20, 0x20	; 32
    3802:	51 e4       	ldi	r21, 0x41	; 65
    3804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	bc 01       	movw	r22, r24
    380e:	cd 01       	movw	r24, r26
    3810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	9e 83       	std	Y+6, r25	; 0x06
    381a:	8d 83       	std	Y+5, r24	; 0x05
    381c:	0f c0       	rjmp	.+30     	; 0x383c <main+0x212a>
    381e:	88 ec       	ldi	r24, 0xC8	; 200
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	9c 83       	std	Y+4, r25	; 0x04
    3824:	8b 83       	std	Y+3, r24	; 0x03
    3826:	8b 81       	ldd	r24, Y+3	; 0x03
    3828:	9c 81       	ldd	r25, Y+4	; 0x04
    382a:	01 97       	sbiw	r24, 0x01	; 1
    382c:	f1 f7       	brne	.-4      	; 0x382a <main+0x2118>
    382e:	9c 83       	std	Y+4, r25	; 0x04
    3830:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3832:	8d 81       	ldd	r24, Y+5	; 0x05
    3834:	9e 81       	ldd	r25, Y+6	; 0x06
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	9e 83       	std	Y+6, r25	; 0x06
    383a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    383c:	8d 81       	ldd	r24, Y+5	; 0x05
    383e:	9e 81       	ldd	r25, Y+6	; 0x06
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	69 f7       	brne	.-38     	; 0x381e <main+0x210c>
    3844:	14 c0       	rjmp	.+40     	; 0x386e <main+0x215c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3846:	6f 81       	ldd	r22, Y+7	; 0x07
    3848:	78 85       	ldd	r23, Y+8	; 0x08
    384a:	89 85       	ldd	r24, Y+9	; 0x09
    384c:	9a 85       	ldd	r25, Y+10	; 0x0a
    384e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	9e 83       	std	Y+6, r25	; 0x06
    3858:	8d 83       	std	Y+5, r24	; 0x05
    385a:	8d 81       	ldd	r24, Y+5	; 0x05
    385c:	9e 81       	ldd	r25, Y+6	; 0x06
    385e:	9a 83       	std	Y+2, r25	; 0x02
    3860:	89 83       	std	Y+1, r24	; 0x01
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	9a 81       	ldd	r25, Y+2	; 0x02
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <main+0x2154>
    386a:	9a 83       	std	Y+2, r25	; 0x02
    386c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				LCD_clearScreen();
    386e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
				while(UART_recieveByte()!=M2_READY);		/*waits until MCU2 is ready*/
    3872:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    3876:	80 31       	cpi	r24, 0x10	; 16
    3878:	e1 f7       	brne	.-8      	; 0x3872 <main+0x2160>
				g_seconds_needed=15;			/*select required time*/
    387a:	8f e0       	ldi	r24, 0x0F	; 15
    387c:	80 93 b6 01 	sts	0x01B6, r24
				SREG |= (1<<7);					/*enable the I-bit*/
    3880:	af e5       	ldi	r26, 0x5F	; 95
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	ef e5       	ldi	r30, 0x5F	; 95
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	80 68       	ori	r24, 0x80	; 128
    388c:	8c 93       	st	X, r24
				Set_callBack(ISR_COUNT);		/* Set the Call back function pointer in the timer0 driver*/
    388e:	85 e6       	ldi	r24, 0x65	; 101
    3890:	9b e0       	ldi	r25, 0x0B	; 11
    3892:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <Set_callBack>
				Timer0_ConfigType timer0_config = {CTC,F_CPU_1024,245};/*create the configuration parameters of timer0*/
    3896:	ce 01       	movw	r24, r28
    3898:	82 5e       	subi	r24, 0xE2	; 226
    389a:	9e 4f       	sbci	r25, 0xFE	; 254
    389c:	c3 5d       	subi	r28, 0xD3	; 211
    389e:	de 4f       	sbci	r29, 0xFE	; 254
    38a0:	99 83       	std	Y+1, r25	; 0x01
    38a2:	88 83       	st	Y, r24
    38a4:	cd 52       	subi	r28, 0x2D	; 45
    38a6:	d1 40       	sbci	r29, 0x01	; 1
    38a8:	ea ea       	ldi	r30, 0xAA	; 170
    38aa:	f1 e0       	ldi	r31, 0x01	; 1
    38ac:	c1 5d       	subi	r28, 0xD1	; 209
    38ae:	de 4f       	sbci	r29, 0xFE	; 254
    38b0:	f9 83       	std	Y+1, r31	; 0x01
    38b2:	e8 83       	st	Y, r30
    38b4:	cf 52       	subi	r28, 0x2F	; 47
    38b6:	d1 40       	sbci	r29, 0x01	; 1
    38b8:	f3 e0       	ldi	r31, 0x03	; 3
    38ba:	cf 5c       	subi	r28, 0xCF	; 207
    38bc:	de 4f       	sbci	r29, 0xFE	; 254
    38be:	f8 83       	st	Y, r31
    38c0:	c1 53       	subi	r28, 0x31	; 49
    38c2:	d1 40       	sbci	r29, 0x01	; 1
    38c4:	c1 5d       	subi	r28, 0xD1	; 209
    38c6:	de 4f       	sbci	r29, 0xFE	; 254
    38c8:	e8 81       	ld	r30, Y
    38ca:	f9 81       	ldd	r31, Y+1	; 0x01
    38cc:	cf 52       	subi	r28, 0x2F	; 47
    38ce:	d1 40       	sbci	r29, 0x01	; 1
    38d0:	00 80       	ld	r0, Z
    38d2:	c1 5d       	subi	r28, 0xD1	; 209
    38d4:	de 4f       	sbci	r29, 0xFE	; 254
    38d6:	28 81       	ld	r18, Y
    38d8:	39 81       	ldd	r19, Y+1	; 0x01
    38da:	cf 52       	subi	r28, 0x2F	; 47
    38dc:	d1 40       	sbci	r29, 0x01	; 1
    38de:	2f 5f       	subi	r18, 0xFF	; 255
    38e0:	3f 4f       	sbci	r19, 0xFF	; 255
    38e2:	c1 5d       	subi	r28, 0xD1	; 209
    38e4:	de 4f       	sbci	r29, 0xFE	; 254
    38e6:	39 83       	std	Y+1, r19	; 0x01
    38e8:	28 83       	st	Y, r18
    38ea:	cf 52       	subi	r28, 0x2F	; 47
    38ec:	d1 40       	sbci	r29, 0x01	; 1
    38ee:	c3 5d       	subi	r28, 0xD3	; 211
    38f0:	de 4f       	sbci	r29, 0xFE	; 254
    38f2:	e8 81       	ld	r30, Y
    38f4:	f9 81       	ldd	r31, Y+1	; 0x01
    38f6:	cd 52       	subi	r28, 0x2D	; 45
    38f8:	d1 40       	sbci	r29, 0x01	; 1
    38fa:	00 82       	st	Z, r0
    38fc:	c3 5d       	subi	r28, 0xD3	; 211
    38fe:	de 4f       	sbci	r29, 0xFE	; 254
    3900:	28 81       	ld	r18, Y
    3902:	39 81       	ldd	r19, Y+1	; 0x01
    3904:	cd 52       	subi	r28, 0x2D	; 45
    3906:	d1 40       	sbci	r29, 0x01	; 1
    3908:	2f 5f       	subi	r18, 0xFF	; 255
    390a:	3f 4f       	sbci	r19, 0xFF	; 255
    390c:	c3 5d       	subi	r28, 0xD3	; 211
    390e:	de 4f       	sbci	r29, 0xFE	; 254
    3910:	39 83       	std	Y+1, r19	; 0x01
    3912:	28 83       	st	Y, r18
    3914:	cd 52       	subi	r28, 0x2D	; 45
    3916:	d1 40       	sbci	r29, 0x01	; 1
    3918:	cf 5c       	subi	r28, 0xCF	; 207
    391a:	de 4f       	sbci	r29, 0xFE	; 254
    391c:	38 81       	ld	r19, Y
    391e:	c1 53       	subi	r28, 0x31	; 49
    3920:	d1 40       	sbci	r29, 0x01	; 1
    3922:	31 50       	subi	r19, 0x01	; 1
    3924:	cf 5c       	subi	r28, 0xCF	; 207
    3926:	de 4f       	sbci	r29, 0xFE	; 254
    3928:	38 83       	st	Y, r19
    392a:	c1 53       	subi	r28, 0x31	; 49
    392c:	d1 40       	sbci	r29, 0x01	; 1
    392e:	cf 5c       	subi	r28, 0xCF	; 207
    3930:	de 4f       	sbci	r29, 0xFE	; 254
    3932:	88 81       	ld	r24, Y
    3934:	c1 53       	subi	r28, 0x31	; 49
    3936:	d1 40       	sbci	r29, 0x01	; 1
    3938:	88 23       	and	r24, r24
    393a:	21 f6       	brne	.-120    	; 0x38c4 <main+0x21b2>
				LCD_displayString("door is closing!");
    393c:	81 e9       	ldi	r24, 0x91	; 145
    393e:	91 e0       	ldi	r25, 0x01	; 1
    3940:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
				Timer0_init(&timer0_config);	/*initialize the timer with selected configurations*/
    3944:	ce 01       	movw	r24, r28
    3946:	82 5e       	subi	r24, 0xE2	; 226
    3948:	9e 4f       	sbci	r25, 0xFE	; 254
    394a:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <Timer0_init>
				/*this line prevents the code to repeat step3 and get stuck in UART receiving byte
				 * the code will wait in infinite loop until the counter finishes and reset the step to main
				 */
				while(g_step!=2);
    394e:	80 91 b7 01 	lds	r24, 0x01B7
    3952:	82 30       	cpi	r24, 0x02	; 2
    3954:	e1 f7       	brne	.-8      	; 0x394e <main+0x223c>
    3956:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <main+0x40>

0000395a <__vector_9>:
#include "timer0.h"
#define NULL_PTR ((void*)0)
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect)
{
    395a:	1f 92       	push	r1
    395c:	0f 92       	push	r0
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	0f 92       	push	r0
    3962:	11 24       	eor	r1, r1
    3964:	2f 93       	push	r18
    3966:	3f 93       	push	r19
    3968:	4f 93       	push	r20
    396a:	5f 93       	push	r21
    396c:	6f 93       	push	r22
    396e:	7f 93       	push	r23
    3970:	8f 93       	push	r24
    3972:	9f 93       	push	r25
    3974:	af 93       	push	r26
    3976:	bf 93       	push	r27
    3978:	ef 93       	push	r30
    397a:	ff 93       	push	r31
    397c:	df 93       	push	r29
    397e:	cf 93       	push	r28
    3980:	cd b7       	in	r28, 0x3d	; 61
    3982:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3984:	80 91 b8 01 	lds	r24, 0x01B8
    3988:	90 91 b9 01 	lds	r25, 0x01B9
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	29 f0       	breq	.+10     	; 0x399a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3990:	e0 91 b8 01 	lds	r30, 0x01B8
    3994:	f0 91 b9 01 	lds	r31, 0x01B9
    3998:	09 95       	icall
	}
}
    399a:	cf 91       	pop	r28
    399c:	df 91       	pop	r29
    399e:	ff 91       	pop	r31
    39a0:	ef 91       	pop	r30
    39a2:	bf 91       	pop	r27
    39a4:	af 91       	pop	r26
    39a6:	9f 91       	pop	r25
    39a8:	8f 91       	pop	r24
    39aa:	7f 91       	pop	r23
    39ac:	6f 91       	pop	r22
    39ae:	5f 91       	pop	r21
    39b0:	4f 91       	pop	r20
    39b2:	3f 91       	pop	r19
    39b4:	2f 91       	pop	r18
    39b6:	0f 90       	pop	r0
    39b8:	0f be       	out	0x3f, r0	; 63
    39ba:	0f 90       	pop	r0
    39bc:	1f 90       	pop	r1
    39be:	18 95       	reti

000039c0 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    39c0:	1f 92       	push	r1
    39c2:	0f 92       	push	r0
    39c4:	0f b6       	in	r0, 0x3f	; 63
    39c6:	0f 92       	push	r0
    39c8:	11 24       	eor	r1, r1
    39ca:	2f 93       	push	r18
    39cc:	3f 93       	push	r19
    39ce:	4f 93       	push	r20
    39d0:	5f 93       	push	r21
    39d2:	6f 93       	push	r22
    39d4:	7f 93       	push	r23
    39d6:	8f 93       	push	r24
    39d8:	9f 93       	push	r25
    39da:	af 93       	push	r26
    39dc:	bf 93       	push	r27
    39de:	ef 93       	push	r30
    39e0:	ff 93       	push	r31
    39e2:	df 93       	push	r29
    39e4:	cf 93       	push	r28
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    39ea:	80 91 b8 01 	lds	r24, 0x01B8
    39ee:	90 91 b9 01 	lds	r25, 0x01B9
    39f2:	00 97       	sbiw	r24, 0x00	; 0
    39f4:	29 f0       	breq	.+10     	; 0x3a00 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    39f6:	e0 91 b8 01 	lds	r30, 0x01B8
    39fa:	f0 91 b9 01 	lds	r31, 0x01B9
    39fe:	09 95       	icall
	}
}
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	ff 91       	pop	r31
    3a06:	ef 91       	pop	r30
    3a08:	bf 91       	pop	r27
    3a0a:	af 91       	pop	r26
    3a0c:	9f 91       	pop	r25
    3a0e:	8f 91       	pop	r24
    3a10:	7f 91       	pop	r23
    3a12:	6f 91       	pop	r22
    3a14:	5f 91       	pop	r21
    3a16:	4f 91       	pop	r20
    3a18:	3f 91       	pop	r19
    3a1a:	2f 91       	pop	r18
    3a1c:	0f 90       	pop	r0
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	0f 90       	pop	r0
    3a22:	1f 90       	pop	r1
    3a24:	18 95       	reti

00003a26 <Set_callBack>:

void Set_callBack(void(*a_ptr)(void)){
    3a26:	df 93       	push	r29
    3a28:	cf 93       	push	r28
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <Set_callBack+0x6>
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	9a 83       	std	Y+2, r25	; 0x02
    3a32:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	9a 81       	ldd	r25, Y+2	; 0x02
    3a38:	90 93 b9 01 	sts	0x01B9, r25
    3a3c:	80 93 b8 01 	sts	0x01B8, r24
}
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	cf 91       	pop	r28
    3a46:	df 91       	pop	r29
    3a48:	08 95       	ret

00003a4a <Timer0_init>:


void Timer0_init(const Timer0_ConfigType * Config_Ptr)
{
    3a4a:	df 93       	push	r29
    3a4c:	cf 93       	push	r28
    3a4e:	00 d0       	rcall	.+0      	; 0x3a50 <Timer0_init+0x6>
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
    3a54:	9a 83       	std	Y+2, r25	; 0x02
    3a56:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    3a58:	e2 e5       	ldi	r30, 0x52	; 82
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	10 82       	st	Z, r1

	if ((Config_Ptr->mode==NORMAL_MODE))
    3a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a60:	fa 81       	ldd	r31, Y+2	; 0x02
    3a62:	80 81       	ld	r24, Z
    3a64:	88 23       	and	r24, r24
    3a66:	41 f4       	brne	.+16     	; 0x3a78 <Timer0_init+0x2e>
	{
			SET_BIT(TIMSK,TOIE0);
    3a68:	a9 e5       	ldi	r26, 0x59	; 89
    3a6a:	b0 e0       	ldi	r27, 0x00	; 0
    3a6c:	e9 e5       	ldi	r30, 0x59	; 89
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	80 81       	ld	r24, Z
    3a72:	81 60       	ori	r24, 0x01	; 1
    3a74:	8c 93       	st	X, r24
    3a76:	07 c0       	rjmp	.+14     	; 0x3a86 <Timer0_init+0x3c>
		}
	else
	{
			SET_BIT(TIMSK,OCIE0);
    3a78:	a9 e5       	ldi	r26, 0x59	; 89
    3a7a:	b0 e0       	ldi	r27, 0x00	; 0
    3a7c:	e9 e5       	ldi	r30, 0x59	; 89
    3a7e:	f0 e0       	ldi	r31, 0x00	; 0
    3a80:	80 81       	ld	r24, Z
    3a82:	82 60       	ori	r24, 0x02	; 2
    3a84:	8c 93       	st	X, r24
		}


	if ((Config_Ptr->mode==NORMAL_MODE)||(Config_Ptr->mode==CTC))
    3a86:	e9 81       	ldd	r30, Y+1	; 0x01
    3a88:	fa 81       	ldd	r31, Y+2	; 0x02
    3a8a:	80 81       	ld	r24, Z
    3a8c:	88 23       	and	r24, r24
    3a8e:	29 f0       	breq	.+10     	; 0x3a9a <Timer0_init+0x50>
    3a90:	e9 81       	ldd	r30, Y+1	; 0x01
    3a92:	fa 81       	ldd	r31, Y+2	; 0x02
    3a94:	80 81       	ld	r24, Z
    3a96:	82 30       	cpi	r24, 0x02	; 2
    3a98:	41 f4       	brne	.+16     	; 0x3aaa <Timer0_init+0x60>
	{
		SET_BIT(TCCR0,FOC0);
    3a9a:	a3 e5       	ldi	r26, 0x53	; 83
    3a9c:	b0 e0       	ldi	r27, 0x00	; 0
    3a9e:	e3 e5       	ldi	r30, 0x53	; 83
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	80 81       	ld	r24, Z
    3aa4:	80 68       	ori	r24, 0x80	; 128
    3aa6:	8c 93       	st	X, r24
    3aa8:	07 c0       	rjmp	.+14     	; 0x3ab8 <Timer0_init+0x6e>
	    }
	else
	{
		CLEAR_BIT(TCCR0,FOC0);
    3aaa:	a3 e5       	ldi	r26, 0x53	; 83
    3aac:	b0 e0       	ldi	r27, 0x00	; 0
    3aae:	e3 e5       	ldi	r30, 0x53	; 83
    3ab0:	f0 e0       	ldi	r31, 0x00	; 0
    3ab2:	80 81       	ld	r24, Z
    3ab4:	8f 77       	andi	r24, 0x7F	; 127
    3ab6:	8c 93       	st	X, r24
	    }
	//configue clock
	TCCR0= (TCCR0 & 0xF8) | (Config_Ptr->clock);
    3ab8:	a3 e5       	ldi	r26, 0x53	; 83
    3aba:	b0 e0       	ldi	r27, 0x00	; 0
    3abc:	e3 e5       	ldi	r30, 0x53	; 83
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	80 81       	ld	r24, Z
    3ac2:	98 2f       	mov	r25, r24
    3ac4:	98 7f       	andi	r25, 0xF8	; 248
    3ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    3aca:	81 81       	ldd	r24, Z+1	; 0x01
    3acc:	89 2b       	or	r24, r25
    3ace:	8c 93       	st	X, r24

	//configure mode
	TCCR0 = (TCCR0 & 0xB7) | (((Config_Ptr->mode)&0x01)<<6);
    3ad0:	a3 e5       	ldi	r26, 0x53	; 83
    3ad2:	b0 e0       	ldi	r27, 0x00	; 0
    3ad4:	e3 e5       	ldi	r30, 0x53	; 83
    3ad6:	f0 e0       	ldi	r31, 0x00	; 0
    3ad8:	80 81       	ld	r24, Z
    3ada:	28 2f       	mov	r18, r24
    3adc:	27 7b       	andi	r18, 0xB7	; 183
    3ade:	e9 81       	ldd	r30, Y+1	; 0x01
    3ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ae2:	80 81       	ld	r24, Z
    3ae4:	88 2f       	mov	r24, r24
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	81 70       	andi	r24, 0x01	; 1
    3aea:	90 70       	andi	r25, 0x00	; 0
    3aec:	00 24       	eor	r0, r0
    3aee:	96 95       	lsr	r25
    3af0:	87 95       	ror	r24
    3af2:	07 94       	ror	r0
    3af4:	96 95       	lsr	r25
    3af6:	87 95       	ror	r24
    3af8:	07 94       	ror	r0
    3afa:	98 2f       	mov	r25, r24
    3afc:	80 2d       	mov	r24, r0
    3afe:	82 2b       	or	r24, r18
    3b00:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xB7) | (((Config_Ptr->mode)&0x02)<<3);
    3b02:	a3 e5       	ldi	r26, 0x53	; 83
    3b04:	b0 e0       	ldi	r27, 0x00	; 0
    3b06:	e3 e5       	ldi	r30, 0x53	; 83
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    3b0a:	80 81       	ld	r24, Z
    3b0c:	28 2f       	mov	r18, r24
    3b0e:	27 7b       	andi	r18, 0xB7	; 183
    3b10:	e9 81       	ldd	r30, Y+1	; 0x01
    3b12:	fa 81       	ldd	r31, Y+2	; 0x02
    3b14:	80 81       	ld	r24, Z
    3b16:	88 2f       	mov	r24, r24
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	82 70       	andi	r24, 0x02	; 2
    3b1c:	90 70       	andi	r25, 0x00	; 0
    3b1e:	88 0f       	add	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	88 0f       	add	r24, r24
    3b24:	99 1f       	adc	r25, r25
    3b26:	88 0f       	add	r24, r24
    3b28:	99 1f       	adc	r25, r25
    3b2a:	82 2b       	or	r24, r18
    3b2c:	8c 93       	st	X, r24

	//configure OCR
	OCR0=Config_Ptr->OCR;
    3b2e:	ac e5       	ldi	r26, 0x5C	; 92
    3b30:	b0 e0       	ldi	r27, 0x00	; 0
    3b32:	e9 81       	ldd	r30, Y+1	; 0x01
    3b34:	fa 81       	ldd	r31, Y+2	; 0x02
    3b36:	82 81       	ldd	r24, Z+2	; 0x02
    3b38:	8c 93       	st	X, r24
}
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	cf 91       	pop	r28
    3b40:	df 91       	pop	r29
    3b42:	08 95       	ret

00003b44 <timer0_DeInit>:


void timer0_DeInit()
{
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	cd b7       	in	r28, 0x3d	; 61
    3b4a:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    3b4c:	e3 e5       	ldi	r30, 0x53	; 83
    3b4e:	f0 e0       	ldi	r31, 0x00	; 0
    3b50:	10 82       	st	Z, r1
	TCNT0=0;
    3b52:	e2 e5       	ldi	r30, 0x52	; 82
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    3b58:	a9 e5       	ldi	r26, 0x59	; 89
    3b5a:	b0 e0       	ldi	r27, 0x00	; 0
    3b5c:	e9 e5       	ldi	r30, 0x59	; 89
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	80 81       	ld	r24, Z
    3b62:	8d 7f       	andi	r24, 0xFD	; 253
    3b64:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    3b66:	a9 e5       	ldi	r26, 0x59	; 89
    3b68:	b0 e0       	ldi	r27, 0x00	; 0
    3b6a:	e9 e5       	ldi	r30, 0x59	; 89
    3b6c:	f0 e0       	ldi	r31, 0x00	; 0
    3b6e:	80 81       	ld	r24, Z
    3b70:	8e 7f       	andi	r24, 0xFE	; 254
    3b72:	8c 93       	st	X, r24

}
    3b74:	cf 91       	pop	r28
    3b76:	df 91       	pop	r29
    3b78:	08 95       	ret

00003b7a <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    3b7a:	df 93       	push	r29
    3b7c:	cf 93       	push	r28
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3b82:	eb e2       	ldi	r30, 0x2B	; 43
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	82 e0       	ldi	r24, 0x02	; 2
    3b88:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3b8a:	ea e2       	ldi	r30, 0x2A	; 42
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	88 e1       	ldi	r24, 0x18	; 24
    3b90:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3b92:	e0 e4       	ldi	r30, 0x40	; 64
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	86 e8       	ldi	r24, 0x86	; 134
    3b98:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    3b9a:	e0 e4       	ldi	r30, 0x40	; 64
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    3ba0:	e9 e2       	ldi	r30, 0x29	; 41
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	87 e6       	ldi	r24, 0x67	; 103
    3ba6:	80 83       	st	Z, r24
}
    3ba8:	cf 91       	pop	r28
    3baa:	df 91       	pop	r29
    3bac:	08 95       	ret

00003bae <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    3bae:	df 93       	push	r29
    3bb0:	cf 93       	push	r28
    3bb2:	0f 92       	push	r0
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
    3bb8:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3bba:	eb e2       	ldi	r30, 0x2B	; 43
    3bbc:	f0 e0       	ldi	r31, 0x00	; 0
    3bbe:	80 81       	ld	r24, Z
    3bc0:	88 2f       	mov	r24, r24
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	80 72       	andi	r24, 0x20	; 32
    3bc6:	90 70       	andi	r25, 0x00	; 0
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	b9 f3       	breq	.-18     	; 0x3bba <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    3bcc:	ec e2       	ldi	r30, 0x2C	; 44
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01
    3bd2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    3bd4:	0f 90       	pop	r0
    3bd6:	cf 91       	pop	r28
    3bd8:	df 91       	pop	r29
    3bda:	08 95       	ret

00003bdc <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    3bdc:	df 93       	push	r29
    3bde:	cf 93       	push	r28
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3be4:	eb e2       	ldi	r30, 0x2B	; 43
    3be6:	f0 e0       	ldi	r31, 0x00	; 0
    3be8:	80 81       	ld	r24, Z
    3bea:	88 23       	and	r24, r24
    3bec:	dc f7       	brge	.-10     	; 0x3be4 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    3bee:	ec e2       	ldi	r30, 0x2C	; 44
    3bf0:	f0 e0       	ldi	r31, 0x00	; 0
    3bf2:	80 81       	ld	r24, Z
}
    3bf4:	cf 91       	pop	r28
    3bf6:	df 91       	pop	r29
    3bf8:	08 95       	ret

00003bfa <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    3bfa:	df 93       	push	r29
    3bfc:	cf 93       	push	r28
    3bfe:	00 d0       	rcall	.+0      	; 0x3c00 <UART_sendString+0x6>
    3c00:	0f 92       	push	r0
    3c02:	cd b7       	in	r28, 0x3d	; 61
    3c04:	de b7       	in	r29, 0x3e	; 62
    3c06:	9b 83       	std	Y+3, r25	; 0x03
    3c08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c0a:	19 82       	std	Y+1, r1	; 0x01
    3c0c:	0e c0       	rjmp	.+28     	; 0x3c2a <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3c0e:	89 81       	ldd	r24, Y+1	; 0x01
    3c10:	28 2f       	mov	r18, r24
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	8a 81       	ldd	r24, Y+2	; 0x02
    3c16:	9b 81       	ldd	r25, Y+3	; 0x03
    3c18:	fc 01       	movw	r30, r24
    3c1a:	e2 0f       	add	r30, r18
    3c1c:	f3 1f       	adc	r31, r19
    3c1e:	80 81       	ld	r24, Z
    3c20:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <UART_sendByte>
		i++;
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	8f 5f       	subi	r24, 0xFF	; 255
    3c28:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	28 2f       	mov	r18, r24
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	8a 81       	ldd	r24, Y+2	; 0x02
    3c32:	9b 81       	ldd	r25, Y+3	; 0x03
    3c34:	fc 01       	movw	r30, r24
    3c36:	e2 0f       	add	r30, r18
    3c38:	f3 1f       	adc	r31, r19
    3c3a:	80 81       	ld	r24, Z
    3c3c:	88 23       	and	r24, r24
    3c3e:	39 f7       	brne	.-50     	; 0x3c0e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3c40:	0f 90       	pop	r0
    3c42:	0f 90       	pop	r0
    3c44:	0f 90       	pop	r0
    3c46:	cf 91       	pop	r28
    3c48:	df 91       	pop	r29
    3c4a:	08 95       	ret

00003c4c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    3c4c:	0f 93       	push	r16
    3c4e:	1f 93       	push	r17
    3c50:	df 93       	push	r29
    3c52:	cf 93       	push	r28
    3c54:	00 d0       	rcall	.+0      	; 0x3c56 <UART_receiveString+0xa>
    3c56:	0f 92       	push	r0
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
    3c5c:	9b 83       	std	Y+3, r25	; 0x03
    3c5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c60:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c6c:	8c 01       	movw	r16, r24
    3c6e:	02 0f       	add	r16, r18
    3c70:	13 1f       	adc	r17, r19
    3c72:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    3c76:	f8 01       	movw	r30, r16
    3c78:	80 83       	st	Z, r24
    3c7a:	0f c0       	rjmp	.+30     	; 0x3c9a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	8f 5f       	subi	r24, 0xFF	; 255
    3c80:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	28 2f       	mov	r18, r24
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c8c:	8c 01       	movw	r16, r24
    3c8e:	02 0f       	add	r16, r18
    3c90:	13 1f       	adc	r17, r19
    3c92:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <UART_recieveByte>
    3c96:	f8 01       	movw	r30, r16
    3c98:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	28 2f       	mov	r18, r24
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca4:	fc 01       	movw	r30, r24
    3ca6:	e2 0f       	add	r30, r18
    3ca8:	f3 1f       	adc	r31, r19
    3caa:	80 81       	ld	r24, Z
    3cac:	83 32       	cpi	r24, 0x23	; 35
    3cae:	31 f7       	brne	.-52     	; 0x3c7c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	28 2f       	mov	r18, r24
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cba:	fc 01       	movw	r30, r24
    3cbc:	e2 0f       	add	r30, r18
    3cbe:	f3 1f       	adc	r31, r19
    3cc0:	10 82       	st	Z, r1
}
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	1f 91       	pop	r17
    3cce:	0f 91       	pop	r16
    3cd0:	08 95       	ret

00003cd2 <__prologue_saves__>:
    3cd2:	2f 92       	push	r2
    3cd4:	3f 92       	push	r3
    3cd6:	4f 92       	push	r4
    3cd8:	5f 92       	push	r5
    3cda:	6f 92       	push	r6
    3cdc:	7f 92       	push	r7
    3cde:	8f 92       	push	r8
    3ce0:	9f 92       	push	r9
    3ce2:	af 92       	push	r10
    3ce4:	bf 92       	push	r11
    3ce6:	cf 92       	push	r12
    3ce8:	df 92       	push	r13
    3cea:	ef 92       	push	r14
    3cec:	ff 92       	push	r15
    3cee:	0f 93       	push	r16
    3cf0:	1f 93       	push	r17
    3cf2:	cf 93       	push	r28
    3cf4:	df 93       	push	r29
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
    3cfa:	ca 1b       	sub	r28, r26
    3cfc:	db 0b       	sbc	r29, r27
    3cfe:	0f b6       	in	r0, 0x3f	; 63
    3d00:	f8 94       	cli
    3d02:	de bf       	out	0x3e, r29	; 62
    3d04:	0f be       	out	0x3f, r0	; 63
    3d06:	cd bf       	out	0x3d, r28	; 61
    3d08:	09 94       	ijmp

00003d0a <__epilogue_restores__>:
    3d0a:	2a 88       	ldd	r2, Y+18	; 0x12
    3d0c:	39 88       	ldd	r3, Y+17	; 0x11
    3d0e:	48 88       	ldd	r4, Y+16	; 0x10
    3d10:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d12:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d14:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d16:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d18:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d1c:	b9 84       	ldd	r11, Y+9	; 0x09
    3d1e:	c8 84       	ldd	r12, Y+8	; 0x08
    3d20:	df 80       	ldd	r13, Y+7	; 0x07
    3d22:	ee 80       	ldd	r14, Y+6	; 0x06
    3d24:	fd 80       	ldd	r15, Y+5	; 0x05
    3d26:	0c 81       	ldd	r16, Y+4	; 0x04
    3d28:	1b 81       	ldd	r17, Y+3	; 0x03
    3d2a:	aa 81       	ldd	r26, Y+2	; 0x02
    3d2c:	b9 81       	ldd	r27, Y+1	; 0x01
    3d2e:	ce 0f       	add	r28, r30
    3d30:	d1 1d       	adc	r29, r1
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	f8 94       	cli
    3d36:	de bf       	out	0x3e, r29	; 62
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	cd bf       	out	0x3d, r28	; 61
    3d3c:	ed 01       	movw	r28, r26
    3d3e:	08 95       	ret

00003d40 <itoa>:
    3d40:	fb 01       	movw	r30, r22
    3d42:	9f 01       	movw	r18, r30
    3d44:	e8 94       	clt
    3d46:	42 30       	cpi	r20, 0x02	; 2
    3d48:	c4 f0       	brlt	.+48     	; 0x3d7a <itoa+0x3a>
    3d4a:	45 32       	cpi	r20, 0x25	; 37
    3d4c:	b4 f4       	brge	.+44     	; 0x3d7a <itoa+0x3a>
    3d4e:	4a 30       	cpi	r20, 0x0A	; 10
    3d50:	29 f4       	brne	.+10     	; 0x3d5c <itoa+0x1c>
    3d52:	97 fb       	bst	r25, 7
    3d54:	1e f4       	brtc	.+6      	; 0x3d5c <itoa+0x1c>
    3d56:	90 95       	com	r25
    3d58:	81 95       	neg	r24
    3d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5c:	64 2f       	mov	r22, r20
    3d5e:	77 27       	eor	r23, r23
    3d60:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <__udivmodhi4>
    3d64:	80 5d       	subi	r24, 0xD0	; 208
    3d66:	8a 33       	cpi	r24, 0x3A	; 58
    3d68:	0c f0       	brlt	.+2      	; 0x3d6c <itoa+0x2c>
    3d6a:	89 5d       	subi	r24, 0xD9	; 217
    3d6c:	81 93       	st	Z+, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	00 97       	sbiw	r24, 0x00	; 0
    3d72:	a1 f7       	brne	.-24     	; 0x3d5c <itoa+0x1c>
    3d74:	16 f4       	brtc	.+4      	; 0x3d7a <itoa+0x3a>
    3d76:	5d e2       	ldi	r21, 0x2D	; 45
    3d78:	51 93       	st	Z+, r21
    3d7a:	10 82       	st	Z, r1
    3d7c:	c9 01       	movw	r24, r18
    3d7e:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <strrev>

00003d82 <strrev>:
    3d82:	dc 01       	movw	r26, r24
    3d84:	fc 01       	movw	r30, r24
    3d86:	67 2f       	mov	r22, r23
    3d88:	71 91       	ld	r23, Z+
    3d8a:	77 23       	and	r23, r23
    3d8c:	e1 f7       	brne	.-8      	; 0x3d86 <strrev+0x4>
    3d8e:	32 97       	sbiw	r30, 0x02	; 2
    3d90:	04 c0       	rjmp	.+8      	; 0x3d9a <strrev+0x18>
    3d92:	7c 91       	ld	r23, X
    3d94:	6d 93       	st	X+, r22
    3d96:	70 83       	st	Z, r23
    3d98:	62 91       	ld	r22, -Z
    3d9a:	ae 17       	cp	r26, r30
    3d9c:	bf 07       	cpc	r27, r31
    3d9e:	c8 f3       	brcs	.-14     	; 0x3d92 <strrev+0x10>
    3da0:	08 95       	ret

00003da2 <__udivmodhi4>:
    3da2:	aa 1b       	sub	r26, r26
    3da4:	bb 1b       	sub	r27, r27
    3da6:	51 e1       	ldi	r21, 0x11	; 17
    3da8:	07 c0       	rjmp	.+14     	; 0x3db8 <__udivmodhi4_ep>

00003daa <__udivmodhi4_loop>:
    3daa:	aa 1f       	adc	r26, r26
    3dac:	bb 1f       	adc	r27, r27
    3dae:	a6 17       	cp	r26, r22
    3db0:	b7 07       	cpc	r27, r23
    3db2:	10 f0       	brcs	.+4      	; 0x3db8 <__udivmodhi4_ep>
    3db4:	a6 1b       	sub	r26, r22
    3db6:	b7 0b       	sbc	r27, r23

00003db8 <__udivmodhi4_ep>:
    3db8:	88 1f       	adc	r24, r24
    3dba:	99 1f       	adc	r25, r25
    3dbc:	5a 95       	dec	r21
    3dbe:	a9 f7       	brne	.-22     	; 0x3daa <__udivmodhi4_loop>
    3dc0:	80 95       	com	r24
    3dc2:	90 95       	com	r25
    3dc4:	bc 01       	movw	r22, r24
    3dc6:	cd 01       	movw	r24, r26
    3dc8:	08 95       	ret

00003dca <_exit>:
    3dca:	f8 94       	cli

00003dcc <__stop_program>:
    3dcc:	ff cf       	rjmp	.-2      	; 0x3dcc <__stop_program>
